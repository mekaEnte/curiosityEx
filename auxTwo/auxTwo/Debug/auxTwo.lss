
auxTwo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  000013e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          000001b4  20000064  00001448  00020064  2**2
                  ALLOC
  5 .stack        00010000  20000218  000015fc  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b1fe  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a1f  00000000  00000000  0003b2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a26d  00000000  00000000  0003dd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000978  00000000  00000000  00047f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  000488ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d709  00000000  00000000  000492ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010168  00000000  00000000  000769f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ffb69  00000000  00000000  00086b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001a84  00000000  00000000  001866c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 02 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	b1 0a 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 35 0e 00 00 49 0e 00 00 5d 0e 00 00     ....5...I...]...
     144:	71 0e 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     q...............
     154:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     178:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     188:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
     198:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     208:	00 00 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     218:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     228:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     238:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     248:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     258:	dd 02 00 00 dd 02 00 00 00 00 00 00                 ............

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000064 	.word	0x20000064
     280:	00000000 	.word	0x00000000
     284:	000013e4 	.word	0x000013e4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000013e4 	.word	0x000013e4
     2c4:	20000068 	.word	0x20000068
     2c8:	000013e4 	.word	0x000013e4
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000415 	.word	0x00000415

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	000013e4 	.word	0x000013e4
     340:	20000064 	.word	0x20000064
     344:	20000064 	.word	0x20000064
     348:	20000218 	.word	0x20000218
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	0000108d 	.word	0x0000108d
     358:	00000fa5 	.word	0x00000fa5

0000035c <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     35c:	4b06      	ldr	r3, [pc, #24]	; (378 <USART_0_CLOCK_init+0x1c>)
     35e:	2240      	movs	r2, #64	; 0x40
     360:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     364:	2243      	movs	r2, #67	; 0x43
     366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     36a:	4a04      	ldr	r2, [pc, #16]	; (37c <USART_0_CLOCK_init+0x20>)
     36c:	6a13      	ldr	r3, [r2, #32]
     36e:	f043 0301 	orr.w	r3, r3, #1
     372:	6213      	str	r3, [r2, #32]
     374:	4770      	bx	lr
     376:	bf00      	nop
     378:	40001c00 	.word	0x40001c00
     37c:	40000800 	.word	0x40000800

00000380 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <USART_0_PORT_init+0x44>)
     382:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     392:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     396:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     39a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ae:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b2:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ba:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3be:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     3c2:	4770      	bx	lr
     3c4:	41008000 	.word	0x41008000

000003c8 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     3c8:	b510      	push	{r4, lr}
     3ca:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     3cc:	4b07      	ldr	r3, [pc, #28]	; (3ec <USART_0_init+0x24>)
     3ce:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     3d0:	2300      	movs	r3, #0
     3d2:	9300      	str	r3, [sp, #0]
     3d4:	2310      	movs	r3, #16
     3d6:	4a06      	ldr	r2, [pc, #24]	; (3f0 <USART_0_init+0x28>)
     3d8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     3dc:	4805      	ldr	r0, [pc, #20]	; (3f4 <USART_0_init+0x2c>)
     3de:	4c06      	ldr	r4, [pc, #24]	; (3f8 <USART_0_init+0x30>)
     3e0:	47a0      	blx	r4
	USART_0_PORT_init();
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <USART_0_init+0x34>)
     3e4:	4798      	blx	r3
}
     3e6:	b002      	add	sp, #8
     3e8:	bd10      	pop	{r4, pc}
     3ea:	bf00      	nop
     3ec:	0000035d 	.word	0x0000035d
     3f0:	20000080 	.word	0x20000080
     3f4:	200000b0 	.word	0x200000b0
     3f8:	0000069d 	.word	0x0000069d
     3fc:	00000381 	.word	0x00000381

00000400 <delay_driver_init>:

void delay_driver_init(void)
{
     400:	b508      	push	{r3, lr}
	delay_init(SysTick);
     402:	4802      	ldr	r0, [pc, #8]	; (40c <delay_driver_init+0xc>)
     404:	4b02      	ldr	r3, [pc, #8]	; (410 <delay_driver_init+0x10>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	e000e010 	.word	0xe000e010
     410:	000004cd 	.word	0x000004cd

00000414 <system_init>:
}

void system_init(void)
{
     414:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     416:	4b0c      	ldr	r3, [pc, #48]	; (448 <system_init+0x34>)
     418:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     41a:	4b0c      	ldr	r3, [pc, #48]	; (44c <system_init+0x38>)
     41c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     420:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     422:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     424:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     428:	629a      	str	r2, [r3, #40]	; 0x28
     42a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     42e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     430:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     438:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	USART_0_init();
     43c:	4b04      	ldr	r3, [pc, #16]	; (450 <system_init+0x3c>)
     43e:	4798      	blx	r3

	delay_driver_init();
     440:	4b04      	ldr	r3, [pc, #16]	; (454 <system_init+0x40>)
     442:	4798      	blx	r3
     444:	bd08      	pop	{r3, pc}
     446:	bf00      	nop
     448:	00000919 	.word	0x00000919
     44c:	41008000 	.word	0x41008000
     450:	000003c9 	.word	0x000003c9
     454:	00000401 	.word	0x00000401

00000458 <getStrBetweenTwoStr>:
#include <getDataFromStr.h>
#include <string.h>
#include <stdlib.h>

char* getStrBetweenTwoStr(const char *srcString, const char *strStart, const char *strEnd) {
     458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     45a:	4605      	mov	r5, r0
     45c:	460e      	mov	r6, r1
     45e:	4617      	mov	r7, r2
	char *target = NULL;
	char *start, *end;
	start = strstr(srcString, strStart);
     460:	4b0f      	ldr	r3, [pc, #60]	; (4a0 <getStrBetweenTwoStr+0x48>)
     462:	4798      	blx	r3
	if(start) {
     464:	4604      	mov	r4, r0
     466:	b1b0      	cbz	r0, 496 <getStrBetweenTwoStr+0x3e>
		start += strlen(strStart);
     468:	4630      	mov	r0, r6
     46a:	4b0e      	ldr	r3, [pc, #56]	; (4a4 <getStrBetweenTwoStr+0x4c>)
     46c:	4798      	blx	r3
     46e:	1826      	adds	r6, r4, r0
		end = strstr(srcString, strEnd);
     470:	4639      	mov	r1, r7
     472:	4628      	mov	r0, r5
     474:	4b0a      	ldr	r3, [pc, #40]	; (4a0 <getStrBetweenTwoStr+0x48>)
     476:	4798      	blx	r3
		if(end) {
     478:	4604      	mov	r4, r0
     47a:	b160      	cbz	r0, 496 <getStrBetweenTwoStr+0x3e>
			int sizeData = end-start;
     47c:	1b85      	subs	r5, r0, r6
			if(sizeData > 0) {
     47e:	2d00      	cmp	r5, #0
     480:	dd0b      	ble.n	49a <getStrBetweenTwoStr+0x42>
				target = (char *)malloc(sizeData + 1);
     482:	1c68      	adds	r0, r5, #1
     484:	4b08      	ldr	r3, [pc, #32]	; (4a8 <getStrBetweenTwoStr+0x50>)
     486:	4798      	blx	r3
     488:	4604      	mov	r4, r0
				memcpy(target, start, sizeData);
     48a:	462a      	mov	r2, r5
     48c:	4631      	mov	r1, r6
     48e:	4b07      	ldr	r3, [pc, #28]	; (4ac <getStrBetweenTwoStr+0x54>)
     490:	4798      	blx	r3
				target[sizeData] = '\0';
     492:	2300      	movs	r3, #0
     494:	5563      	strb	r3, [r4, r5]
			}
		}
	}
	return target;
}
     496:	4620      	mov	r0, r4
     498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *target = NULL;
     49a:	2400      	movs	r4, #0
	return target;
     49c:	e7fb      	b.n	496 <getStrBetweenTwoStr+0x3e>
     49e:	bf00      	nop
     4a0:	00001221 	.word	0x00001221
     4a4:	000011ed 	.word	0x000011ed
     4a8:	000010d5 	.word	0x000010d5
     4ac:	000010e5 	.word	0x000010e5

000004b0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     4b0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     4b4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     4b6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     4b8:	f3bf 8f5f 	dmb	sy
     4bc:	4770      	bx	lr

000004be <atomic_leave_critical>:
     4be:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     4c2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     4c4:	f383 8810 	msr	PRIMASK, r3
     4c8:	4770      	bx	lr
	...

000004cc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     4cc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     4ce:	4b02      	ldr	r3, [pc, #8]	; (4d8 <delay_init+0xc>)
     4d0:	6018      	str	r0, [r3, #0]
     4d2:	4b02      	ldr	r3, [pc, #8]	; (4dc <delay_init+0x10>)
     4d4:	4798      	blx	r3
     4d6:	bd08      	pop	{r3, pc}
     4d8:	20000090 	.word	0x20000090
     4dc:	00000e99 	.word	0x00000e99

000004e0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	460d      	mov	r5, r1
     4e4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     4e6:	4604      	mov	r4, r0
     4e8:	b168      	cbz	r0, 506 <io_write+0x26>
     4ea:	b151      	cbz	r1, 502 <io_write+0x22>
     4ec:	2001      	movs	r0, #1
     4ee:	2234      	movs	r2, #52	; 0x34
     4f0:	4906      	ldr	r1, [pc, #24]	; (50c <io_write+0x2c>)
     4f2:	4b07      	ldr	r3, [pc, #28]	; (510 <io_write+0x30>)
     4f4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4f6:	6823      	ldr	r3, [r4, #0]
     4f8:	4632      	mov	r2, r6
     4fa:	4629      	mov	r1, r5
     4fc:	4620      	mov	r0, r4
     4fe:	4798      	blx	r3
}
     500:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     502:	2000      	movs	r0, #0
     504:	e7f3      	b.n	4ee <io_write+0xe>
     506:	2000      	movs	r0, #0
     508:	e7f1      	b.n	4ee <io_write+0xe>
     50a:	bf00      	nop
     50c:	0000125c 	.word	0x0000125c
     510:	000007fd 	.word	0x000007fd

00000514 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     514:	b570      	push	{r4, r5, r6, lr}
     516:	460d      	mov	r5, r1
     518:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     51a:	4604      	mov	r4, r0
     51c:	b168      	cbz	r0, 53a <io_read+0x26>
     51e:	b151      	cbz	r1, 536 <io_read+0x22>
     520:	2001      	movs	r0, #1
     522:	223d      	movs	r2, #61	; 0x3d
     524:	4906      	ldr	r1, [pc, #24]	; (540 <io_read+0x2c>)
     526:	4b07      	ldr	r3, [pc, #28]	; (544 <io_read+0x30>)
     528:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     52a:	6863      	ldr	r3, [r4, #4]
     52c:	4632      	mov	r2, r6
     52e:	4629      	mov	r1, r5
     530:	4620      	mov	r0, r4
     532:	4798      	blx	r3
}
     534:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     536:	2000      	movs	r0, #0
     538:	e7f3      	b.n	522 <io_read+0xe>
     53a:	2000      	movs	r0, #0
     53c:	e7f1      	b.n	522 <io_read+0xe>
     53e:	bf00      	nop
     540:	0000125c 	.word	0x0000125c
     544:	000007fd 	.word	0x000007fd

00000548 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     548:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     54a:	2300      	movs	r3, #0
     54c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     54e:	69c3      	ldr	r3, [r0, #28]
     550:	b11b      	cbz	r3, 55a <usart_transmission_complete+0x12>
     552:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     556:	4610      	mov	r0, r2
     558:	4798      	blx	r3
     55a:	bd08      	pop	{r3, pc}

0000055c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     55c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     55e:	2300      	movs	r3, #0
     560:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     562:	6a43      	ldr	r3, [r0, #36]	; 0x24
     564:	b11b      	cbz	r3, 56e <usart_error+0x12>
     566:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     56a:	4610      	mov	r0, r2
     56c:	4798      	blx	r3
     56e:	bd08      	pop	{r3, pc}

00000570 <usart_fill_rx_buffer>:
{
     570:	b538      	push	{r3, r4, r5, lr}
     572:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     574:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
     578:	302c      	adds	r0, #44	; 0x2c
     57a:	4b03      	ldr	r3, [pc, #12]	; (588 <usart_fill_rx_buffer+0x18>)
     57c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     57e:	6a23      	ldr	r3, [r4, #32]
     580:	b10b      	cbz	r3, 586 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     582:	4628      	mov	r0, r5
     584:	4798      	blx	r3
     586:	bd38      	pop	{r3, r4, r5, pc}
     588:	00000891 	.word	0x00000891

0000058c <usart_async_write>:
{
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	460e      	mov	r6, r1
     590:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
     592:	4604      	mov	r4, r0
     594:	b1d8      	cbz	r0, 5ce <usart_async_write+0x42>
     596:	b1e1      	cbz	r1, 5d2 <usart_async_write+0x46>
     598:	b9ea      	cbnz	r2, 5d6 <usart_async_write+0x4a>
     59a:	2000      	movs	r0, #0
     59c:	f240 123b 	movw	r2, #315	; 0x13b
     5a0:	490f      	ldr	r1, [pc, #60]	; (5e0 <usart_async_write+0x54>)
     5a2:	4b10      	ldr	r3, [pc, #64]	; (5e4 <usart_async_write+0x58>)
     5a4:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     5a6:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     5aa:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     5ae:	429a      	cmp	r2, r3
     5b0:	d113      	bne.n	5da <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
     5b2:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     5b4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
     5b8:	2300      	movs	r3, #0
     5ba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     5be:	2301      	movs	r3, #1
     5c0:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     5c2:	f104 0008 	add.w	r0, r4, #8
     5c6:	4b08      	ldr	r3, [pc, #32]	; (5e8 <usart_async_write+0x5c>)
     5c8:	4798      	blx	r3
	return (int32_t)length;
     5ca:	4628      	mov	r0, r5
     5cc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     5ce:	2000      	movs	r0, #0
     5d0:	e7e4      	b.n	59c <usart_async_write+0x10>
     5d2:	2000      	movs	r0, #0
     5d4:	e7e2      	b.n	59c <usart_async_write+0x10>
     5d6:	2001      	movs	r0, #1
     5d8:	e7e0      	b.n	59c <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
     5da:	f06f 001b 	mvn.w	r0, #27
}
     5de:	bd70      	pop	{r4, r5, r6, pc}
     5e0:	00001270 	.word	0x00001270
     5e4:	000007fd 	.word	0x000007fd
     5e8:	00000db3 	.word	0x00000db3

000005ec <usart_process_byte_sent>:
{
     5ec:	b510      	push	{r4, lr}
     5ee:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     5f0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     5f2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
     5f6:	4293      	cmp	r3, r2
     5f8:	d009      	beq.n	60e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     5fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
     5fc:	1c59      	adds	r1, r3, #1
     5fe:	8781      	strh	r1, [r0, #60]	; 0x3c
     600:	5cd1      	ldrb	r1, [r2, r3]
     602:	4b04      	ldr	r3, [pc, #16]	; (614 <usart_process_byte_sent+0x28>)
     604:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     606:	4620      	mov	r0, r4
     608:	4b03      	ldr	r3, [pc, #12]	; (618 <usart_process_byte_sent+0x2c>)
     60a:	4798      	blx	r3
     60c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     60e:	4b03      	ldr	r3, [pc, #12]	; (61c <usart_process_byte_sent+0x30>)
     610:	4798      	blx	r3
     612:	bd10      	pop	{r4, pc}
     614:	00000dad 	.word	0x00000dad
     618:	00000db3 	.word	0x00000db3
     61c:	00000dbb 	.word	0x00000dbb

00000620 <usart_async_read>:
{
     620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     624:	b082      	sub	sp, #8
     626:	4688      	mov	r8, r1
     628:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
     62a:	4605      	mov	r5, r0
     62c:	b1a0      	cbz	r0, 658 <usart_async_read+0x38>
     62e:	b1a9      	cbz	r1, 65c <usart_async_read+0x3c>
     630:	b9b2      	cbnz	r2, 660 <usart_async_read+0x40>
     632:	2000      	movs	r0, #0
     634:	f44f 72ac 	mov.w	r2, #344	; 0x158
     638:	4912      	ldr	r1, [pc, #72]	; (684 <usart_async_read+0x64>)
     63a:	4b13      	ldr	r3, [pc, #76]	; (688 <usart_async_read+0x68>)
     63c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     63e:	a801      	add	r0, sp, #4
     640:	4b12      	ldr	r3, [pc, #72]	; (68c <usart_async_read+0x6c>)
     642:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     644:	3534      	adds	r5, #52	; 0x34
     646:	4628      	mov	r0, r5
     648:	4b11      	ldr	r3, [pc, #68]	; (690 <usart_async_read+0x70>)
     64a:	4798      	blx	r3
     64c:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
     64e:	a801      	add	r0, sp, #4
     650:	4b10      	ldr	r3, [pc, #64]	; (694 <usart_async_read+0x74>)
     652:	4798      	blx	r3
	uint16_t                       was_read = 0;
     654:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     656:	e00b      	b.n	670 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
     658:	2000      	movs	r0, #0
     65a:	e7eb      	b.n	634 <usart_async_read+0x14>
     65c:	2000      	movs	r0, #0
     65e:	e7e9      	b.n	634 <usart_async_read+0x14>
     660:	2001      	movs	r0, #1
     662:	e7e7      	b.n	634 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     664:	3401      	adds	r4, #1
     666:	b2a4      	uxth	r4, r4
     668:	4441      	add	r1, r8
     66a:	4628      	mov	r0, r5
     66c:	4b0a      	ldr	r3, [pc, #40]	; (698 <usart_async_read+0x78>)
     66e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     670:	4621      	mov	r1, r4
     672:	42a7      	cmp	r7, r4
     674:	d901      	bls.n	67a <usart_async_read+0x5a>
     676:	42b4      	cmp	r4, r6
     678:	d3f4      	bcc.n	664 <usart_async_read+0x44>
}
     67a:	4620      	mov	r0, r4
     67c:	b002      	add	sp, #8
     67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     682:	bf00      	nop
     684:	00001270 	.word	0x00001270
     688:	000007fd 	.word	0x000007fd
     68c:	000004b1 	.word	0x000004b1
     690:	000008d1 	.word	0x000008d1
     694:	000004bf 	.word	0x000004bf
     698:	00000849 	.word	0x00000849

0000069c <usart_async_init>:
{
     69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     69e:	460d      	mov	r5, r1
     6a0:	4616      	mov	r6, r2
     6a2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     6a4:	4604      	mov	r4, r0
     6a6:	b318      	cbz	r0, 6f0 <usart_async_init+0x54>
     6a8:	b321      	cbz	r1, 6f4 <usart_async_init+0x58>
     6aa:	b32a      	cbz	r2, 6f8 <usart_async_init+0x5c>
     6ac:	bb33      	cbnz	r3, 6fc <usart_async_init+0x60>
     6ae:	2000      	movs	r0, #0
     6b0:	223a      	movs	r2, #58	; 0x3a
     6b2:	4915      	ldr	r1, [pc, #84]	; (708 <usart_async_init+0x6c>)
     6b4:	4b15      	ldr	r3, [pc, #84]	; (70c <usart_async_init+0x70>)
     6b6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     6b8:	463a      	mov	r2, r7
     6ba:	4631      	mov	r1, r6
     6bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
     6c0:	4b13      	ldr	r3, [pc, #76]	; (710 <usart_async_init+0x74>)
     6c2:	4798      	blx	r3
     6c4:	b9e0      	cbnz	r0, 700 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
     6c6:	4629      	mov	r1, r5
     6c8:	f104 0008 	add.w	r0, r4, #8
     6cc:	4b11      	ldr	r3, [pc, #68]	; (714 <usart_async_init+0x78>)
     6ce:	4798      	blx	r3
	if (init_status) {
     6d0:	4603      	mov	r3, r0
     6d2:	b958      	cbnz	r0, 6ec <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
     6d4:	4a10      	ldr	r2, [pc, #64]	; (718 <usart_async_init+0x7c>)
     6d6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
     6d8:	4a10      	ldr	r2, [pc, #64]	; (71c <usart_async_init+0x80>)
     6da:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     6dc:	4a10      	ldr	r2, [pc, #64]	; (720 <usart_async_init+0x84>)
     6de:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     6e0:	4a10      	ldr	r2, [pc, #64]	; (724 <usart_async_init+0x88>)
     6e2:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     6e4:	4a10      	ldr	r2, [pc, #64]	; (728 <usart_async_init+0x8c>)
     6e6:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     6e8:	4a10      	ldr	r2, [pc, #64]	; (72c <usart_async_init+0x90>)
     6ea:	6162      	str	r2, [r4, #20]
}
     6ec:	4618      	mov	r0, r3
     6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     6f0:	2000      	movs	r0, #0
     6f2:	e7dd      	b.n	6b0 <usart_async_init+0x14>
     6f4:	2000      	movs	r0, #0
     6f6:	e7db      	b.n	6b0 <usart_async_init+0x14>
     6f8:	2000      	movs	r0, #0
     6fa:	e7d9      	b.n	6b0 <usart_async_init+0x14>
     6fc:	2001      	movs	r0, #1
     6fe:	e7d7      	b.n	6b0 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
     700:	f06f 030c 	mvn.w	r3, #12
     704:	e7f2      	b.n	6ec <usart_async_init+0x50>
     706:	bf00      	nop
     708:	00001270 	.word	0x00001270
     70c:	000007fd 	.word	0x000007fd
     710:	00000805 	.word	0x00000805
     714:	00000d15 	.word	0x00000d15
     718:	00000621 	.word	0x00000621
     71c:	0000058d 	.word	0x0000058d
     720:	000005ed 	.word	0x000005ed
     724:	00000571 	.word	0x00000571
     728:	00000549 	.word	0x00000549
     72c:	0000055d 	.word	0x0000055d

00000730 <usart_async_enable>:
{
     730:	b510      	push	{r4, lr}
	ASSERT(descr);
     732:	4604      	mov	r4, r0
     734:	2261      	movs	r2, #97	; 0x61
     736:	4906      	ldr	r1, [pc, #24]	; (750 <usart_async_enable+0x20>)
     738:	3000      	adds	r0, #0
     73a:	bf18      	it	ne
     73c:	2001      	movne	r0, #1
     73e:	4b05      	ldr	r3, [pc, #20]	; (754 <usart_async_enable+0x24>)
     740:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     742:	f104 0008 	add.w	r0, r4, #8
     746:	4b04      	ldr	r3, [pc, #16]	; (758 <usart_async_enable+0x28>)
     748:	4798      	blx	r3
}
     74a:	2000      	movs	r0, #0
     74c:	bd10      	pop	{r4, pc}
     74e:	bf00      	nop
     750:	00001270 	.word	0x00001270
     754:	000007fd 	.word	0x000007fd
     758:	00000d99 	.word	0x00000d99

0000075c <usart_async_get_io_descriptor>:
{
     75c:	b538      	push	{r3, r4, r5, lr}
     75e:	460c      	mov	r4, r1
	ASSERT(descr && io);
     760:	4605      	mov	r5, r0
     762:	b150      	cbz	r0, 77a <usart_async_get_io_descriptor+0x1e>
     764:	b139      	cbz	r1, 776 <usart_async_get_io_descriptor+0x1a>
     766:	2001      	movs	r0, #1
     768:	2277      	movs	r2, #119	; 0x77
     76a:	4905      	ldr	r1, [pc, #20]	; (780 <usart_async_get_io_descriptor+0x24>)
     76c:	4b05      	ldr	r3, [pc, #20]	; (784 <usart_async_get_io_descriptor+0x28>)
     76e:	4798      	blx	r3
	*io = &descr->io;
     770:	6025      	str	r5, [r4, #0]
}
     772:	2000      	movs	r0, #0
     774:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && io);
     776:	2000      	movs	r0, #0
     778:	e7f6      	b.n	768 <usart_async_get_io_descriptor+0xc>
     77a:	2000      	movs	r0, #0
     77c:	e7f4      	b.n	768 <usart_async_get_io_descriptor+0xc>
     77e:	bf00      	nop
     780:	00001270 	.word	0x00001270
     784:	000007fd 	.word	0x000007fd

00000788 <usart_async_register_callback>:
{
     788:	b570      	push	{r4, r5, r6, lr}
     78a:	460c      	mov	r4, r1
     78c:	4616      	mov	r6, r2
	ASSERT(descr);
     78e:	4605      	mov	r5, r0
     790:	2283      	movs	r2, #131	; 0x83
     792:	4917      	ldr	r1, [pc, #92]	; (7f0 <usart_async_register_callback+0x68>)
     794:	3000      	adds	r0, #0
     796:	bf18      	it	ne
     798:	2001      	movne	r0, #1
     79a:	4b16      	ldr	r3, [pc, #88]	; (7f4 <usart_async_register_callback+0x6c>)
     79c:	4798      	blx	r3
	switch (type) {
     79e:	2c01      	cmp	r4, #1
     7a0:	d010      	beq.n	7c4 <usart_async_register_callback+0x3c>
     7a2:	b124      	cbz	r4, 7ae <usart_async_register_callback+0x26>
     7a4:	2c02      	cmp	r4, #2
     7a6:	d018      	beq.n	7da <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
     7a8:	f06f 000c 	mvn.w	r0, #12
}
     7ac:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
     7ae:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     7b0:	1c32      	adds	r2, r6, #0
     7b2:	bf18      	it	ne
     7b4:	2201      	movne	r2, #1
     7b6:	2101      	movs	r1, #1
     7b8:	f105 0008 	add.w	r0, r5, #8
     7bc:	4b0e      	ldr	r3, [pc, #56]	; (7f8 <usart_async_register_callback+0x70>)
     7be:	4798      	blx	r3
	return ERR_NONE;
     7c0:	2000      	movs	r0, #0
		break;
     7c2:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     7c4:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     7c6:	1c32      	adds	r2, r6, #0
     7c8:	bf18      	it	ne
     7ca:	2201      	movne	r2, #1
     7cc:	2102      	movs	r1, #2
     7ce:	f105 0008 	add.w	r0, r5, #8
     7d2:	4b09      	ldr	r3, [pc, #36]	; (7f8 <usart_async_register_callback+0x70>)
     7d4:	4798      	blx	r3
	return ERR_NONE;
     7d6:	2000      	movs	r0, #0
		break;
     7d8:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
     7da:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     7dc:	1c32      	adds	r2, r6, #0
     7de:	bf18      	it	ne
     7e0:	2201      	movne	r2, #1
     7e2:	2103      	movs	r1, #3
     7e4:	f105 0008 	add.w	r0, r5, #8
     7e8:	4b03      	ldr	r3, [pc, #12]	; (7f8 <usart_async_register_callback+0x70>)
     7ea:	4798      	blx	r3
	return ERR_NONE;
     7ec:	2000      	movs	r0, #0
		break;
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	00001270 	.word	0x00001270
     7f4:	000007fd 	.word	0x000007fd
     7f8:	00000dc5 	.word	0x00000dc5

000007fc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     7fc:	b900      	cbnz	r0, 800 <assert+0x4>
		__asm("BKPT #0");
     7fe:	be00      	bkpt	0x0000
     800:	4770      	bx	lr
	...

00000804 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     804:	b570      	push	{r4, r5, r6, lr}
     806:	460e      	mov	r6, r1
     808:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     80a:	4604      	mov	r4, r0
     80c:	b178      	cbz	r0, 82e <ringbuffer_init+0x2a>
     80e:	b181      	cbz	r1, 832 <ringbuffer_init+0x2e>
     810:	b98a      	cbnz	r2, 836 <ringbuffer_init+0x32>
     812:	2000      	movs	r0, #0
     814:	2228      	movs	r2, #40	; 0x28
     816:	490a      	ldr	r1, [pc, #40]	; (840 <ringbuffer_init+0x3c>)
     818:	4b0a      	ldr	r3, [pc, #40]	; (844 <ringbuffer_init+0x40>)
     81a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     81c:	1e6b      	subs	r3, r5, #1
     81e:	421d      	tst	r5, r3
     820:	d10b      	bne.n	83a <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     822:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     824:	2000      	movs	r0, #0
     826:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     828:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     82a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     82c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     82e:	2000      	movs	r0, #0
     830:	e7f0      	b.n	814 <ringbuffer_init+0x10>
     832:	2000      	movs	r0, #0
     834:	e7ee      	b.n	814 <ringbuffer_init+0x10>
     836:	2001      	movs	r0, #1
     838:	e7ec      	b.n	814 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     83a:	f06f 000c 	mvn.w	r0, #12
}
     83e:	bd70      	pop	{r4, r5, r6, pc}
     840:	00001290 	.word	0x00001290
     844:	000007fd 	.word	0x000007fd

00000848 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     848:	b538      	push	{r3, r4, r5, lr}
     84a:	460d      	mov	r5, r1
	ASSERT(rb && data);
     84c:	4604      	mov	r4, r0
     84e:	b1a8      	cbz	r0, 87c <ringbuffer_get+0x34>
     850:	b191      	cbz	r1, 878 <ringbuffer_get+0x30>
     852:	2001      	movs	r0, #1
     854:	2240      	movs	r2, #64	; 0x40
     856:	490c      	ldr	r1, [pc, #48]	; (888 <ringbuffer_get+0x40>)
     858:	4b0c      	ldr	r3, [pc, #48]	; (88c <ringbuffer_get+0x44>)
     85a:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     85c:	68e2      	ldr	r2, [r4, #12]
     85e:	68a3      	ldr	r3, [r4, #8]
     860:	429a      	cmp	r2, r3
     862:	d00d      	beq.n	880 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
     864:	6822      	ldr	r2, [r4, #0]
     866:	6861      	ldr	r1, [r4, #4]
     868:	400b      	ands	r3, r1
     86a:	5cd3      	ldrb	r3, [r2, r3]
     86c:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     86e:	68a3      	ldr	r3, [r4, #8]
     870:	3301      	adds	r3, #1
     872:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     874:	2000      	movs	r0, #0
     876:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
     878:	2000      	movs	r0, #0
     87a:	e7eb      	b.n	854 <ringbuffer_get+0xc>
     87c:	2000      	movs	r0, #0
     87e:	e7e9      	b.n	854 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
     880:	f06f 0009 	mvn.w	r0, #9
}
     884:	bd38      	pop	{r3, r4, r5, pc}
     886:	bf00      	nop
     888:	00001290 	.word	0x00001290
     88c:	000007fd 	.word	0x000007fd

00000890 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     890:	b538      	push	{r3, r4, r5, lr}
     892:	460d      	mov	r5, r1
	ASSERT(rb);
     894:	4604      	mov	r4, r0
     896:	2251      	movs	r2, #81	; 0x51
     898:	490b      	ldr	r1, [pc, #44]	; (8c8 <ringbuffer_put+0x38>)
     89a:	3000      	adds	r0, #0
     89c:	bf18      	it	ne
     89e:	2001      	movne	r0, #1
     8a0:	4b0a      	ldr	r3, [pc, #40]	; (8cc <ringbuffer_put+0x3c>)
     8a2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     8a4:	6822      	ldr	r2, [r4, #0]
     8a6:	68e3      	ldr	r3, [r4, #12]
     8a8:	6861      	ldr	r1, [r4, #4]
     8aa:	400b      	ands	r3, r1
     8ac:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     8ae:	68e3      	ldr	r3, [r4, #12]
     8b0:	68a2      	ldr	r2, [r4, #8]
     8b2:	1a9a      	subs	r2, r3, r2
     8b4:	6861      	ldr	r1, [r4, #4]
     8b6:	428a      	cmp	r2, r1
     8b8:	d901      	bls.n	8be <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     8ba:	1a59      	subs	r1, r3, r1
     8bc:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     8be:	3301      	adds	r3, #1
     8c0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     8c2:	2000      	movs	r0, #0
     8c4:	bd38      	pop	{r3, r4, r5, pc}
     8c6:	bf00      	nop
     8c8:	00001290 	.word	0x00001290
     8cc:	000007fd 	.word	0x000007fd

000008d0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     8d0:	b510      	push	{r4, lr}
	ASSERT(rb);
     8d2:	4604      	mov	r4, r0
     8d4:	2267      	movs	r2, #103	; 0x67
     8d6:	4905      	ldr	r1, [pc, #20]	; (8ec <ringbuffer_num+0x1c>)
     8d8:	3000      	adds	r0, #0
     8da:	bf18      	it	ne
     8dc:	2001      	movne	r0, #1
     8de:	4b04      	ldr	r3, [pc, #16]	; (8f0 <ringbuffer_num+0x20>)
     8e0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     8e2:	68e0      	ldr	r0, [r4, #12]
     8e4:	68a3      	ldr	r3, [r4, #8]
}
     8e6:	1ac0      	subs	r0, r0, r3
     8e8:	bd10      	pop	{r4, pc}
     8ea:	bf00      	nop
     8ec:	00001290 	.word	0x00001290
     8f0:	000007fd 	.word	0x000007fd

000008f4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     8f4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     8f6:	4a06      	ldr	r2, [pc, #24]	; (910 <_sbrk+0x1c>)
     8f8:	6812      	ldr	r2, [r2, #0]
     8fa:	b122      	cbz	r2, 906 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     8fc:	4a04      	ldr	r2, [pc, #16]	; (910 <_sbrk+0x1c>)
     8fe:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     900:	4403      	add	r3, r0
     902:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     904:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     906:	4903      	ldr	r1, [pc, #12]	; (914 <_sbrk+0x20>)
     908:	4a01      	ldr	r2, [pc, #4]	; (910 <_sbrk+0x1c>)
     90a:	6011      	str	r1, [r2, #0]
     90c:	e7f6      	b.n	8fc <_sbrk+0x8>
     90e:	bf00      	nop
     910:	20000094 	.word	0x20000094
     914:	20010218 	.word	0x20010218

00000918 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     918:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     91a:	4a09      	ldr	r2, [pc, #36]	; (940 <_init_chip+0x28>)
     91c:	8813      	ldrh	r3, [r2, #0]
     91e:	b29b      	uxth	r3, r3
     920:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     922:	4b08      	ldr	r3, [pc, #32]	; (944 <_init_chip+0x2c>)
     924:	4798      	blx	r3
	_oscctrl_init_sources();
     926:	4b08      	ldr	r3, [pc, #32]	; (948 <_init_chip+0x30>)
     928:	4798      	blx	r3
	_mclk_init();
     92a:	4b08      	ldr	r3, [pc, #32]	; (94c <_init_chip+0x34>)
     92c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     92e:	2008      	movs	r0, #8
     930:	4c07      	ldr	r4, [pc, #28]	; (950 <_init_chip+0x38>)
     932:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     934:	4b07      	ldr	r3, [pc, #28]	; (954 <_init_chip+0x3c>)
     936:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     938:	f640 70f7 	movw	r0, #4087	; 0xff7
     93c:	47a0      	blx	r4
     93e:	bd10      	pop	{r4, pc}
     940:	41004000 	.word	0x41004000
     944:	000009a5 	.word	0x000009a5
     948:	000009c5 	.word	0x000009c5
     94c:	00000999 	.word	0x00000999
     950:	00000959 	.word	0x00000959
     954:	000009c9 	.word	0x000009c9

00000958 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     958:	f010 0f01 	tst.w	r0, #1
     95c:	d008      	beq.n	970 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     95e:	4a0b      	ldr	r2, [pc, #44]	; (98c <_gclk_init_generators_by_fref+0x34>)
     960:	4b0b      	ldr	r3, [pc, #44]	; (990 <_gclk_init_generators_by_fref+0x38>)
     962:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     964:	4b0a      	ldr	r3, [pc, #40]	; (990 <_gclk_init_generators_by_fref+0x38>)
     966:	685a      	ldr	r2, [r3, #4]
     968:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     96c:	421a      	tst	r2, r3
     96e:	d1f9      	bne.n	964 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     970:	f010 0f08 	tst.w	r0, #8
     974:	d008      	beq.n	988 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     976:	4a07      	ldr	r2, [pc, #28]	; (994 <_gclk_init_generators_by_fref+0x3c>)
     978:	4b05      	ldr	r3, [pc, #20]	; (990 <_gclk_init_generators_by_fref+0x38>)
     97a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     97c:	4b04      	ldr	r3, [pc, #16]	; (990 <_gclk_init_generators_by_fref+0x38>)
     97e:	685a      	ldr	r2, [r3, #4]
     980:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     984:	421a      	tst	r2, r3
     986:	d1f9      	bne.n	97c <_gclk_init_generators_by_fref+0x24>
     988:	4770      	bx	lr
     98a:	bf00      	nop
     98c:	00010106 	.word	0x00010106
     990:	40001c00 	.word	0x40001c00
     994:	00010105 	.word	0x00010105

00000998 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     998:	2201      	movs	r2, #1
     99a:	4b01      	ldr	r3, [pc, #4]	; (9a0 <_mclk_init+0x8>)
     99c:	715a      	strb	r2, [r3, #5]
     99e:	4770      	bx	lr
     9a0:	40000800 	.word	0x40000800

000009a4 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     9a4:	4b06      	ldr	r3, [pc, #24]	; (9c0 <_osc32kctrl_init_sources+0x1c>)
     9a6:	f242 0286 	movw	r2, #8326	; 0x2086
     9aa:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     9ac:	2200      	movs	r2, #0
     9ae:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     9b0:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     9b2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     9b4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     9b8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     9ba:	2201      	movs	r2, #1
     9bc:	741a      	strb	r2, [r3, #16]
     9be:	4770      	bx	lr
     9c0:	40001400 	.word	0x40001400

000009c4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     9c4:	4770      	bx	lr
	...

000009c8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     9c8:	4a36      	ldr	r2, [pc, #216]	; (aa4 <_oscctrl_init_referenced_generators+0xdc>)
     9ca:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     9cc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     9d0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     9d4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     9d6:	4b33      	ldr	r3, [pc, #204]	; (aa4 <_oscctrl_init_referenced_generators+0xdc>)
     9d8:	685a      	ldr	r2, [r3, #4]
     9da:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     9de:	421a      	tst	r2, r3
     9e0:	d1f9      	bne.n	9d6 <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     9e2:	4b30      	ldr	r3, [pc, #192]	; (aa4 <_oscctrl_init_referenced_generators+0xdc>)
     9e4:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     9e6:	f013 0f04 	tst.w	r3, #4
     9ea:	d1fa      	bne.n	9e2 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     9ec:	4b2e      	ldr	r3, [pc, #184]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     9ee:	2200      	movs	r2, #0
     9f0:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     9f2:	4a2e      	ldr	r2, [pc, #184]	; (aac <_oscctrl_init_referenced_generators+0xe4>)
     9f4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     9f6:	4b2c      	ldr	r3, [pc, #176]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     9f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     9fc:	f013 0f10 	tst.w	r3, #16
     a00:	d1f9      	bne.n	9f6 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     a02:	2200      	movs	r2, #0
     a04:	4b28      	ldr	r3, [pc, #160]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a06:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a0a:	4b27      	ldr	r3, [pc, #156]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     a10:	f013 0f04 	tst.w	r3, #4
     a14:	d1f9      	bne.n	a0a <_oscctrl_init_referenced_generators+0x42>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     a16:	2202      	movs	r2, #2
     a18:	4b23      	ldr	r3, [pc, #140]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a1a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a1c:	4b22      	ldr	r3, [pc, #136]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     a22:	f013 0f02 	tst.w	r3, #2
     a26:	d1f9      	bne.n	a1c <_oscctrl_init_referenced_generators+0x54>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     a28:	4b1f      	ldr	r3, [pc, #124]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     a2c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a2e:	4b1e      	ldr	r3, [pc, #120]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     a34:	f013 0f08 	tst.w	r3, #8
     a38:	d1f9      	bne.n	a2e <_oscctrl_init_referenced_generators+0x66>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     a3a:	2280      	movs	r2, #128	; 0x80
     a3c:	4b1a      	ldr	r3, [pc, #104]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a3e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a42:	4b19      	ldr	r3, [pc, #100]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     a48:	f013 0f04 	tst.w	r3, #4
     a4c:	d1f9      	bne.n	a42 <_oscctrl_init_referenced_generators+0x7a>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     a4e:	4b16      	ldr	r3, [pc, #88]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a50:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     a54:	f013 0f01 	tst.w	r3, #1
     a58:	d01d      	beq.n	a96 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     a5a:	4b13      	ldr	r3, [pc, #76]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a5c:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
     a5e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     a62:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     a66:	d1f8      	bne.n	a5a <_oscctrl_init_referenced_generators+0x92>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     a68:	4b0e      	ldr	r3, [pc, #56]	; (aa4 <_oscctrl_init_referenced_generators+0xdc>)
     a6a:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     a6c:	2b00      	cmp	r3, #0
     a6e:	d1fb      	bne.n	a68 <_oscctrl_init_referenced_generators+0xa0>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     a70:	4a0c      	ldr	r2, [pc, #48]	; (aa4 <_oscctrl_init_referenced_generators+0xdc>)
     a72:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     a74:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     a78:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     a7c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     a7e:	4b09      	ldr	r3, [pc, #36]	; (aa4 <_oscctrl_init_referenced_generators+0xdc>)
     a80:	685a      	ldr	r2, [r3, #4]
     a82:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     a86:	421a      	tst	r2, r3
     a88:	d1f9      	bne.n	a7e <_oscctrl_init_referenced_generators+0xb6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     a8a:	4b06      	ldr	r3, [pc, #24]	; (aa4 <_oscctrl_init_referenced_generators+0xdc>)
     a8c:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     a8e:	f013 0f04 	tst.w	r3, #4
     a92:	d1fa      	bne.n	a8a <_oscctrl_init_referenced_generators+0xc2>
		;
#endif
	(void)hw;
}
     a94:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <_oscctrl_init_referenced_generators+0xe0>)
     a98:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     a9a:	f413 7f80 	tst.w	r3, #256	; 0x100
     a9e:	d0fa      	beq.n	a96 <_oscctrl_init_referenced_generators+0xce>
     aa0:	e7e2      	b.n	a68 <_oscctrl_init_referenced_generators+0xa0>
     aa2:	bf00      	nop
     aa4:	40001c00 	.word	0x40001c00
     aa8:	40001000 	.word	0x40001000
     aac:	04010000 	.word	0x04010000

00000ab0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     ab0:	b500      	push	{lr}
     ab2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     ab4:	4b0d      	ldr	r3, [pc, #52]	; (aec <RAMECC_Handler+0x3c>)
     ab6:	789b      	ldrb	r3, [r3, #2]
     ab8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     aba:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     abc:	9b01      	ldr	r3, [sp, #4]
     abe:	f013 0f02 	tst.w	r3, #2
     ac2:	d006      	beq.n	ad2 <RAMECC_Handler+0x22>
     ac4:	4b0a      	ldr	r3, [pc, #40]	; (af0 <RAMECC_Handler+0x40>)
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	b11b      	cbz	r3, ad2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     aca:	4a08      	ldr	r2, [pc, #32]	; (aec <RAMECC_Handler+0x3c>)
     acc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     ace:	4798      	blx	r3
     ad0:	e009      	b.n	ae6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     ad2:	9b01      	ldr	r3, [sp, #4]
     ad4:	f013 0f01 	tst.w	r3, #1
     ad8:	d005      	beq.n	ae6 <RAMECC_Handler+0x36>
     ada:	4b05      	ldr	r3, [pc, #20]	; (af0 <RAMECC_Handler+0x40>)
     adc:	685b      	ldr	r3, [r3, #4]
     ade:	b113      	cbz	r3, ae6 <RAMECC_Handler+0x36>
     ae0:	4a02      	ldr	r2, [pc, #8]	; (aec <RAMECC_Handler+0x3c>)
     ae2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     ae4:	4798      	blx	r3
	} else {
		return;
	}
}
     ae6:	b003      	add	sp, #12
     ae8:	f85d fb04 	ldr.w	pc, [sp], #4
     aec:	41020000 	.word	0x41020000
     af0:	20000100 	.word	0x20000100

00000af4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     af4:	b470      	push	{r4, r5, r6}
     af6:	b087      	sub	sp, #28
     af8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     afa:	466c      	mov	r4, sp
     afc:	4d0c      	ldr	r5, [pc, #48]	; (b30 <_sercom_get_hardware_index+0x3c>)
     afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     b02:	e895 0003 	ldmia.w	r5, {r0, r1}
     b06:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b0a:	2000      	movs	r0, #0
     b0c:	2805      	cmp	r0, #5
     b0e:	d80a      	bhi.n	b26 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     b10:	ab06      	add	r3, sp, #24
     b12:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     b16:	f853 3c18 	ldr.w	r3, [r3, #-24]
     b1a:	42b3      	cmp	r3, r6
     b1c:	d001      	beq.n	b22 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b1e:	3001      	adds	r0, #1
     b20:	e7f4      	b.n	b0c <_sercom_get_hardware_index+0x18>
			return i;
     b22:	b2c0      	uxtb	r0, r0
     b24:	e000      	b.n	b28 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     b26:	2000      	movs	r0, #0
}
     b28:	b007      	add	sp, #28
     b2a:	bc70      	pop	{r4, r5, r6}
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop
     b30:	000012b4 	.word	0x000012b4

00000b34 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     b34:	b510      	push	{r4, lr}
	void *hw = device->hw;
     b36:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     b38:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     b3a:	f013 0f01 	tst.w	r3, #1
     b3e:	d003      	beq.n	b48 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     b40:	7da3      	ldrb	r3, [r4, #22]
     b42:	f013 0f01 	tst.w	r3, #1
     b46:	d112      	bne.n	b6e <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     b48:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     b4a:	f013 0f02 	tst.w	r3, #2
     b4e:	d003      	beq.n	b58 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     b50:	7da3      	ldrb	r3, [r4, #22]
     b52:	f013 0f02 	tst.w	r3, #2
     b56:	d10f      	bne.n	b78 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     b58:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     b5a:	f013 0f04 	tst.w	r3, #4
     b5e:	d015      	beq.n	b8c <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     b60:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     b62:	f003 0337 	and.w	r3, r3, #55	; 0x37
     b66:	b163      	cbz	r3, b82 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     b68:	23ff      	movs	r3, #255	; 0xff
     b6a:	8363      	strh	r3, [r4, #26]
     b6c:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     b6e:	2301      	movs	r3, #1
     b70:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     b72:	6803      	ldr	r3, [r0, #0]
     b74:	4798      	blx	r3
     b76:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     b78:	2302      	movs	r3, #2
     b7a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     b7c:	6883      	ldr	r3, [r0, #8]
     b7e:	4798      	blx	r3
     b80:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     b82:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     b84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     b86:	b2c9      	uxtb	r1, r1
     b88:	4798      	blx	r3
     b8a:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     b8c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     b8e:	09db      	lsrs	r3, r3, #7
     b90:	d100      	bne.n	b94 <_sercom_usart_interrupt_handler+0x60>
     b92:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     b94:	2380      	movs	r3, #128	; 0x80
     b96:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
     b98:	68c3      	ldr	r3, [r0, #12]
     b9a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     b9c:	8b63      	ldrh	r3, [r4, #26]
     b9e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     ba0:	8363      	strh	r3, [r4, #26]
     ba2:	e7f6      	b.n	b92 <_sercom_usart_interrupt_handler+0x5e>

00000ba4 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
     ba4:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
     ba8:	d000      	beq.n	bac <_sercom_init_irq_param+0x8>
     baa:	4770      	bx	lr
		_sercom4_dev = (struct _usart_async_device *)dev;
     bac:	4b01      	ldr	r3, [pc, #4]	; (bb4 <_sercom_init_irq_param+0x10>)
     bae:	6019      	str	r1, [r3, #0]
	}
}
     bb0:	e7fb      	b.n	baa <_sercom_init_irq_param+0x6>
     bb2:	bf00      	nop
     bb4:	20000098 	.word	0x20000098

00000bb8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     bb8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
     bba:	4b04      	ldr	r3, [pc, #16]	; (bcc <_sercom_get_irq_num+0x14>)
     bbc:	4798      	blx	r3
     bbe:	0080      	lsls	r0, r0, #2
     bc0:	b2c0      	uxtb	r0, r0
     bc2:	302e      	adds	r0, #46	; 0x2e
}
     bc4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     bc8:	bd08      	pop	{r3, pc}
     bca:	bf00      	nop
     bcc:	00000af5 	.word	0x00000af5

00000bd0 <_get_sercom_index>:
{
     bd0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     bd2:	4b0c      	ldr	r3, [pc, #48]	; (c04 <_get_sercom_index+0x34>)
     bd4:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     bd6:	2300      	movs	r3, #0
     bd8:	b143      	cbz	r3, bec <_get_sercom_index+0x1c>
	ASSERT(false);
     bda:	f240 226b 	movw	r2, #619	; 0x26b
     bde:	490a      	ldr	r1, [pc, #40]	; (c08 <_get_sercom_index+0x38>)
     be0:	2000      	movs	r0, #0
     be2:	4b0a      	ldr	r3, [pc, #40]	; (c0c <_get_sercom_index+0x3c>)
     be4:	4798      	blx	r3
	return 0;
     be6:	2300      	movs	r3, #0
}
     be8:	4618      	mov	r0, r3
     bea:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
     bec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     bf0:	00d1      	lsls	r1, r2, #3
     bf2:	4a07      	ldr	r2, [pc, #28]	; (c10 <_get_sercom_index+0x40>)
     bf4:	440a      	add	r2, r1
     bf6:	7e12      	ldrb	r2, [r2, #24]
     bf8:	4290      	cmp	r0, r2
     bfa:	d0f5      	beq.n	be8 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     bfc:	3301      	adds	r3, #1
     bfe:	b2db      	uxtb	r3, r3
     c00:	e7ea      	b.n	bd8 <_get_sercom_index+0x8>
     c02:	bf00      	nop
     c04:	00000af5 	.word	0x00000af5
     c08:	00001320 	.word	0x00001320
     c0c:	000007fd 	.word	0x000007fd
     c10:	000012b4 	.word	0x000012b4

00000c14 <_usart_init>:
{
     c14:	b538      	push	{r3, r4, r5, lr}
     c16:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     c18:	4b3c      	ldr	r3, [pc, #240]	; (d0c <_usart_init+0xf8>)
     c1a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     c1c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     c1e:	f013 0f01 	tst.w	r3, #1
     c22:	d122      	bne.n	c6a <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     c24:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c28:	00da      	lsls	r2, r3, #3
     c2a:	4b39      	ldr	r3, [pc, #228]	; (d10 <_usart_init+0xfc>)
     c2c:	4413      	add	r3, r2
     c2e:	69da      	ldr	r2, [r3, #28]
     c30:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c34:	69e3      	ldr	r3, [r4, #28]
     c36:	f013 0f03 	tst.w	r3, #3
     c3a:	d1fb      	bne.n	c34 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c3c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     c3e:	f013 0f02 	tst.w	r3, #2
     c42:	d00b      	beq.n	c5c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c44:	6823      	ldr	r3, [r4, #0]
     c46:	f023 0302 	bic.w	r3, r3, #2
     c4a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c4c:	69e3      	ldr	r3, [r4, #28]
     c4e:	f013 0f03 	tst.w	r3, #3
     c52:	d1fb      	bne.n	c4c <_usart_init+0x38>
     c54:	69e3      	ldr	r3, [r4, #28]
     c56:	f013 0f02 	tst.w	r3, #2
     c5a:	d1fb      	bne.n	c54 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     c5c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c60:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c62:	69e3      	ldr	r3, [r4, #28]
     c64:	f013 0f03 	tst.w	r3, #3
     c68:	d1fb      	bne.n	c62 <_usart_init+0x4e>
     c6a:	69e3      	ldr	r3, [r4, #28]
     c6c:	f013 0f01 	tst.w	r3, #1
     c70:	d1fb      	bne.n	c6a <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     c72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c76:	00da      	lsls	r2, r3, #3
     c78:	4b25      	ldr	r3, [pc, #148]	; (d10 <_usart_init+0xfc>)
     c7a:	4413      	add	r3, r2
     c7c:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c7e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c80:	69e3      	ldr	r3, [r4, #28]
     c82:	f013 0f03 	tst.w	r3, #3
     c86:	d1fb      	bne.n	c80 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     c88:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c8c:	00da      	lsls	r2, r3, #3
     c8e:	4b20      	ldr	r3, [pc, #128]	; (d10 <_usart_init+0xfc>)
     c90:	4413      	add	r3, r2
     c92:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
     c94:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c96:	69e3      	ldr	r3, [r4, #28]
     c98:	f013 0f1f 	tst.w	r3, #31
     c9c:	d1fb      	bne.n	c96 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     c9e:	0042      	lsls	r2, r0, #1
     ca0:	4402      	add	r2, r0
     ca2:	00d1      	lsls	r1, r2, #3
     ca4:	4b1a      	ldr	r3, [pc, #104]	; (d10 <_usart_init+0xfc>)
     ca6:	440b      	add	r3, r1
     ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
     caa:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     cac:	69db      	ldr	r3, [r3, #28]
     cae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     cb2:	d10a      	bne.n	cca <_usart_init+0xb6>
     cb4:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     cb8:	d107      	bne.n	cca <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     cba:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     cbe:	00da      	lsls	r2, r3, #3
     cc0:	4b13      	ldr	r3, [pc, #76]	; (d10 <_usart_init+0xfc>)
     cc2:	4413      	add	r3, r2
     cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
     cc6:	81a3      	strh	r3, [r4, #12]
     cc8:	e00f      	b.n	cea <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     cca:	0042      	lsls	r2, r0, #1
     ccc:	4402      	add	r2, r0
     cce:	00d1      	lsls	r1, r2, #3
     cd0:	4b0f      	ldr	r3, [pc, #60]	; (d10 <_usart_init+0xfc>)
     cd2:	440b      	add	r3, r1
     cd4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
     cd6:	89a2      	ldrh	r2, [r4, #12]
     cd8:	f361 020c 	bfi	r2, r1, #0, #13
     cdc:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     cde:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
     ce2:	89a3      	ldrh	r3, [r4, #12]
     ce4:	f362 334f 	bfi	r3, r2, #13, #3
     ce8:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     cea:	4a09      	ldr	r2, [pc, #36]	; (d10 <_usart_init+0xfc>)
     cec:	0043      	lsls	r3, r0, #1
     cee:	181d      	adds	r5, r3, r0
     cf0:	00e9      	lsls	r1, r5, #3
     cf2:	460d      	mov	r5, r1
     cf4:	4411      	add	r1, r2
     cf6:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
     cfa:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     cfc:	442a      	add	r2, r5
     cfe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     d02:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
     d06:	2000      	movs	r0, #0
     d08:	bd38      	pop	{r3, r4, r5, pc}
     d0a:	bf00      	nop
     d0c:	00000bd1 	.word	0x00000bd1
     d10:	000012b4 	.word	0x000012b4

00000d14 <_usart_async_init>:
{
     d14:	b570      	push	{r4, r5, r6, lr}
     d16:	460c      	mov	r4, r1
	ASSERT(device);
     d18:	4606      	mov	r6, r0
     d1a:	22cb      	movs	r2, #203	; 0xcb
     d1c:	4918      	ldr	r1, [pc, #96]	; (d80 <_usart_async_init+0x6c>)
     d1e:	3000      	adds	r0, #0
     d20:	bf18      	it	ne
     d22:	2001      	movne	r0, #1
     d24:	4b17      	ldr	r3, [pc, #92]	; (d84 <_usart_async_init+0x70>)
     d26:	4798      	blx	r3
	init_status = _usart_init(hw);
     d28:	4620      	mov	r0, r4
     d2a:	4b17      	ldr	r3, [pc, #92]	; (d88 <_usart_async_init+0x74>)
     d2c:	4798      	blx	r3
	if (init_status) {
     d2e:	4605      	mov	r5, r0
     d30:	b108      	cbz	r0, d36 <_usart_async_init+0x22>
}
     d32:	4628      	mov	r0, r5
     d34:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     d36:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
     d38:	4631      	mov	r1, r6
     d3a:	4620      	mov	r0, r4
     d3c:	4b13      	ldr	r3, [pc, #76]	; (d8c <_usart_async_init+0x78>)
     d3e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
     d40:	4620      	mov	r0, r4
     d42:	4b13      	ldr	r3, [pc, #76]	; (d90 <_usart_async_init+0x7c>)
     d44:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
     d46:	2400      	movs	r4, #0
     d48:	e016      	b.n	d78 <_usart_async_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d4a:	0941      	lsrs	r1, r0, #5
     d4c:	f000 021f 	and.w	r2, r0, #31
     d50:	2301      	movs	r3, #1
     d52:	4093      	lsls	r3, r2
     d54:	4a0f      	ldr	r2, [pc, #60]	; (d94 <_usart_async_init+0x80>)
     d56:	f101 0620 	add.w	r6, r1, #32
     d5a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     d5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d62:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d66:	f101 0660 	add.w	r6, r1, #96	; 0x60
     d6a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
     d72:	3001      	adds	r0, #1
     d74:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
     d76:	3401      	adds	r4, #1
     d78:	2c03      	cmp	r4, #3
     d7a:	d9e6      	bls.n	d4a <_usart_async_init+0x36>
     d7c:	e7d9      	b.n	d32 <_usart_async_init+0x1e>
     d7e:	bf00      	nop
     d80:	00001320 	.word	0x00001320
     d84:	000007fd 	.word	0x000007fd
     d88:	00000c15 	.word	0x00000c15
     d8c:	00000ba5 	.word	0x00000ba5
     d90:	00000bb9 	.word	0x00000bb9
     d94:	e000e100 	.word	0xe000e100

00000d98 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     d98:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     d9a:	6813      	ldr	r3, [r2, #0]
     d9c:	f043 0302 	orr.w	r3, r3, #2
     da0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     da2:	69d3      	ldr	r3, [r2, #28]
     da4:	f013 0f03 	tst.w	r3, #3
     da8:	d1fb      	bne.n	da2 <_usart_async_enable+0xa>
}
     daa:	4770      	bx	lr

00000dac <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     dac:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
     dae:	6299      	str	r1, [r3, #40]	; 0x28
     db0:	4770      	bx	lr

00000db2 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     db2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     db4:	2201      	movs	r2, #1
     db6:	759a      	strb	r2, [r3, #22]
     db8:	4770      	bx	lr

00000dba <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     dba:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     dbc:	2202      	movs	r2, #2
     dbe:	759a      	strb	r2, [r3, #22]
     dc0:	4770      	bx	lr
	...

00000dc4 <_usart_async_set_irq_state>:
{
     dc4:	b570      	push	{r4, r5, r6, lr}
     dc6:	460c      	mov	r4, r1
     dc8:	4615      	mov	r5, r2
	ASSERT(device);
     dca:	4606      	mov	r6, r0
     dcc:	f240 222b 	movw	r2, #555	; 0x22b
     dd0:	4916      	ldr	r1, [pc, #88]	; (e2c <_usart_async_set_irq_state+0x68>)
     dd2:	3000      	adds	r0, #0
     dd4:	bf18      	it	ne
     dd6:	2001      	movne	r0, #1
     dd8:	4b15      	ldr	r3, [pc, #84]	; (e30 <_usart_async_set_irq_state+0x6c>)
     dda:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     ddc:	b134      	cbz	r4, dec <_usart_async_set_irq_state+0x28>
     dde:	2c02      	cmp	r4, #2
     de0:	d004      	beq.n	dec <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_RX_DONE == type) {
     de2:	2c01      	cmp	r4, #1
     de4:	d011      	beq.n	e0a <_usart_async_set_irq_state+0x46>
	} else if (USART_ASYNC_ERROR == type) {
     de6:	2c03      	cmp	r4, #3
     de8:	d017      	beq.n	e1a <_usart_async_set_irq_state+0x56>
     dea:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     dec:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     dee:	b935      	cbnz	r5, dfe <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     df0:	2201      	movs	r2, #1
     df2:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     df4:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     df6:	b92d      	cbnz	r5, e04 <_usart_async_set_irq_state+0x40>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     df8:	2202      	movs	r2, #2
     dfa:	751a      	strb	r2, [r3, #20]
     dfc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     dfe:	2201      	movs	r2, #1
     e00:	759a      	strb	r2, [r3, #22]
     e02:	e7f7      	b.n	df4 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     e04:	2202      	movs	r2, #2
     e06:	759a      	strb	r2, [r3, #22]
     e08:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     e0a:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     e0c:	b915      	cbnz	r5, e14 <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     e0e:	2204      	movs	r2, #4
     e10:	751a      	strb	r2, [r3, #20]
     e12:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     e14:	2204      	movs	r2, #4
     e16:	759a      	strb	r2, [r3, #22]
     e18:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     e1a:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     e1c:	b115      	cbz	r5, e24 <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     e1e:	2280      	movs	r2, #128	; 0x80
     e20:	759a      	strb	r2, [r3, #22]
}
     e22:	e7e2      	b.n	dea <_usart_async_set_irq_state+0x26>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     e24:	2280      	movs	r2, #128	; 0x80
     e26:	751a      	strb	r2, [r3, #20]
     e28:	bd70      	pop	{r4, r5, r6, pc}
     e2a:	bf00      	nop
     e2c:	00001320 	.word	0x00001320
     e30:	000007fd 	.word	0x000007fd

00000e34 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
     e34:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
     e36:	4b02      	ldr	r3, [pc, #8]	; (e40 <SERCOM4_0_Handler+0xc>)
     e38:	6818      	ldr	r0, [r3, #0]
     e3a:	4b02      	ldr	r3, [pc, #8]	; (e44 <SERCOM4_0_Handler+0x10>)
     e3c:	4798      	blx	r3
     e3e:	bd08      	pop	{r3, pc}
     e40:	20000098 	.word	0x20000098
     e44:	00000b35 	.word	0x00000b35

00000e48 <SERCOM4_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
     e48:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
     e4a:	4b02      	ldr	r3, [pc, #8]	; (e54 <SERCOM4_1_Handler+0xc>)
     e4c:	6818      	ldr	r0, [r3, #0]
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <SERCOM4_1_Handler+0x10>)
     e50:	4798      	blx	r3
     e52:	bd08      	pop	{r3, pc}
     e54:	20000098 	.word	0x20000098
     e58:	00000b35 	.word	0x00000b35

00000e5c <SERCOM4_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
     e5c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
     e5e:	4b02      	ldr	r3, [pc, #8]	; (e68 <SERCOM4_2_Handler+0xc>)
     e60:	6818      	ldr	r0, [r3, #0]
     e62:	4b02      	ldr	r3, [pc, #8]	; (e6c <SERCOM4_2_Handler+0x10>)
     e64:	4798      	blx	r3
     e66:	bd08      	pop	{r3, pc}
     e68:	20000098 	.word	0x20000098
     e6c:	00000b35 	.word	0x00000b35

00000e70 <SERCOM4_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
     e70:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
     e72:	4b02      	ldr	r3, [pc, #8]	; (e7c <SERCOM4_3_Handler+0xc>)
     e74:	6818      	ldr	r0, [r3, #0]
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <SERCOM4_3_Handler+0x10>)
     e78:	4798      	blx	r3
     e7a:	bd08      	pop	{r3, pc}
     e7c:	20000098 	.word	0x20000098
     e80:	00000b35 	.word	0x00000b35

00000e84 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     e84:	4b03      	ldr	r3, [pc, #12]	; (e94 <_system_time_init+0x10>)
     e86:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     e8a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     e8c:	2205      	movs	r2, #5
     e8e:	601a      	str	r2, [r3, #0]
     e90:	4770      	bx	lr
     e92:	bf00      	nop
     e94:	e000e010 	.word	0xe000e010

00000e98 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
     e98:	b508      	push	{r3, lr}
	_system_time_init(hw);
     e9a:	4b01      	ldr	r3, [pc, #4]	; (ea0 <_delay_init+0x8>)
     e9c:	4798      	blx	r3
     e9e:	bd08      	pop	{r3, pc}
     ea0:	00000e85 	.word	0x00000e85

00000ea4 <tranUsartHdl>:
char ackFlag = 0;
char cleanBufferFlag = 0;

static void tranUsartHdl(const struct usart_async_descriptor *const io_descr) {
	/* End transmision data */
	flagTx = NOBUSY;
     ea4:	2200      	movs	r2, #0
     ea6:	4b01      	ldr	r3, [pc, #4]	; (eac <tranUsartHdl+0x8>)
     ea8:	701a      	strb	r2, [r3, #0]
     eaa:	4770      	bx	lr
     eac:	2000009c 	.word	0x2000009c

00000eb0 <rcvUsartHdl>:
}

static void rcvUsartHdl(const struct usart_async_descriptor *const io_descr) {
     eb0:	b510      	push	{r4, lr}
     eb2:	b082      	sub	sp, #8
	uint8_t dataRcv[1];
	uint8_t numDataRcv = 0;
	
	char *tmpStr;
	
	numDataRcv = io_read(ioUsart0, dataRcv, 1);
     eb4:	2201      	movs	r2, #1
     eb6:	a901      	add	r1, sp, #4
     eb8:	4b2e      	ldr	r3, [pc, #184]	; (f74 <rcvUsartHdl+0xc4>)
     eba:	6818      	ldr	r0, [r3, #0]
     ebc:	4b2e      	ldr	r3, [pc, #184]	; (f78 <rcvUsartHdl+0xc8>)
     ebe:	4798      	blx	r3
     ec0:	b2c0      	uxtb	r0, r0
	if (1 <= numDataRcv) {
     ec2:	b318      	cbz	r0, f0c <rcvUsartHdl+0x5c>
		if ( SIZE_BUFFER_RX <= idxRcv) {
     ec4:	4b2d      	ldr	r3, [pc, #180]	; (f7c <rcvUsartHdl+0xcc>)
     ec6:	685b      	ldr	r3, [r3, #4]
     ec8:	2b7f      	cmp	r3, #127	; 0x7f
     eca:	dc21      	bgt.n	f10 <rcvUsartHdl+0x60>
				bufferRcv[i-1] = bufferRcv[i];
			}
			bufferRcv[SIZE_BUFFER_RX-1] = dataRcv[0];
			idxRcv = SIZE_BUFFER_RX;
		} else {
			bufferRcv[idxRcv] = dataRcv[0];
     ecc:	f89d 1004 	ldrb.w	r1, [sp, #4]
     ed0:	4a2b      	ldr	r2, [pc, #172]	; (f80 <rcvUsartHdl+0xd0>)
     ed2:	54d1      	strb	r1, [r2, r3]
			idxRcv++;
     ed4:	3301      	adds	r3, #1
     ed6:	4a29      	ldr	r2, [pc, #164]	; (f7c <rcvUsartHdl+0xcc>)
     ed8:	6053      	str	r3, [r2, #4]
     eda:	e00e      	b.n	efa <rcvUsartHdl+0x4a>
				bufferRcv[i-1] = bufferRcv[i];
     edc:	1e59      	subs	r1, r3, #1
     ede:	4a28      	ldr	r2, [pc, #160]	; (f80 <rcvUsartHdl+0xd0>)
     ee0:	5cd0      	ldrb	r0, [r2, r3]
     ee2:	5450      	strb	r0, [r2, r1]
			for (int i=1; SIZE_BUFFER_RX > i; i++) {
     ee4:	3301      	adds	r3, #1
     ee6:	2b7f      	cmp	r3, #127	; 0x7f
     ee8:	ddf8      	ble.n	edc <rcvUsartHdl+0x2c>
			bufferRcv[SIZE_BUFFER_RX-1] = dataRcv[0];
     eea:	f89d 2004 	ldrb.w	r2, [sp, #4]
     eee:	4b24      	ldr	r3, [pc, #144]	; (f80 <rcvUsartHdl+0xd0>)
     ef0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			idxRcv = SIZE_BUFFER_RX;
     ef4:	2280      	movs	r2, #128	; 0x80
     ef6:	4b21      	ldr	r3, [pc, #132]	; (f7c <rcvUsartHdl+0xcc>)
     ef8:	605a      	str	r2, [r3, #4]
		}
		
		// Study for some valid package
		if ( (3 < idxRcv) && ( 0x0A == bufferRcv[idxRcv-1] ) && ( 0x0D == bufferRcv[idxRcv-2] )) {
     efa:	4b20      	ldr	r3, [pc, #128]	; (f7c <rcvUsartHdl+0xcc>)
     efc:	685b      	ldr	r3, [r3, #4]
     efe:	2b03      	cmp	r3, #3
     f00:	dd04      	ble.n	f0c <rcvUsartHdl+0x5c>
     f02:	1e5a      	subs	r2, r3, #1
     f04:	491e      	ldr	r1, [pc, #120]	; (f80 <rcvUsartHdl+0xd0>)
     f06:	5c8a      	ldrb	r2, [r1, r2]
     f08:	2a0a      	cmp	r2, #10
     f0a:	d003      	beq.n	f14 <rcvUsartHdl+0x64>
				}
			}
			cleanBufferFlag = 1;	
		}
	}
}
     f0c:	b002      	add	sp, #8
     f0e:	bd10      	pop	{r4, pc}
     f10:	2301      	movs	r3, #1
     f12:	e7e8      	b.n	ee6 <rcvUsartHdl+0x36>
		if ( (3 < idxRcv) && ( 0x0A == bufferRcv[idxRcv-1] ) && ( 0x0D == bufferRcv[idxRcv-2] )) {
     f14:	3b02      	subs	r3, #2
     f16:	5ccb      	ldrb	r3, [r1, r3]
     f18:	2b0d      	cmp	r3, #13
     f1a:	d1f7      	bne.n	f0c <rcvUsartHdl+0x5c>
			ackFlag = NOACK;
     f1c:	2202      	movs	r2, #2
     f1e:	4b17      	ldr	r3, [pc, #92]	; (f7c <rcvUsartHdl+0xcc>)
     f20:	721a      	strb	r2, [r3, #8]
			result = strncmp(bufferRcv, "led0aux2=", 5);
     f22:	2205      	movs	r2, #5
     f24:	4917      	ldr	r1, [pc, #92]	; (f84 <rcvUsartHdl+0xd4>)
     f26:	4816      	ldr	r0, [pc, #88]	; (f80 <rcvUsartHdl+0xd0>)
     f28:	4b17      	ldr	r3, [pc, #92]	; (f88 <rcvUsartHdl+0xd8>)
     f2a:	4798      	blx	r3
			if ( 0 == result) {
     f2c:	b118      	cbz	r0, f36 <rcvUsartHdl+0x86>
			cleanBufferFlag = 1;	
     f2e:	2201      	movs	r2, #1
     f30:	4b12      	ldr	r3, [pc, #72]	; (f7c <rcvUsartHdl+0xcc>)
     f32:	725a      	strb	r2, [r3, #9]
}
     f34:	e7ea      	b.n	f0c <rcvUsartHdl+0x5c>
				tmpStr = getStrBetweenTwoStr(bufferRcv, "led0aux2=", "\r\n");
     f36:	4a15      	ldr	r2, [pc, #84]	; (f8c <rcvUsartHdl+0xdc>)
     f38:	4912      	ldr	r1, [pc, #72]	; (f84 <rcvUsartHdl+0xd4>)
     f3a:	4811      	ldr	r0, [pc, #68]	; (f80 <rcvUsartHdl+0xd0>)
     f3c:	4b14      	ldr	r3, [pc, #80]	; (f90 <rcvUsartHdl+0xe0>)
     f3e:	4798      	blx	r3
     f40:	4604      	mov	r4, r0
				result = strcmp(tmpStr, "on");
     f42:	4914      	ldr	r1, [pc, #80]	; (f94 <rcvUsartHdl+0xe4>)
     f44:	4b14      	ldr	r3, [pc, #80]	; (f98 <rcvUsartHdl+0xe8>)
     f46:	4798      	blx	r3
				if (0 == result) {
     f48:	b930      	cbnz	r0, f58 <rcvUsartHdl+0xa8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     f4e:	4b13      	ldr	r3, [pc, #76]	; (f9c <rcvUsartHdl+0xec>)
     f50:	615a      	str	r2, [r3, #20]
					ackFlag = ACK;
     f52:	2201      	movs	r2, #1
     f54:	4b09      	ldr	r3, [pc, #36]	; (f7c <rcvUsartHdl+0xcc>)
     f56:	721a      	strb	r2, [r3, #8]
				result = strcmp(tmpStr, "off");
     f58:	4911      	ldr	r1, [pc, #68]	; (fa0 <rcvUsartHdl+0xf0>)
     f5a:	4620      	mov	r0, r4
     f5c:	4b0e      	ldr	r3, [pc, #56]	; (f98 <rcvUsartHdl+0xe8>)
     f5e:	4798      	blx	r3
				if (0 == result) {
     f60:	2800      	cmp	r0, #0
     f62:	d1e4      	bne.n	f2e <rcvUsartHdl+0x7e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     f68:	4b0c      	ldr	r3, [pc, #48]	; (f9c <rcvUsartHdl+0xec>)
     f6a:	619a      	str	r2, [r3, #24]
					ackFlag = ACK;
     f6c:	2201      	movs	r2, #1
     f6e:	4b03      	ldr	r3, [pc, #12]	; (f7c <rcvUsartHdl+0xcc>)
     f70:	721a      	strb	r2, [r3, #8]
     f72:	e7dc      	b.n	f2e <rcvUsartHdl+0x7e>
     f74:	20000110 	.word	0x20000110
     f78:	00000515 	.word	0x00000515
     f7c:	2000009c 	.word	0x2000009c
     f80:	20000194 	.word	0x20000194
     f84:	0000133c 	.word	0x0000133c
     f88:	000011fd 	.word	0x000011fd
     f8c:	00001348 	.word	0x00001348
     f90:	00000459 	.word	0x00000459
     f94:	0000134c 	.word	0x0000134c
     f98:	000011d9 	.word	0x000011d9
     f9c:	41008000 	.word	0x41008000
     fa0:	00001350 	.word	0x00001350

00000fa4 <main>:

int main(void)
{
     fa4:	b538      	push	{r3, r4, r5, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     fa6:	4b2b      	ldr	r3, [pc, #172]	; (1054 <main+0xb0>)
     fa8:	4798      	blx	r3
	
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tranUsartHdl);
     faa:	4c2b      	ldr	r4, [pc, #172]	; (1058 <main+0xb4>)
     fac:	4a2b      	ldr	r2, [pc, #172]	; (105c <main+0xb8>)
     fae:	2101      	movs	r1, #1
     fb0:	4620      	mov	r0, r4
     fb2:	4d2b      	ldr	r5, [pc, #172]	; (1060 <main+0xbc>)
     fb4:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rcvUsartHdl);
     fb6:	4a2b      	ldr	r2, [pc, #172]	; (1064 <main+0xc0>)
     fb8:	2100      	movs	r1, #0
     fba:	4620      	mov	r0, r4
     fbc:	47a8      	blx	r5
	usart_async_get_io_descriptor(&USART_0, &ioUsart0);
     fbe:	492a      	ldr	r1, [pc, #168]	; (1068 <main+0xc4>)
     fc0:	4620      	mov	r0, r4
     fc2:	4b2a      	ldr	r3, [pc, #168]	; (106c <main+0xc8>)
     fc4:	4798      	blx	r3
	usart_async_enable(&USART_0);
     fc6:	4620      	mov	r0, r4
     fc8:	4b29      	ldr	r3, [pc, #164]	; (1070 <main+0xcc>)
     fca:	4798      	blx	r3
     fcc:	e015      	b.n	ffa <main+0x56>

	/* Replace with your application code */
	while (1) {
		if (cleanBufferFlag) {
			for (int i=0; i < idxRcv; i++ ) {
				bufferRcv[i] = 0;
     fce:	2200      	movs	r2, #0
     fd0:	4928      	ldr	r1, [pc, #160]	; (1074 <main+0xd0>)
     fd2:	54ca      	strb	r2, [r1, r3]
				idxRcv = 0;
     fd4:	4928      	ldr	r1, [pc, #160]	; (1078 <main+0xd4>)
     fd6:	604a      	str	r2, [r1, #4]
			for (int i=0; i < idxRcv; i++ ) {
     fd8:	3301      	adds	r3, #1
     fda:	4a27      	ldr	r2, [pc, #156]	; (1078 <main+0xd4>)
     fdc:	6852      	ldr	r2, [r2, #4]
     fde:	4293      	cmp	r3, r2
     fe0:	dbf5      	blt.n	fce <main+0x2a>
			}
			cleanBufferFlag = 0;
     fe2:	2200      	movs	r2, #0
     fe4:	4b24      	ldr	r3, [pc, #144]	; (1078 <main+0xd4>)
     fe6:	725a      	strb	r2, [r3, #9]
     fe8:	e00b      	b.n	1002 <main+0x5e>
     fea:	2300      	movs	r3, #0
     fec:	e7f5      	b.n	fda <main+0x36>
		}
		
		switch (ackFlag) {
			case ACK:
				if ( NOBUSY == flagTx) {
     fee:	4b22      	ldr	r3, [pc, #136]	; (1078 <main+0xd4>)
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	b16b      	cbz	r3, 1010 <main+0x6c>
					int sizeTransmit = snprintf(bufferTrans, SIZE_BUFFER_TX, "ACK\r\n");
					flagTx = BUSY;
					io_write(ioUsart0, (uint8_t *)bufferTrans, sizeTransmit);
				}
			case NOACK:
				if ( NOBUSY == flagTx ) {
     ff4:	4b20      	ldr	r3, [pc, #128]	; (1078 <main+0xd4>)
     ff6:	781b      	ldrb	r3, [r3, #0]
     ff8:	b1db      	cbz	r3, 1032 <main+0x8e>
		if (cleanBufferFlag) {
     ffa:	4b1f      	ldr	r3, [pc, #124]	; (1078 <main+0xd4>)
     ffc:	7a5b      	ldrb	r3, [r3, #9]
     ffe:	2b00      	cmp	r3, #0
    1000:	d1f3      	bne.n	fea <main+0x46>
		switch (ackFlag) {
    1002:	4b1d      	ldr	r3, [pc, #116]	; (1078 <main+0xd4>)
    1004:	7a1b      	ldrb	r3, [r3, #8]
    1006:	2b01      	cmp	r3, #1
    1008:	d0f1      	beq.n	fee <main+0x4a>
    100a:	2b02      	cmp	r3, #2
    100c:	d0f2      	beq.n	ff4 <main+0x50>
    100e:	e7f4      	b.n	ffa <main+0x56>
					ackFlag = NOBUSY;
    1010:	4b19      	ldr	r3, [pc, #100]	; (1078 <main+0xd4>)
    1012:	2200      	movs	r2, #0
    1014:	721a      	strb	r2, [r3, #8]
					int sizeTransmit = snprintf(bufferTrans, SIZE_BUFFER_TX, "ACK\r\n");
    1016:	4919      	ldr	r1, [pc, #100]	; (107c <main+0xd8>)
    1018:	4a19      	ldr	r2, [pc, #100]	; (1080 <main+0xdc>)
    101a:	6810      	ldr	r0, [r2, #0]
    101c:	6008      	str	r0, [r1, #0]
    101e:	8892      	ldrh	r2, [r2, #4]
    1020:	808a      	strh	r2, [r1, #4]
					flagTx = BUSY;
    1022:	2201      	movs	r2, #1
    1024:	701a      	strb	r2, [r3, #0]
					io_write(ioUsart0, (uint8_t *)bufferTrans, sizeTransmit);
    1026:	2205      	movs	r2, #5
    1028:	4b0f      	ldr	r3, [pc, #60]	; (1068 <main+0xc4>)
    102a:	6818      	ldr	r0, [r3, #0]
    102c:	4b15      	ldr	r3, [pc, #84]	; (1084 <main+0xe0>)
    102e:	4798      	blx	r3
    1030:	e7e0      	b.n	ff4 <main+0x50>
					ackFlag = NOBUSY;
    1032:	4a11      	ldr	r2, [pc, #68]	; (1078 <main+0xd4>)
    1034:	7213      	strb	r3, [r2, #8]
					int sizeTransmit = snprintf(bufferTrans, SIZE_BUFFER_TX, "NOACK\r\n");
    1036:	4c11      	ldr	r4, [pc, #68]	; (107c <main+0xd8>)
    1038:	4b13      	ldr	r3, [pc, #76]	; (1088 <main+0xe4>)
    103a:	cb03      	ldmia	r3!, {r0, r1}
    103c:	6020      	str	r0, [r4, #0]
    103e:	6061      	str	r1, [r4, #4]
					flagTx = BUSY;
    1040:	2301      	movs	r3, #1
    1042:	7013      	strb	r3, [r2, #0]
					io_write(ioUsart0, (uint8_t *)bufferTrans, sizeTransmit);
    1044:	2207      	movs	r2, #7
    1046:	4621      	mov	r1, r4
    1048:	4b07      	ldr	r3, [pc, #28]	; (1068 <main+0xc4>)
    104a:	6818      	ldr	r0, [r3, #0]
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <main+0xe0>)
    104e:	4798      	blx	r3
    1050:	e7d3      	b.n	ffa <main+0x56>
    1052:	bf00      	nop
    1054:	000002d1 	.word	0x000002d1
    1058:	200000b0 	.word	0x200000b0
    105c:	00000ea5 	.word	0x00000ea5
    1060:	00000789 	.word	0x00000789
    1064:	00000eb1 	.word	0x00000eb1
    1068:	20000110 	.word	0x20000110
    106c:	0000075d 	.word	0x0000075d
    1070:	00000731 	.word	0x00000731
    1074:	20000194 	.word	0x20000194
    1078:	2000009c 	.word	0x2000009c
    107c:	20000114 	.word	0x20000114
    1080:	00001354 	.word	0x00001354
    1084:	000004e1 	.word	0x000004e1
    1088:	0000135c 	.word	0x0000135c

0000108c <__libc_init_array>:
    108c:	b570      	push	{r4, r5, r6, lr}
    108e:	4e0d      	ldr	r6, [pc, #52]	; (10c4 <__libc_init_array+0x38>)
    1090:	4c0d      	ldr	r4, [pc, #52]	; (10c8 <__libc_init_array+0x3c>)
    1092:	1ba4      	subs	r4, r4, r6
    1094:	10a4      	asrs	r4, r4, #2
    1096:	2500      	movs	r5, #0
    1098:	42a5      	cmp	r5, r4
    109a:	d109      	bne.n	10b0 <__libc_init_array+0x24>
    109c:	4e0b      	ldr	r6, [pc, #44]	; (10cc <__libc_init_array+0x40>)
    109e:	4c0c      	ldr	r4, [pc, #48]	; (10d0 <__libc_init_array+0x44>)
    10a0:	f000 f990 	bl	13c4 <_init>
    10a4:	1ba4      	subs	r4, r4, r6
    10a6:	10a4      	asrs	r4, r4, #2
    10a8:	2500      	movs	r5, #0
    10aa:	42a5      	cmp	r5, r4
    10ac:	d105      	bne.n	10ba <__libc_init_array+0x2e>
    10ae:	bd70      	pop	{r4, r5, r6, pc}
    10b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    10b4:	4798      	blx	r3
    10b6:	3501      	adds	r5, #1
    10b8:	e7ee      	b.n	1098 <__libc_init_array+0xc>
    10ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    10be:	4798      	blx	r3
    10c0:	3501      	adds	r5, #1
    10c2:	e7f2      	b.n	10aa <__libc_init_array+0x1e>
    10c4:	000013d0 	.word	0x000013d0
    10c8:	000013d0 	.word	0x000013d0
    10cc:	000013d0 	.word	0x000013d0
    10d0:	000013d4 	.word	0x000013d4

000010d4 <malloc>:
    10d4:	4b02      	ldr	r3, [pc, #8]	; (10e0 <malloc+0xc>)
    10d6:	4601      	mov	r1, r0
    10d8:	6818      	ldr	r0, [r3, #0]
    10da:	f000 b80f 	b.w	10fc <_malloc_r>
    10de:	bf00      	nop
    10e0:	20000000 	.word	0x20000000

000010e4 <memcpy>:
    10e4:	b510      	push	{r4, lr}
    10e6:	1e43      	subs	r3, r0, #1
    10e8:	440a      	add	r2, r1
    10ea:	4291      	cmp	r1, r2
    10ec:	d100      	bne.n	10f0 <memcpy+0xc>
    10ee:	bd10      	pop	{r4, pc}
    10f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    10f4:	f803 4f01 	strb.w	r4, [r3, #1]!
    10f8:	e7f7      	b.n	10ea <memcpy+0x6>
	...

000010fc <_malloc_r>:
    10fc:	b570      	push	{r4, r5, r6, lr}
    10fe:	1ccd      	adds	r5, r1, #3
    1100:	f025 0503 	bic.w	r5, r5, #3
    1104:	3508      	adds	r5, #8
    1106:	2d0c      	cmp	r5, #12
    1108:	bf38      	it	cc
    110a:	250c      	movcc	r5, #12
    110c:	2d00      	cmp	r5, #0
    110e:	4606      	mov	r6, r0
    1110:	db01      	blt.n	1116 <_malloc_r+0x1a>
    1112:	42a9      	cmp	r1, r5
    1114:	d903      	bls.n	111e <_malloc_r+0x22>
    1116:	230c      	movs	r3, #12
    1118:	6033      	str	r3, [r6, #0]
    111a:	2000      	movs	r0, #0
    111c:	bd70      	pop	{r4, r5, r6, pc}
    111e:	f000 f89a 	bl	1256 <__malloc_lock>
    1122:	4a23      	ldr	r2, [pc, #140]	; (11b0 <_malloc_r+0xb4>)
    1124:	6814      	ldr	r4, [r2, #0]
    1126:	4621      	mov	r1, r4
    1128:	b991      	cbnz	r1, 1150 <_malloc_r+0x54>
    112a:	4c22      	ldr	r4, [pc, #136]	; (11b4 <_malloc_r+0xb8>)
    112c:	6823      	ldr	r3, [r4, #0]
    112e:	b91b      	cbnz	r3, 1138 <_malloc_r+0x3c>
    1130:	4630      	mov	r0, r6
    1132:	f000 f841 	bl	11b8 <_sbrk_r>
    1136:	6020      	str	r0, [r4, #0]
    1138:	4629      	mov	r1, r5
    113a:	4630      	mov	r0, r6
    113c:	f000 f83c 	bl	11b8 <_sbrk_r>
    1140:	1c43      	adds	r3, r0, #1
    1142:	d126      	bne.n	1192 <_malloc_r+0x96>
    1144:	230c      	movs	r3, #12
    1146:	6033      	str	r3, [r6, #0]
    1148:	4630      	mov	r0, r6
    114a:	f000 f885 	bl	1258 <__malloc_unlock>
    114e:	e7e4      	b.n	111a <_malloc_r+0x1e>
    1150:	680b      	ldr	r3, [r1, #0]
    1152:	1b5b      	subs	r3, r3, r5
    1154:	d41a      	bmi.n	118c <_malloc_r+0x90>
    1156:	2b0b      	cmp	r3, #11
    1158:	d90f      	bls.n	117a <_malloc_r+0x7e>
    115a:	600b      	str	r3, [r1, #0]
    115c:	50cd      	str	r5, [r1, r3]
    115e:	18cc      	adds	r4, r1, r3
    1160:	4630      	mov	r0, r6
    1162:	f000 f879 	bl	1258 <__malloc_unlock>
    1166:	f104 000b 	add.w	r0, r4, #11
    116a:	1d23      	adds	r3, r4, #4
    116c:	f020 0007 	bic.w	r0, r0, #7
    1170:	1ac3      	subs	r3, r0, r3
    1172:	d01b      	beq.n	11ac <_malloc_r+0xb0>
    1174:	425a      	negs	r2, r3
    1176:	50e2      	str	r2, [r4, r3]
    1178:	bd70      	pop	{r4, r5, r6, pc}
    117a:	428c      	cmp	r4, r1
    117c:	bf0d      	iteet	eq
    117e:	6863      	ldreq	r3, [r4, #4]
    1180:	684b      	ldrne	r3, [r1, #4]
    1182:	6063      	strne	r3, [r4, #4]
    1184:	6013      	streq	r3, [r2, #0]
    1186:	bf18      	it	ne
    1188:	460c      	movne	r4, r1
    118a:	e7e9      	b.n	1160 <_malloc_r+0x64>
    118c:	460c      	mov	r4, r1
    118e:	6849      	ldr	r1, [r1, #4]
    1190:	e7ca      	b.n	1128 <_malloc_r+0x2c>
    1192:	1cc4      	adds	r4, r0, #3
    1194:	f024 0403 	bic.w	r4, r4, #3
    1198:	42a0      	cmp	r0, r4
    119a:	d005      	beq.n	11a8 <_malloc_r+0xac>
    119c:	1a21      	subs	r1, r4, r0
    119e:	4630      	mov	r0, r6
    11a0:	f000 f80a 	bl	11b8 <_sbrk_r>
    11a4:	3001      	adds	r0, #1
    11a6:	d0cd      	beq.n	1144 <_malloc_r+0x48>
    11a8:	6025      	str	r5, [r4, #0]
    11aa:	e7d9      	b.n	1160 <_malloc_r+0x64>
    11ac:	bd70      	pop	{r4, r5, r6, pc}
    11ae:	bf00      	nop
    11b0:	200000a8 	.word	0x200000a8
    11b4:	200000ac 	.word	0x200000ac

000011b8 <_sbrk_r>:
    11b8:	b538      	push	{r3, r4, r5, lr}
    11ba:	4c06      	ldr	r4, [pc, #24]	; (11d4 <_sbrk_r+0x1c>)
    11bc:	2300      	movs	r3, #0
    11be:	4605      	mov	r5, r0
    11c0:	4608      	mov	r0, r1
    11c2:	6023      	str	r3, [r4, #0]
    11c4:	f7ff fb96 	bl	8f4 <_sbrk>
    11c8:	1c43      	adds	r3, r0, #1
    11ca:	d102      	bne.n	11d2 <_sbrk_r+0x1a>
    11cc:	6823      	ldr	r3, [r4, #0]
    11ce:	b103      	cbz	r3, 11d2 <_sbrk_r+0x1a>
    11d0:	602b      	str	r3, [r5, #0]
    11d2:	bd38      	pop	{r3, r4, r5, pc}
    11d4:	20000214 	.word	0x20000214

000011d8 <strcmp>:
    11d8:	f810 2b01 	ldrb.w	r2, [r0], #1
    11dc:	f811 3b01 	ldrb.w	r3, [r1], #1
    11e0:	2a01      	cmp	r2, #1
    11e2:	bf28      	it	cs
    11e4:	429a      	cmpcs	r2, r3
    11e6:	d0f7      	beq.n	11d8 <strcmp>
    11e8:	1ad0      	subs	r0, r2, r3
    11ea:	4770      	bx	lr

000011ec <strlen>:
    11ec:	4603      	mov	r3, r0
    11ee:	f813 2b01 	ldrb.w	r2, [r3], #1
    11f2:	2a00      	cmp	r2, #0
    11f4:	d1fb      	bne.n	11ee <strlen+0x2>
    11f6:	1a18      	subs	r0, r3, r0
    11f8:	3801      	subs	r0, #1
    11fa:	4770      	bx	lr

000011fc <strncmp>:
    11fc:	b510      	push	{r4, lr}
    11fe:	b16a      	cbz	r2, 121c <strncmp+0x20>
    1200:	3901      	subs	r1, #1
    1202:	1884      	adds	r4, r0, r2
    1204:	f810 3b01 	ldrb.w	r3, [r0], #1
    1208:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    120c:	4293      	cmp	r3, r2
    120e:	d103      	bne.n	1218 <strncmp+0x1c>
    1210:	42a0      	cmp	r0, r4
    1212:	d001      	beq.n	1218 <strncmp+0x1c>
    1214:	2b00      	cmp	r3, #0
    1216:	d1f5      	bne.n	1204 <strncmp+0x8>
    1218:	1a98      	subs	r0, r3, r2
    121a:	bd10      	pop	{r4, pc}
    121c:	4610      	mov	r0, r2
    121e:	bd10      	pop	{r4, pc}

00001220 <strstr>:
    1220:	b5f0      	push	{r4, r5, r6, r7, lr}
    1222:	7803      	ldrb	r3, [r0, #0]
    1224:	b133      	cbz	r3, 1234 <strstr+0x14>
    1226:	4603      	mov	r3, r0
    1228:	4618      	mov	r0, r3
    122a:	1c5e      	adds	r6, r3, #1
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	b933      	cbnz	r3, 123e <strstr+0x1e>
    1230:	4618      	mov	r0, r3
    1232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1234:	780b      	ldrb	r3, [r1, #0]
    1236:	2b00      	cmp	r3, #0
    1238:	bf18      	it	ne
    123a:	2000      	movne	r0, #0
    123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    123e:	1e4d      	subs	r5, r1, #1
    1240:	1e44      	subs	r4, r0, #1
    1242:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    1246:	2a00      	cmp	r2, #0
    1248:	d0f3      	beq.n	1232 <strstr+0x12>
    124a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    124e:	4297      	cmp	r7, r2
    1250:	4633      	mov	r3, r6
    1252:	d0f6      	beq.n	1242 <strstr+0x22>
    1254:	e7e8      	b.n	1228 <strstr+0x8>

00001256 <__malloc_lock>:
    1256:	4770      	bx	lr

00001258 <__malloc_unlock>:
    1258:	4770      	bx	lr
    125a:	0000      	movs	r0, r0
    125c:	682f2e2e 	.word	0x682f2e2e
    1260:	732f6c61 	.word	0x732f6c61
    1264:	682f6372 	.word	0x682f6372
    1268:	695f6c61 	.word	0x695f6c61
    126c:	00632e6f 	.word	0x00632e6f
    1270:	682f2e2e 	.word	0x682f2e2e
    1274:	732f6c61 	.word	0x732f6c61
    1278:	682f6372 	.word	0x682f6372
    127c:	755f6c61 	.word	0x755f6c61
    1280:	74726173 	.word	0x74726173
    1284:	7973615f 	.word	0x7973615f
    1288:	632e636e 	.word	0x632e636e
    128c:	00000000 	.word	0x00000000
    1290:	682f2e2e 	.word	0x682f2e2e
    1294:	752f6c61 	.word	0x752f6c61
    1298:	736c6974 	.word	0x736c6974
    129c:	6372732f 	.word	0x6372732f
    12a0:	6974752f 	.word	0x6974752f
    12a4:	725f736c 	.word	0x725f736c
    12a8:	62676e69 	.word	0x62676e69
    12ac:	65666675 	.word	0x65666675
    12b0:	00632e72 	.word	0x00632e72
    12b4:	40003000 	.word	0x40003000
    12b8:	40003400 	.word	0x40003400
    12bc:	41012000 	.word	0x41012000
    12c0:	41014000 	.word	0x41014000
    12c4:	43000000 	.word	0x43000000
    12c8:	43000400 	.word	0x43000400

000012cc <_usarts>:
    12cc:	00000004 40100004 00030040 00700002     .......@@.....p.
    12dc:	0000f62b 00000000                       +.......

000012e4 <_i2cms>:
	...

000012fc <_i2css>:
	...

0000130c <sercomspi_regs>:
	...
    1320:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1330:	65735f6c 6d6f6372 0000632e 3064656c     l_sercom.c..led0
    1340:	32787561 0000003d 00000a0d 00006e6f     aux2=.......on..
    1350:	0066666f 0d4b4341 0000000a 43414f4e     off.ACK.....NOAC
    1360:	000a0d4b                                K...

00001364 <__sf_fake_stderr>:
	...

00001384 <__sf_fake_stdin>:
	...

000013a4 <__sf_fake_stdout>:
	...

000013c4 <_init>:
    13c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13c6:	bf00      	nop
    13c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    13ca:	bc08      	pop	{r3}
    13cc:	469e      	mov	lr, r3
    13ce:	4770      	bx	lr

000013d0 <__init_array_start>:
    13d0:	00000289 	.word	0x00000289

000013d4 <_fini>:
    13d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13d6:	bf00      	nop
    13d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    13da:	bc08      	pop	{r3}
    13dc:	469e      	mov	lr, r3
    13de:	4770      	bx	lr

000013e0 <__fini_array_start>:
    13e0:	00000265 	.word	0x00000265
