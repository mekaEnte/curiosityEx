
mainCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a28  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00001a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          00000494  20000064  00001a8c  00020064  2**2
                  ALLOC
  5 .stack        00010000  200004f8  00001f20  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001bfd7  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a22  00000000  00000000  0003c0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000aa3e  00000000  00000000  0003eae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a08  00000000  00000000  00049522  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a90  00000000  00000000  00049f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d934  00000000  00000000  0004a9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000103ca  00000000  00000000  000782ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001008df  00000000  00000000  000886b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001c28  00000000  00000000  00188f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 04 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	0d 0c 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 b1 0f 00 00 c5 0f 00 00 d9 0f 00 00     ................
     134:	ed 0f 00 00 01 10 00 00 15 10 00 00 29 10 00 00     ............)...
     144:	3d 10 00 00 51 10 00 00 65 10 00 00 79 10 00 00     =...Q...e...y...
     154:	8d 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     178:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     188:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
     198:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f8:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     208:	00 00 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     218:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     228:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     238:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     248:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     258:	dd 02 00 00 dd 02 00 00 00 00 00 00                 ............

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000064 	.word	0x20000064
     280:	00000000 	.word	0x00000000
     284:	00001a28 	.word	0x00001a28

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001a28 	.word	0x00001a28
     2c4:	20000068 	.word	0x20000068
     2c8:	00001a28 	.word	0x00001a28
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	0000055d 	.word	0x0000055d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00001a28 	.word	0x00001a28
     340:	20000064 	.word	0x20000064
     344:	20000064 	.word	0x20000064
     348:	200004f8 	.word	0x200004f8
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00001649 	.word	0x00001649
     358:	000013bd 	.word	0x000013bd

0000035c <SERIAL_AUXTWO_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     35c:	4b06      	ldr	r3, [pc, #24]	; (378 <SERIAL_AUXTWO_CLOCK_init+0x1c>)
     35e:	2240      	movs	r2, #64	; 0x40
     360:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     364:	2243      	movs	r2, #67	; 0x43
     366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     36a:	4a04      	ldr	r2, [pc, #16]	; (37c <SERIAL_AUXTWO_CLOCK_init+0x20>)
     36c:	6993      	ldr	r3, [r2, #24]
     36e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     372:	6193      	str	r3, [r2, #24]
     374:	4770      	bx	lr
     376:	bf00      	nop
     378:	40001c00 	.word	0x40001c00
     37c:	40000800 	.word	0x40000800

00000380 <SERIAL_AUXTWO_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <SERIAL_AUXTWO_PORT_init+0x44>)
     382:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     386:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     392:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     396:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     39a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ae:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ba:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3be:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     3c2:	4770      	bx	lr
     3c4:	41008000 	.word	0x41008000

000003c8 <SERIAL_AUXTWO_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void SERIAL_AUXTWO_init(void)
{
     3c8:	b510      	push	{r4, lr}
     3ca:	b082      	sub	sp, #8
	SERIAL_AUXTWO_CLOCK_init();
     3cc:	4b06      	ldr	r3, [pc, #24]	; (3e8 <SERIAL_AUXTWO_init+0x20>)
     3ce:	4798      	blx	r3
	usart_async_init(&SERIAL_AUXTWO, SERCOM3, SERIAL_AUXTWO_buffer, SERIAL_AUXTWO_BUFFER_SIZE, (void *)NULL);
     3d0:	2300      	movs	r3, #0
     3d2:	9300      	str	r3, [sp, #0]
     3d4:	2310      	movs	r3, #16
     3d6:	4a05      	ldr	r2, [pc, #20]	; (3ec <SERIAL_AUXTWO_init+0x24>)
     3d8:	4905      	ldr	r1, [pc, #20]	; (3f0 <SERIAL_AUXTWO_init+0x28>)
     3da:	4806      	ldr	r0, [pc, #24]	; (3f4 <SERIAL_AUXTWO_init+0x2c>)
     3dc:	4c06      	ldr	r4, [pc, #24]	; (3f8 <SERIAL_AUXTWO_init+0x30>)
     3de:	47a0      	blx	r4
	SERIAL_AUXTWO_PORT_init();
     3e0:	4b06      	ldr	r3, [pc, #24]	; (3fc <SERIAL_AUXTWO_init+0x34>)
     3e2:	4798      	blx	r3
}
     3e4:	b002      	add	sp, #8
     3e6:	bd10      	pop	{r4, pc}
     3e8:	0000035d 	.word	0x0000035d
     3ec:	20000080 	.word	0x20000080
     3f0:	41014000 	.word	0x41014000
     3f4:	200000e8 	.word	0x200000e8
     3f8:	000007f5 	.word	0x000007f5
     3fc:	00000381 	.word	0x00000381

00000400 <SERIAL_AUXONE_CLOCK_init>:
     400:	4b06      	ldr	r3, [pc, #24]	; (41c <SERIAL_AUXONE_CLOCK_init+0x1c>)
     402:	2240      	movs	r2, #64	; 0x40
     404:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     408:	2243      	movs	r2, #67	; 0x43
     40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     40e:	4a04      	ldr	r2, [pc, #16]	; (420 <SERIAL_AUXONE_CLOCK_init+0x20>)
     410:	6a13      	ldr	r3, [r2, #32]
     412:	f043 0301 	orr.w	r3, r3, #1
     416:	6213      	str	r3, [r2, #32]
     418:	4770      	bx	lr
     41a:	bf00      	nop
     41c:	40001c00 	.word	0x40001c00
     420:	40000800 	.word	0x40000800

00000424 <SERIAL_AUXONE_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	4b10      	ldr	r3, [pc, #64]	; (468 <SERIAL_AUXONE_PORT_init+0x44>)
     426:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     42a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     432:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     436:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     43a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     442:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     446:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     44a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     452:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     456:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     45a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     45e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     462:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     466:	4770      	bx	lr
     468:	41008000 	.word	0x41008000

0000046c <SERIAL_AUXONE_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void SERIAL_AUXONE_init(void)
{
     46c:	b510      	push	{r4, lr}
     46e:	b082      	sub	sp, #8
	SERIAL_AUXONE_CLOCK_init();
     470:	4b07      	ldr	r3, [pc, #28]	; (490 <SERIAL_AUXONE_init+0x24>)
     472:	4798      	blx	r3
	usart_async_init(&SERIAL_AUXONE, SERCOM4, SERIAL_AUXONE_buffer, SERIAL_AUXONE_BUFFER_SIZE, (void *)NULL);
     474:	2300      	movs	r3, #0
     476:	9300      	str	r3, [sp, #0]
     478:	2310      	movs	r3, #16
     47a:	4a06      	ldr	r2, [pc, #24]	; (494 <SERIAL_AUXONE_init+0x28>)
     47c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     480:	4805      	ldr	r0, [pc, #20]	; (498 <SERIAL_AUXONE_init+0x2c>)
     482:	4c06      	ldr	r4, [pc, #24]	; (49c <SERIAL_AUXONE_init+0x30>)
     484:	47a0      	blx	r4
	SERIAL_AUXONE_PORT_init();
     486:	4b06      	ldr	r3, [pc, #24]	; (4a0 <SERIAL_AUXONE_init+0x34>)
     488:	4798      	blx	r3
}
     48a:	b002      	add	sp, #8
     48c:	bd10      	pop	{r4, pc}
     48e:	bf00      	nop
     490:	00000401 	.word	0x00000401
     494:	20000090 	.word	0x20000090
     498:	20000188 	.word	0x20000188
     49c:	000007f5 	.word	0x000007f5
     4a0:	00000425 	.word	0x00000425

000004a4 <SERIAL_PC_CLOCK_init>:
     4a4:	4b06      	ldr	r3, [pc, #24]	; (4c0 <SERIAL_PC_CLOCK_init+0x1c>)
     4a6:	2240      	movs	r2, #64	; 0x40
     4a8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4ac:	2243      	movs	r2, #67	; 0x43
     4ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     4b2:	4a04      	ldr	r2, [pc, #16]	; (4c4 <SERIAL_PC_CLOCK_init+0x20>)
     4b4:	6a13      	ldr	r3, [r2, #32]
     4b6:	f043 0302 	orr.w	r3, r3, #2
     4ba:	6213      	str	r3, [r2, #32]
     4bc:	4770      	bx	lr
     4be:	bf00      	nop
     4c0:	40001c00 	.word	0x40001c00
     4c4:	40000800 	.word	0x40000800

000004c8 <SERIAL_PC_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c8:	4b10      	ldr	r3, [pc, #64]	; (50c <SERIAL_PC_PORT_init+0x44>)
     4ca:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4da:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ea:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4f6:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4fa:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     502:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     506:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     50a:	4770      	bx	lr
     50c:	41008000 	.word	0x41008000

00000510 <SERIAL_PC_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void SERIAL_PC_init(void)
{
     510:	b510      	push	{r4, lr}
     512:	b082      	sub	sp, #8
	SERIAL_PC_CLOCK_init();
     514:	4b06      	ldr	r3, [pc, #24]	; (530 <SERIAL_PC_init+0x20>)
     516:	4798      	blx	r3
	usart_async_init(&SERIAL_PC, SERCOM5, SERIAL_PC_buffer, SERIAL_PC_BUFFER_SIZE, (void *)NULL);
     518:	2300      	movs	r3, #0
     51a:	9300      	str	r3, [sp, #0]
     51c:	2310      	movs	r3, #16
     51e:	4a05      	ldr	r2, [pc, #20]	; (534 <SERIAL_PC_init+0x24>)
     520:	4905      	ldr	r1, [pc, #20]	; (538 <SERIAL_PC_init+0x28>)
     522:	4806      	ldr	r0, [pc, #24]	; (53c <SERIAL_PC_init+0x2c>)
     524:	4c06      	ldr	r4, [pc, #24]	; (540 <SERIAL_PC_init+0x30>)
     526:	47a0      	blx	r4
	SERIAL_PC_PORT_init();
     528:	4b06      	ldr	r3, [pc, #24]	; (544 <SERIAL_PC_init+0x34>)
     52a:	4798      	blx	r3
}
     52c:	b002      	add	sp, #8
     52e:	bd10      	pop	{r4, pc}
     530:	000004a5 	.word	0x000004a5
     534:	200000a0 	.word	0x200000a0
     538:	43000400 	.word	0x43000400
     53c:	20000138 	.word	0x20000138
     540:	000007f5 	.word	0x000007f5
     544:	000004c9 	.word	0x000004c9

00000548 <delay_driver_init>:

void delay_driver_init(void)
{
     548:	b508      	push	{r3, lr}
	delay_init(SysTick);
     54a:	4802      	ldr	r0, [pc, #8]	; (554 <delay_driver_init+0xc>)
     54c:	4b02      	ldr	r3, [pc, #8]	; (558 <delay_driver_init+0x10>)
     54e:	4798      	blx	r3
     550:	bd08      	pop	{r3, pc}
     552:	bf00      	nop
     554:	e000e010 	.word	0xe000e010
     558:	00000625 	.word	0x00000625

0000055c <system_init>:
}

void system_init(void)
{
     55c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     55e:	4b0e      	ldr	r3, [pc, #56]	; (598 <system_init+0x3c>)
     560:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     562:	4b0e      	ldr	r3, [pc, #56]	; (59c <system_init+0x40>)
     564:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     568:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     56a:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     56c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     570:	629a      	str	r2, [r3, #40]	; 0x28
     572:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     576:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     578:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     57c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	SERIAL_AUXTWO_init();
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <system_init+0x44>)
     586:	4798      	blx	r3
	SERIAL_AUXONE_init();
     588:	4b06      	ldr	r3, [pc, #24]	; (5a4 <system_init+0x48>)
     58a:	4798      	blx	r3
	SERIAL_PC_init();
     58c:	4b06      	ldr	r3, [pc, #24]	; (5a8 <system_init+0x4c>)
     58e:	4798      	blx	r3

	delay_driver_init();
     590:	4b06      	ldr	r3, [pc, #24]	; (5ac <system_init+0x50>)
     592:	4798      	blx	r3
     594:	bd08      	pop	{r3, pc}
     596:	bf00      	nop
     598:	00000a71 	.word	0x00000a71
     59c:	41008000 	.word	0x41008000
     5a0:	000003c9 	.word	0x000003c9
     5a4:	0000046d 	.word	0x0000046d
     5a8:	00000511 	.word	0x00000511
     5ac:	00000549 	.word	0x00000549

000005b0 <getStrBetweenTwoStr>:
#include <getDataFromStr.h>
#include <string.h>
#include <stdlib.h>

char* getStrBetweenTwoStr(const char *srcString, const char *strStart, const char *strEnd) {
     5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5b2:	4605      	mov	r5, r0
     5b4:	460e      	mov	r6, r1
     5b6:	4617      	mov	r7, r2
	char *target = NULL;
	char *start, *end;
	start = strstr(srcString, strStart);
     5b8:	4b0f      	ldr	r3, [pc, #60]	; (5f8 <getStrBetweenTwoStr+0x48>)
     5ba:	4798      	blx	r3
	if(start) {
     5bc:	4604      	mov	r4, r0
     5be:	b1b0      	cbz	r0, 5ee <getStrBetweenTwoStr+0x3e>
		start += strlen(strStart);
     5c0:	4630      	mov	r0, r6
     5c2:	4b0e      	ldr	r3, [pc, #56]	; (5fc <getStrBetweenTwoStr+0x4c>)
     5c4:	4798      	blx	r3
     5c6:	1826      	adds	r6, r4, r0
		end = strstr(srcString, strEnd);
     5c8:	4639      	mov	r1, r7
     5ca:	4628      	mov	r0, r5
     5cc:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <getStrBetweenTwoStr+0x48>)
     5ce:	4798      	blx	r3
		if(end) {
     5d0:	4604      	mov	r4, r0
     5d2:	b160      	cbz	r0, 5ee <getStrBetweenTwoStr+0x3e>
			int sizeData = end-start;
     5d4:	1b85      	subs	r5, r0, r6
			if(sizeData > 0) {
     5d6:	2d00      	cmp	r5, #0
     5d8:	dd0b      	ble.n	5f2 <getStrBetweenTwoStr+0x42>
				target = (char *)malloc(sizeData + 1);
     5da:	1c68      	adds	r0, r5, #1
     5dc:	4b08      	ldr	r3, [pc, #32]	; (600 <getStrBetweenTwoStr+0x50>)
     5de:	4798      	blx	r3
     5e0:	4604      	mov	r4, r0
				memcpy(target, start, sizeData);
     5e2:	462a      	mov	r2, r5
     5e4:	4631      	mov	r1, r6
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <getStrBetweenTwoStr+0x54>)
     5e8:	4798      	blx	r3
				target[sizeData] = '\0';
     5ea:	2300      	movs	r3, #0
     5ec:	5563      	strb	r3, [r4, r5]
			}
		}
	}
	return target;
}
     5ee:	4620      	mov	r0, r4
     5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *target = NULL;
     5f2:	2400      	movs	r4, #0
	return target;
     5f4:	e7fb      	b.n	5ee <getStrBetweenTwoStr+0x3e>
     5f6:	bf00      	nop
     5f8:	000017dd 	.word	0x000017dd
     5fc:	000017a9 	.word	0x000017a9
     600:	00001691 	.word	0x00001691
     604:	000016a1 	.word	0x000016a1

00000608 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     608:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     60c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     60e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     610:	f3bf 8f5f 	dmb	sy
     614:	4770      	bx	lr

00000616 <atomic_leave_critical>:
     616:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     61a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     61c:	f383 8810 	msr	PRIMASK, r3
     620:	4770      	bx	lr
	...

00000624 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     624:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     626:	4b02      	ldr	r3, [pc, #8]	; (630 <delay_init+0xc>)
     628:	6018      	str	r0, [r3, #0]
     62a:	4b02      	ldr	r3, [pc, #8]	; (634 <delay_init+0x10>)
     62c:	4798      	blx	r3
     62e:	bd08      	pop	{r3, pc}
     630:	200000b0 	.word	0x200000b0
     634:	000010b5 	.word	0x000010b5

00000638 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     638:	b570      	push	{r4, r5, r6, lr}
     63a:	460d      	mov	r5, r1
     63c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     63e:	4604      	mov	r4, r0
     640:	b168      	cbz	r0, 65e <io_write+0x26>
     642:	b151      	cbz	r1, 65a <io_write+0x22>
     644:	2001      	movs	r0, #1
     646:	2234      	movs	r2, #52	; 0x34
     648:	4906      	ldr	r1, [pc, #24]	; (664 <io_write+0x2c>)
     64a:	4b07      	ldr	r3, [pc, #28]	; (668 <io_write+0x30>)
     64c:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     64e:	6823      	ldr	r3, [r4, #0]
     650:	4632      	mov	r2, r6
     652:	4629      	mov	r1, r5
     654:	4620      	mov	r0, r4
     656:	4798      	blx	r3
}
     658:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     65a:	2000      	movs	r0, #0
     65c:	e7f3      	b.n	646 <io_write+0xe>
     65e:	2000      	movs	r0, #0
     660:	e7f1      	b.n	646 <io_write+0xe>
     662:	bf00      	nop
     664:	00001818 	.word	0x00001818
     668:	00000955 	.word	0x00000955

0000066c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     66c:	b570      	push	{r4, r5, r6, lr}
     66e:	460d      	mov	r5, r1
     670:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     672:	4604      	mov	r4, r0
     674:	b168      	cbz	r0, 692 <io_read+0x26>
     676:	b151      	cbz	r1, 68e <io_read+0x22>
     678:	2001      	movs	r0, #1
     67a:	223d      	movs	r2, #61	; 0x3d
     67c:	4906      	ldr	r1, [pc, #24]	; (698 <io_read+0x2c>)
     67e:	4b07      	ldr	r3, [pc, #28]	; (69c <io_read+0x30>)
     680:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     682:	6863      	ldr	r3, [r4, #4]
     684:	4632      	mov	r2, r6
     686:	4629      	mov	r1, r5
     688:	4620      	mov	r0, r4
     68a:	4798      	blx	r3
}
     68c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     68e:	2000      	movs	r0, #0
     690:	e7f3      	b.n	67a <io_read+0xe>
     692:	2000      	movs	r0, #0
     694:	e7f1      	b.n	67a <io_read+0xe>
     696:	bf00      	nop
     698:	00001818 	.word	0x00001818
     69c:	00000955 	.word	0x00000955

000006a0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     6a0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     6a2:	2300      	movs	r3, #0
     6a4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     6a6:	69c3      	ldr	r3, [r0, #28]
     6a8:	b11b      	cbz	r3, 6b2 <usart_transmission_complete+0x12>
     6aa:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     6ae:	4610      	mov	r0, r2
     6b0:	4798      	blx	r3
     6b2:	bd08      	pop	{r3, pc}

000006b4 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     6b4:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     6b6:	2300      	movs	r3, #0
     6b8:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     6ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
     6bc:	b11b      	cbz	r3, 6c6 <usart_error+0x12>
     6be:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     6c2:	4610      	mov	r0, r2
     6c4:	4798      	blx	r3
     6c6:	bd08      	pop	{r3, pc}

000006c8 <usart_fill_rx_buffer>:
{
     6c8:	b538      	push	{r3, r4, r5, lr}
     6ca:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     6cc:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
     6d0:	302c      	adds	r0, #44	; 0x2c
     6d2:	4b03      	ldr	r3, [pc, #12]	; (6e0 <usart_fill_rx_buffer+0x18>)
     6d4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     6d6:	6a23      	ldr	r3, [r4, #32]
     6d8:	b10b      	cbz	r3, 6de <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     6da:	4628      	mov	r0, r5
     6dc:	4798      	blx	r3
     6de:	bd38      	pop	{r3, r4, r5, pc}
     6e0:	000009e9 	.word	0x000009e9

000006e4 <usart_async_write>:
{
     6e4:	b570      	push	{r4, r5, r6, lr}
     6e6:	460e      	mov	r6, r1
     6e8:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
     6ea:	4604      	mov	r4, r0
     6ec:	b1d8      	cbz	r0, 726 <usart_async_write+0x42>
     6ee:	b1e1      	cbz	r1, 72a <usart_async_write+0x46>
     6f0:	b9ea      	cbnz	r2, 72e <usart_async_write+0x4a>
     6f2:	2000      	movs	r0, #0
     6f4:	f240 123b 	movw	r2, #315	; 0x13b
     6f8:	490f      	ldr	r1, [pc, #60]	; (738 <usart_async_write+0x54>)
     6fa:	4b10      	ldr	r3, [pc, #64]	; (73c <usart_async_write+0x58>)
     6fc:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     6fe:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     702:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     706:	429a      	cmp	r2, r3
     708:	d113      	bne.n	732 <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
     70a:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     70c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
     710:	2300      	movs	r3, #0
     712:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     716:	2301      	movs	r3, #1
     718:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     71a:	f104 0008 	add.w	r0, r4, #8
     71e:	4b08      	ldr	r3, [pc, #32]	; (740 <usart_async_write+0x5c>)
     720:	4798      	blx	r3
	return (int32_t)length;
     722:	4628      	mov	r0, r5
     724:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     726:	2000      	movs	r0, #0
     728:	e7e4      	b.n	6f4 <usart_async_write+0x10>
     72a:	2000      	movs	r0, #0
     72c:	e7e2      	b.n	6f4 <usart_async_write+0x10>
     72e:	2001      	movs	r0, #1
     730:	e7e0      	b.n	6f4 <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
     732:	f06f 001b 	mvn.w	r0, #27
}
     736:	bd70      	pop	{r4, r5, r6, pc}
     738:	0000182c 	.word	0x0000182c
     73c:	00000955 	.word	0x00000955
     740:	00000f2f 	.word	0x00000f2f

00000744 <usart_process_byte_sent>:
{
     744:	b510      	push	{r4, lr}
     746:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     748:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     74a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
     74e:	4293      	cmp	r3, r2
     750:	d009      	beq.n	766 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     752:	6c02      	ldr	r2, [r0, #64]	; 0x40
     754:	1c59      	adds	r1, r3, #1
     756:	8781      	strh	r1, [r0, #60]	; 0x3c
     758:	5cd1      	ldrb	r1, [r2, r3]
     75a:	4b04      	ldr	r3, [pc, #16]	; (76c <usart_process_byte_sent+0x28>)
     75c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     75e:	4620      	mov	r0, r4
     760:	4b03      	ldr	r3, [pc, #12]	; (770 <usart_process_byte_sent+0x2c>)
     762:	4798      	blx	r3
     764:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     766:	4b03      	ldr	r3, [pc, #12]	; (774 <usart_process_byte_sent+0x30>)
     768:	4798      	blx	r3
     76a:	bd10      	pop	{r4, pc}
     76c:	00000f29 	.word	0x00000f29
     770:	00000f2f 	.word	0x00000f2f
     774:	00000f37 	.word	0x00000f37

00000778 <usart_async_read>:
{
     778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     77c:	b082      	sub	sp, #8
     77e:	4688      	mov	r8, r1
     780:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
     782:	4605      	mov	r5, r0
     784:	b1a0      	cbz	r0, 7b0 <usart_async_read+0x38>
     786:	b1a9      	cbz	r1, 7b4 <usart_async_read+0x3c>
     788:	b9b2      	cbnz	r2, 7b8 <usart_async_read+0x40>
     78a:	2000      	movs	r0, #0
     78c:	f44f 72ac 	mov.w	r2, #344	; 0x158
     790:	4912      	ldr	r1, [pc, #72]	; (7dc <usart_async_read+0x64>)
     792:	4b13      	ldr	r3, [pc, #76]	; (7e0 <usart_async_read+0x68>)
     794:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     796:	a801      	add	r0, sp, #4
     798:	4b12      	ldr	r3, [pc, #72]	; (7e4 <usart_async_read+0x6c>)
     79a:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     79c:	3534      	adds	r5, #52	; 0x34
     79e:	4628      	mov	r0, r5
     7a0:	4b11      	ldr	r3, [pc, #68]	; (7e8 <usart_async_read+0x70>)
     7a2:	4798      	blx	r3
     7a4:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
     7a6:	a801      	add	r0, sp, #4
     7a8:	4b10      	ldr	r3, [pc, #64]	; (7ec <usart_async_read+0x74>)
     7aa:	4798      	blx	r3
	uint16_t                       was_read = 0;
     7ac:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     7ae:	e00b      	b.n	7c8 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
     7b0:	2000      	movs	r0, #0
     7b2:	e7eb      	b.n	78c <usart_async_read+0x14>
     7b4:	2000      	movs	r0, #0
     7b6:	e7e9      	b.n	78c <usart_async_read+0x14>
     7b8:	2001      	movs	r0, #1
     7ba:	e7e7      	b.n	78c <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     7bc:	3401      	adds	r4, #1
     7be:	b2a4      	uxth	r4, r4
     7c0:	4441      	add	r1, r8
     7c2:	4628      	mov	r0, r5
     7c4:	4b0a      	ldr	r3, [pc, #40]	; (7f0 <usart_async_read+0x78>)
     7c6:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     7c8:	4621      	mov	r1, r4
     7ca:	42a7      	cmp	r7, r4
     7cc:	d901      	bls.n	7d2 <usart_async_read+0x5a>
     7ce:	42b4      	cmp	r4, r6
     7d0:	d3f4      	bcc.n	7bc <usart_async_read+0x44>
}
     7d2:	4620      	mov	r0, r4
     7d4:	b002      	add	sp, #8
     7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7da:	bf00      	nop
     7dc:	0000182c 	.word	0x0000182c
     7e0:	00000955 	.word	0x00000955
     7e4:	00000609 	.word	0x00000609
     7e8:	00000a29 	.word	0x00000a29
     7ec:	00000617 	.word	0x00000617
     7f0:	000009a1 	.word	0x000009a1

000007f4 <usart_async_init>:
{
     7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7f6:	460d      	mov	r5, r1
     7f8:	4616      	mov	r6, r2
     7fa:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     7fc:	4604      	mov	r4, r0
     7fe:	b318      	cbz	r0, 848 <usart_async_init+0x54>
     800:	b321      	cbz	r1, 84c <usart_async_init+0x58>
     802:	b32a      	cbz	r2, 850 <usart_async_init+0x5c>
     804:	bb33      	cbnz	r3, 854 <usart_async_init+0x60>
     806:	2000      	movs	r0, #0
     808:	223a      	movs	r2, #58	; 0x3a
     80a:	4915      	ldr	r1, [pc, #84]	; (860 <usart_async_init+0x6c>)
     80c:	4b15      	ldr	r3, [pc, #84]	; (864 <usart_async_init+0x70>)
     80e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     810:	463a      	mov	r2, r7
     812:	4631      	mov	r1, r6
     814:	f104 0034 	add.w	r0, r4, #52	; 0x34
     818:	4b13      	ldr	r3, [pc, #76]	; (868 <usart_async_init+0x74>)
     81a:	4798      	blx	r3
     81c:	b9e0      	cbnz	r0, 858 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
     81e:	4629      	mov	r1, r5
     820:	f104 0008 	add.w	r0, r4, #8
     824:	4b11      	ldr	r3, [pc, #68]	; (86c <usart_async_init+0x78>)
     826:	4798      	blx	r3
	if (init_status) {
     828:	4603      	mov	r3, r0
     82a:	b958      	cbnz	r0, 844 <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
     82c:	4a10      	ldr	r2, [pc, #64]	; (870 <usart_async_init+0x7c>)
     82e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
     830:	4a10      	ldr	r2, [pc, #64]	; (874 <usart_async_init+0x80>)
     832:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     834:	4a10      	ldr	r2, [pc, #64]	; (878 <usart_async_init+0x84>)
     836:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     838:	4a10      	ldr	r2, [pc, #64]	; (87c <usart_async_init+0x88>)
     83a:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     83c:	4a10      	ldr	r2, [pc, #64]	; (880 <usart_async_init+0x8c>)
     83e:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     840:	4a10      	ldr	r2, [pc, #64]	; (884 <usart_async_init+0x90>)
     842:	6162      	str	r2, [r4, #20]
}
     844:	4618      	mov	r0, r3
     846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     848:	2000      	movs	r0, #0
     84a:	e7dd      	b.n	808 <usart_async_init+0x14>
     84c:	2000      	movs	r0, #0
     84e:	e7db      	b.n	808 <usart_async_init+0x14>
     850:	2000      	movs	r0, #0
     852:	e7d9      	b.n	808 <usart_async_init+0x14>
     854:	2001      	movs	r0, #1
     856:	e7d7      	b.n	808 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
     858:	f06f 030c 	mvn.w	r3, #12
     85c:	e7f2      	b.n	844 <usart_async_init+0x50>
     85e:	bf00      	nop
     860:	0000182c 	.word	0x0000182c
     864:	00000955 	.word	0x00000955
     868:	0000095d 	.word	0x0000095d
     86c:	00000e91 	.word	0x00000e91
     870:	00000779 	.word	0x00000779
     874:	000006e5 	.word	0x000006e5
     878:	00000745 	.word	0x00000745
     87c:	000006c9 	.word	0x000006c9
     880:	000006a1 	.word	0x000006a1
     884:	000006b5 	.word	0x000006b5

00000888 <usart_async_enable>:
{
     888:	b510      	push	{r4, lr}
	ASSERT(descr);
     88a:	4604      	mov	r4, r0
     88c:	2261      	movs	r2, #97	; 0x61
     88e:	4906      	ldr	r1, [pc, #24]	; (8a8 <usart_async_enable+0x20>)
     890:	3000      	adds	r0, #0
     892:	bf18      	it	ne
     894:	2001      	movne	r0, #1
     896:	4b05      	ldr	r3, [pc, #20]	; (8ac <usart_async_enable+0x24>)
     898:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     89a:	f104 0008 	add.w	r0, r4, #8
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <usart_async_enable+0x28>)
     8a0:	4798      	blx	r3
}
     8a2:	2000      	movs	r0, #0
     8a4:	bd10      	pop	{r4, pc}
     8a6:	bf00      	nop
     8a8:	0000182c 	.word	0x0000182c
     8ac:	00000955 	.word	0x00000955
     8b0:	00000f15 	.word	0x00000f15

000008b4 <usart_async_get_io_descriptor>:
{
     8b4:	b538      	push	{r3, r4, r5, lr}
     8b6:	460c      	mov	r4, r1
	ASSERT(descr && io);
     8b8:	4605      	mov	r5, r0
     8ba:	b150      	cbz	r0, 8d2 <usart_async_get_io_descriptor+0x1e>
     8bc:	b139      	cbz	r1, 8ce <usart_async_get_io_descriptor+0x1a>
     8be:	2001      	movs	r0, #1
     8c0:	2277      	movs	r2, #119	; 0x77
     8c2:	4905      	ldr	r1, [pc, #20]	; (8d8 <usart_async_get_io_descriptor+0x24>)
     8c4:	4b05      	ldr	r3, [pc, #20]	; (8dc <usart_async_get_io_descriptor+0x28>)
     8c6:	4798      	blx	r3
	*io = &descr->io;
     8c8:	6025      	str	r5, [r4, #0]
}
     8ca:	2000      	movs	r0, #0
     8cc:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && io);
     8ce:	2000      	movs	r0, #0
     8d0:	e7f6      	b.n	8c0 <usart_async_get_io_descriptor+0xc>
     8d2:	2000      	movs	r0, #0
     8d4:	e7f4      	b.n	8c0 <usart_async_get_io_descriptor+0xc>
     8d6:	bf00      	nop
     8d8:	0000182c 	.word	0x0000182c
     8dc:	00000955 	.word	0x00000955

000008e0 <usart_async_register_callback>:
{
     8e0:	b570      	push	{r4, r5, r6, lr}
     8e2:	460c      	mov	r4, r1
     8e4:	4616      	mov	r6, r2
	ASSERT(descr);
     8e6:	4605      	mov	r5, r0
     8e8:	2283      	movs	r2, #131	; 0x83
     8ea:	4917      	ldr	r1, [pc, #92]	; (948 <usart_async_register_callback+0x68>)
     8ec:	3000      	adds	r0, #0
     8ee:	bf18      	it	ne
     8f0:	2001      	movne	r0, #1
     8f2:	4b16      	ldr	r3, [pc, #88]	; (94c <usart_async_register_callback+0x6c>)
     8f4:	4798      	blx	r3
	switch (type) {
     8f6:	2c01      	cmp	r4, #1
     8f8:	d010      	beq.n	91c <usart_async_register_callback+0x3c>
     8fa:	b124      	cbz	r4, 906 <usart_async_register_callback+0x26>
     8fc:	2c02      	cmp	r4, #2
     8fe:	d018      	beq.n	932 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
     900:	f06f 000c 	mvn.w	r0, #12
}
     904:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
     906:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     908:	1c32      	adds	r2, r6, #0
     90a:	bf18      	it	ne
     90c:	2201      	movne	r2, #1
     90e:	2101      	movs	r1, #1
     910:	f105 0008 	add.w	r0, r5, #8
     914:	4b0e      	ldr	r3, [pc, #56]	; (950 <usart_async_register_callback+0x70>)
     916:	4798      	blx	r3
	return ERR_NONE;
     918:	2000      	movs	r0, #0
		break;
     91a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     91c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     91e:	1c32      	adds	r2, r6, #0
     920:	bf18      	it	ne
     922:	2201      	movne	r2, #1
     924:	2102      	movs	r1, #2
     926:	f105 0008 	add.w	r0, r5, #8
     92a:	4b09      	ldr	r3, [pc, #36]	; (950 <usart_async_register_callback+0x70>)
     92c:	4798      	blx	r3
	return ERR_NONE;
     92e:	2000      	movs	r0, #0
		break;
     930:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
     932:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     934:	1c32      	adds	r2, r6, #0
     936:	bf18      	it	ne
     938:	2201      	movne	r2, #1
     93a:	2103      	movs	r1, #3
     93c:	f105 0008 	add.w	r0, r5, #8
     940:	4b03      	ldr	r3, [pc, #12]	; (950 <usart_async_register_callback+0x70>)
     942:	4798      	blx	r3
	return ERR_NONE;
     944:	2000      	movs	r0, #0
		break;
     946:	bd70      	pop	{r4, r5, r6, pc}
     948:	0000182c 	.word	0x0000182c
     94c:	00000955 	.word	0x00000955
     950:	00000f41 	.word	0x00000f41

00000954 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     954:	b900      	cbnz	r0, 958 <assert+0x4>
		__asm("BKPT #0");
     956:	be00      	bkpt	0x0000
     958:	4770      	bx	lr
	...

0000095c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     95c:	b570      	push	{r4, r5, r6, lr}
     95e:	460e      	mov	r6, r1
     960:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     962:	4604      	mov	r4, r0
     964:	b178      	cbz	r0, 986 <ringbuffer_init+0x2a>
     966:	b181      	cbz	r1, 98a <ringbuffer_init+0x2e>
     968:	b98a      	cbnz	r2, 98e <ringbuffer_init+0x32>
     96a:	2000      	movs	r0, #0
     96c:	2228      	movs	r2, #40	; 0x28
     96e:	490a      	ldr	r1, [pc, #40]	; (998 <ringbuffer_init+0x3c>)
     970:	4b0a      	ldr	r3, [pc, #40]	; (99c <ringbuffer_init+0x40>)
     972:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     974:	1e6b      	subs	r3, r5, #1
     976:	421d      	tst	r5, r3
     978:	d10b      	bne.n	992 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     97a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     97c:	2000      	movs	r0, #0
     97e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     980:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     982:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     984:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     986:	2000      	movs	r0, #0
     988:	e7f0      	b.n	96c <ringbuffer_init+0x10>
     98a:	2000      	movs	r0, #0
     98c:	e7ee      	b.n	96c <ringbuffer_init+0x10>
     98e:	2001      	movs	r0, #1
     990:	e7ec      	b.n	96c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     992:	f06f 000c 	mvn.w	r0, #12
}
     996:	bd70      	pop	{r4, r5, r6, pc}
     998:	0000184c 	.word	0x0000184c
     99c:	00000955 	.word	0x00000955

000009a0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     9a0:	b538      	push	{r3, r4, r5, lr}
     9a2:	460d      	mov	r5, r1
	ASSERT(rb && data);
     9a4:	4604      	mov	r4, r0
     9a6:	b1a8      	cbz	r0, 9d4 <ringbuffer_get+0x34>
     9a8:	b191      	cbz	r1, 9d0 <ringbuffer_get+0x30>
     9aa:	2001      	movs	r0, #1
     9ac:	2240      	movs	r2, #64	; 0x40
     9ae:	490c      	ldr	r1, [pc, #48]	; (9e0 <ringbuffer_get+0x40>)
     9b0:	4b0c      	ldr	r3, [pc, #48]	; (9e4 <ringbuffer_get+0x44>)
     9b2:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     9b4:	68e2      	ldr	r2, [r4, #12]
     9b6:	68a3      	ldr	r3, [r4, #8]
     9b8:	429a      	cmp	r2, r3
     9ba:	d00d      	beq.n	9d8 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
     9bc:	6822      	ldr	r2, [r4, #0]
     9be:	6861      	ldr	r1, [r4, #4]
     9c0:	400b      	ands	r3, r1
     9c2:	5cd3      	ldrb	r3, [r2, r3]
     9c4:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     9c6:	68a3      	ldr	r3, [r4, #8]
     9c8:	3301      	adds	r3, #1
     9ca:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     9cc:	2000      	movs	r0, #0
     9ce:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
     9d0:	2000      	movs	r0, #0
     9d2:	e7eb      	b.n	9ac <ringbuffer_get+0xc>
     9d4:	2000      	movs	r0, #0
     9d6:	e7e9      	b.n	9ac <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
     9d8:	f06f 0009 	mvn.w	r0, #9
}
     9dc:	bd38      	pop	{r3, r4, r5, pc}
     9de:	bf00      	nop
     9e0:	0000184c 	.word	0x0000184c
     9e4:	00000955 	.word	0x00000955

000009e8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     9e8:	b538      	push	{r3, r4, r5, lr}
     9ea:	460d      	mov	r5, r1
	ASSERT(rb);
     9ec:	4604      	mov	r4, r0
     9ee:	2251      	movs	r2, #81	; 0x51
     9f0:	490b      	ldr	r1, [pc, #44]	; (a20 <ringbuffer_put+0x38>)
     9f2:	3000      	adds	r0, #0
     9f4:	bf18      	it	ne
     9f6:	2001      	movne	r0, #1
     9f8:	4b0a      	ldr	r3, [pc, #40]	; (a24 <ringbuffer_put+0x3c>)
     9fa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     9fc:	6822      	ldr	r2, [r4, #0]
     9fe:	68e3      	ldr	r3, [r4, #12]
     a00:	6861      	ldr	r1, [r4, #4]
     a02:	400b      	ands	r3, r1
     a04:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     a06:	68e3      	ldr	r3, [r4, #12]
     a08:	68a2      	ldr	r2, [r4, #8]
     a0a:	1a9a      	subs	r2, r3, r2
     a0c:	6861      	ldr	r1, [r4, #4]
     a0e:	428a      	cmp	r2, r1
     a10:	d901      	bls.n	a16 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     a12:	1a59      	subs	r1, r3, r1
     a14:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     a16:	3301      	adds	r3, #1
     a18:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     a1a:	2000      	movs	r0, #0
     a1c:	bd38      	pop	{r3, r4, r5, pc}
     a1e:	bf00      	nop
     a20:	0000184c 	.word	0x0000184c
     a24:	00000955 	.word	0x00000955

00000a28 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     a28:	b510      	push	{r4, lr}
	ASSERT(rb);
     a2a:	4604      	mov	r4, r0
     a2c:	2267      	movs	r2, #103	; 0x67
     a2e:	4905      	ldr	r1, [pc, #20]	; (a44 <ringbuffer_num+0x1c>)
     a30:	3000      	adds	r0, #0
     a32:	bf18      	it	ne
     a34:	2001      	movne	r0, #1
     a36:	4b04      	ldr	r3, [pc, #16]	; (a48 <ringbuffer_num+0x20>)
     a38:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     a3a:	68e0      	ldr	r0, [r4, #12]
     a3c:	68a3      	ldr	r3, [r4, #8]
}
     a3e:	1ac0      	subs	r0, r0, r3
     a40:	bd10      	pop	{r4, pc}
     a42:	bf00      	nop
     a44:	0000184c 	.word	0x0000184c
     a48:	00000955 	.word	0x00000955

00000a4c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     a4c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     a4e:	4a06      	ldr	r2, [pc, #24]	; (a68 <_sbrk+0x1c>)
     a50:	6812      	ldr	r2, [r2, #0]
     a52:	b122      	cbz	r2, a5e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     a54:	4a04      	ldr	r2, [pc, #16]	; (a68 <_sbrk+0x1c>)
     a56:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     a58:	4403      	add	r3, r0
     a5a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     a5c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     a5e:	4903      	ldr	r1, [pc, #12]	; (a6c <_sbrk+0x20>)
     a60:	4a01      	ldr	r2, [pc, #4]	; (a68 <_sbrk+0x1c>)
     a62:	6011      	str	r1, [r2, #0]
     a64:	e7f6      	b.n	a54 <_sbrk+0x8>
     a66:	bf00      	nop
     a68:	200000b4 	.word	0x200000b4
     a6c:	200104f8 	.word	0x200104f8

00000a70 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a70:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     a72:	4a0a      	ldr	r2, [pc, #40]	; (a9c <_init_chip+0x2c>)
     a74:	8813      	ldrh	r3, [r2, #0]
     a76:	b29b      	uxth	r3, r3
     a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     a7c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     a7e:	4b08      	ldr	r3, [pc, #32]	; (aa0 <_init_chip+0x30>)
     a80:	4798      	blx	r3
	_oscctrl_init_sources();
     a82:	4b08      	ldr	r3, [pc, #32]	; (aa4 <_init_chip+0x34>)
     a84:	4798      	blx	r3
	_mclk_init();
     a86:	4b08      	ldr	r3, [pc, #32]	; (aa8 <_init_chip+0x38>)
     a88:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     a8a:	2008      	movs	r0, #8
     a8c:	4c07      	ldr	r4, [pc, #28]	; (aac <_init_chip+0x3c>)
     a8e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <_init_chip+0x40>)
     a92:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a94:	f640 70f7 	movw	r0, #4087	; 0xff7
     a98:	47a0      	blx	r4
     a9a:	bd10      	pop	{r4, pc}
     a9c:	41004000 	.word	0x41004000
     aa0:	00000b01 	.word	0x00000b01
     aa4:	00000b21 	.word	0x00000b21
     aa8:	00000af5 	.word	0x00000af5
     aac:	00000ab5 	.word	0x00000ab5
     ab0:	00000b25 	.word	0x00000b25

00000ab4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ab4:	f010 0f01 	tst.w	r0, #1
     ab8:	d008      	beq.n	acc <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     aba:	4a0b      	ldr	r2, [pc, #44]	; (ae8 <_gclk_init_generators_by_fref+0x34>)
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <_gclk_init_generators_by_fref+0x38>)
     abe:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ac0:	4b0a      	ldr	r3, [pc, #40]	; (aec <_gclk_init_generators_by_fref+0x38>)
     ac2:	685a      	ldr	r2, [r3, #4]
     ac4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     ac8:	421a      	tst	r2, r3
     aca:	d1f9      	bne.n	ac0 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     acc:	f010 0f08 	tst.w	r0, #8
     ad0:	d008      	beq.n	ae4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ad2:	4a07      	ldr	r2, [pc, #28]	; (af0 <_gclk_init_generators_by_fref+0x3c>)
     ad4:	4b05      	ldr	r3, [pc, #20]	; (aec <_gclk_init_generators_by_fref+0x38>)
     ad6:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ad8:	4b04      	ldr	r3, [pc, #16]	; (aec <_gclk_init_generators_by_fref+0x38>)
     ada:	685a      	ldr	r2, [r3, #4]
     adc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     ae0:	421a      	tst	r2, r3
     ae2:	d1f9      	bne.n	ad8 <_gclk_init_generators_by_fref+0x24>
     ae4:	4770      	bx	lr
     ae6:	bf00      	nop
     ae8:	00010106 	.word	0x00010106
     aec:	40001c00 	.word	0x40001c00
     af0:	00010105 	.word	0x00010105

00000af4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     af4:	2201      	movs	r2, #1
     af6:	4b01      	ldr	r3, [pc, #4]	; (afc <_mclk_init+0x8>)
     af8:	715a      	strb	r2, [r3, #5]
     afa:	4770      	bx	lr
     afc:	40000800 	.word	0x40000800

00000b00 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     b00:	4b06      	ldr	r3, [pc, #24]	; (b1c <_osc32kctrl_init_sources+0x1c>)
     b02:	f242 0286 	movw	r2, #8326	; 0x2086
     b06:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     b08:	2200      	movs	r2, #0
     b0a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     b0c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     b0e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     b10:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     b14:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     b16:	2201      	movs	r2, #1
     b18:	741a      	strb	r2, [r3, #16]
     b1a:	4770      	bx	lr
     b1c:	40001400 	.word	0x40001400

00000b20 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     b20:	4770      	bx	lr
	...

00000b24 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     b24:	4a36      	ldr	r2, [pc, #216]	; (c00 <_oscctrl_init_referenced_generators+0xdc>)
     b26:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     b28:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     b2c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     b30:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     b32:	4b33      	ldr	r3, [pc, #204]	; (c00 <_oscctrl_init_referenced_generators+0xdc>)
     b34:	685a      	ldr	r2, [r3, #4]
     b36:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     b3a:	421a      	tst	r2, r3
     b3c:	d1f9      	bne.n	b32 <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     b3e:	4b30      	ldr	r3, [pc, #192]	; (c00 <_oscctrl_init_referenced_generators+0xdc>)
     b40:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     b42:	f013 0f04 	tst.w	r3, #4
     b46:	d1fa      	bne.n	b3e <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     b48:	4b2e      	ldr	r3, [pc, #184]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b4a:	2200      	movs	r2, #0
     b4c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     b4e:	4a2e      	ldr	r2, [pc, #184]	; (c08 <_oscctrl_init_referenced_generators+0xe4>)
     b50:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     b52:	4b2c      	ldr	r3, [pc, #176]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     b58:	f013 0f10 	tst.w	r3, #16
     b5c:	d1f9      	bne.n	b52 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     b5e:	2200      	movs	r2, #0
     b60:	4b28      	ldr	r3, [pc, #160]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b62:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     b66:	4b27      	ldr	r3, [pc, #156]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     b6c:	f013 0f04 	tst.w	r3, #4
     b70:	d1f9      	bne.n	b66 <_oscctrl_init_referenced_generators+0x42>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     b72:	2202      	movs	r2, #2
     b74:	4b23      	ldr	r3, [pc, #140]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b76:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     b78:	4b22      	ldr	r3, [pc, #136]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     b7e:	f013 0f02 	tst.w	r3, #2
     b82:	d1f9      	bne.n	b78 <_oscctrl_init_referenced_generators+0x54>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     b84:	4b1f      	ldr	r3, [pc, #124]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     b88:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     b8a:	4b1e      	ldr	r3, [pc, #120]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     b90:	f013 0f08 	tst.w	r3, #8
     b94:	d1f9      	bne.n	b8a <_oscctrl_init_referenced_generators+0x66>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     b96:	2280      	movs	r2, #128	; 0x80
     b98:	4b1a      	ldr	r3, [pc, #104]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     b9a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     b9e:	4b19      	ldr	r3, [pc, #100]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     ba0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     ba4:	f013 0f04 	tst.w	r3, #4
     ba8:	d1f9      	bne.n	b9e <_oscctrl_init_referenced_generators+0x7a>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     baa:	4b16      	ldr	r3, [pc, #88]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     bac:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     bb0:	f013 0f01 	tst.w	r3, #1
     bb4:	d01d      	beq.n	bf2 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     bb6:	4b13      	ldr	r3, [pc, #76]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     bb8:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
     bba:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     bbe:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     bc2:	d1f8      	bne.n	bb6 <_oscctrl_init_referenced_generators+0x92>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     bc4:	4b0e      	ldr	r3, [pc, #56]	; (c00 <_oscctrl_init_referenced_generators+0xdc>)
     bc6:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     bc8:	2b00      	cmp	r3, #0
     bca:	d1fb      	bne.n	bc4 <_oscctrl_init_referenced_generators+0xa0>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     bcc:	4a0c      	ldr	r2, [pc, #48]	; (c00 <_oscctrl_init_referenced_generators+0xdc>)
     bce:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     bd0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     bd4:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     bd8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     bda:	4b09      	ldr	r3, [pc, #36]	; (c00 <_oscctrl_init_referenced_generators+0xdc>)
     bdc:	685a      	ldr	r2, [r3, #4]
     bde:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     be2:	421a      	tst	r2, r3
     be4:	d1f9      	bne.n	bda <_oscctrl_init_referenced_generators+0xb6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     be6:	4b06      	ldr	r3, [pc, #24]	; (c00 <_oscctrl_init_referenced_generators+0xdc>)
     be8:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     bea:	f013 0f04 	tst.w	r3, #4
     bee:	d1fa      	bne.n	be6 <_oscctrl_init_referenced_generators+0xc2>
		;
#endif
	(void)hw;
}
     bf0:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <_oscctrl_init_referenced_generators+0xe0>)
     bf4:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     bf6:	f413 7f80 	tst.w	r3, #256	; 0x100
     bfa:	d0fa      	beq.n	bf2 <_oscctrl_init_referenced_generators+0xce>
     bfc:	e7e2      	b.n	bc4 <_oscctrl_init_referenced_generators+0xa0>
     bfe:	bf00      	nop
     c00:	40001c00 	.word	0x40001c00
     c04:	40001000 	.word	0x40001000
     c08:	04010000 	.word	0x04010000

00000c0c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     c0c:	b500      	push	{lr}
     c0e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     c10:	4b0d      	ldr	r3, [pc, #52]	; (c48 <RAMECC_Handler+0x3c>)
     c12:	789b      	ldrb	r3, [r3, #2]
     c14:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     c16:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     c18:	9b01      	ldr	r3, [sp, #4]
     c1a:	f013 0f02 	tst.w	r3, #2
     c1e:	d006      	beq.n	c2e <RAMECC_Handler+0x22>
     c20:	4b0a      	ldr	r3, [pc, #40]	; (c4c <RAMECC_Handler+0x40>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	b11b      	cbz	r3, c2e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     c26:	4a08      	ldr	r2, [pc, #32]	; (c48 <RAMECC_Handler+0x3c>)
     c28:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     c2a:	4798      	blx	r3
     c2c:	e009      	b.n	c42 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     c2e:	9b01      	ldr	r3, [sp, #4]
     c30:	f013 0f01 	tst.w	r3, #1
     c34:	d005      	beq.n	c42 <RAMECC_Handler+0x36>
     c36:	4b05      	ldr	r3, [pc, #20]	; (c4c <RAMECC_Handler+0x40>)
     c38:	685b      	ldr	r3, [r3, #4]
     c3a:	b113      	cbz	r3, c42 <RAMECC_Handler+0x36>
     c3c:	4a02      	ldr	r2, [pc, #8]	; (c48 <RAMECC_Handler+0x3c>)
     c3e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     c40:	4798      	blx	r3
	} else {
		return;
	}
}
     c42:	b003      	add	sp, #12
     c44:	f85d fb04 	ldr.w	pc, [sp], #4
     c48:	41020000 	.word	0x41020000
     c4c:	200001d8 	.word	0x200001d8

00000c50 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     c50:	b470      	push	{r4, r5, r6}
     c52:	b087      	sub	sp, #28
     c54:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     c56:	466c      	mov	r4, sp
     c58:	4d0c      	ldr	r5, [pc, #48]	; (c8c <_sercom_get_hardware_index+0x3c>)
     c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     c5e:	e895 0003 	ldmia.w	r5, {r0, r1}
     c62:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c66:	2000      	movs	r0, #0
     c68:	2805      	cmp	r0, #5
     c6a:	d80a      	bhi.n	c82 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     c6c:	ab06      	add	r3, sp, #24
     c6e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     c72:	f853 3c18 	ldr.w	r3, [r3, #-24]
     c76:	42b3      	cmp	r3, r6
     c78:	d001      	beq.n	c7e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c7a:	3001      	adds	r0, #1
     c7c:	e7f4      	b.n	c68 <_sercom_get_hardware_index+0x18>
			return i;
     c7e:	b2c0      	uxtb	r0, r0
     c80:	e000      	b.n	c84 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     c82:	2000      	movs	r0, #0
}
     c84:	b007      	add	sp, #28
     c86:	bc70      	pop	{r4, r5, r6}
     c88:	4770      	bx	lr
     c8a:	bf00      	nop
     c8c:	00001870 	.word	0x00001870

00000c90 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     c90:	b510      	push	{r4, lr}
	void *hw = device->hw;
     c92:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c94:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     c96:	f013 0f01 	tst.w	r3, #1
     c9a:	d003      	beq.n	ca4 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     c9c:	7da3      	ldrb	r3, [r4, #22]
     c9e:	f013 0f01 	tst.w	r3, #1
     ca2:	d112      	bne.n	cca <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     ca4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     ca6:	f013 0f02 	tst.w	r3, #2
     caa:	d003      	beq.n	cb4 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     cac:	7da3      	ldrb	r3, [r4, #22]
     cae:	f013 0f02 	tst.w	r3, #2
     cb2:	d10f      	bne.n	cd4 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     cb4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     cb6:	f013 0f04 	tst.w	r3, #4
     cba:	d015      	beq.n	ce8 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     cbc:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     cbe:	f003 0337 	and.w	r3, r3, #55	; 0x37
     cc2:	b163      	cbz	r3, cde <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     cc4:	23ff      	movs	r3, #255	; 0xff
     cc6:	8363      	strh	r3, [r4, #26]
     cc8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     cca:	2301      	movs	r3, #1
     ccc:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     cce:	6803      	ldr	r3, [r0, #0]
     cd0:	4798      	blx	r3
     cd2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     cd4:	2302      	movs	r3, #2
     cd6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     cd8:	6883      	ldr	r3, [r0, #8]
     cda:	4798      	blx	r3
     cdc:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     cde:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     ce0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     ce2:	b2c9      	uxtb	r1, r1
     ce4:	4798      	blx	r3
     ce6:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     ce8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     cea:	09db      	lsrs	r3, r3, #7
     cec:	d100      	bne.n	cf0 <_sercom_usart_interrupt_handler+0x60>
     cee:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     cf0:	2380      	movs	r3, #128	; 0x80
     cf2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
     cf4:	68c3      	ldr	r3, [r0, #12]
     cf6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     cf8:	8b63      	ldrh	r3, [r4, #26]
     cfa:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     cfc:	8363      	strh	r3, [r4, #26]
     cfe:	e7f6      	b.n	cee <_sercom_usart_interrupt_handler+0x5e>

00000d00 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
     d00:	4b09      	ldr	r3, [pc, #36]	; (d28 <_sercom_init_irq_param+0x28>)
     d02:	4298      	cmp	r0, r3
     d04:	d006      	beq.n	d14 <_sercom_init_irq_param+0x14>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
     d06:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
     d0a:	d006      	beq.n	d1a <_sercom_init_irq_param+0x1a>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
     d0c:	4b07      	ldr	r3, [pc, #28]	; (d2c <_sercom_init_irq_param+0x2c>)
     d0e:	4298      	cmp	r0, r3
     d10:	d006      	beq.n	d20 <_sercom_init_irq_param+0x20>
     d12:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
     d14:	4b06      	ldr	r3, [pc, #24]	; (d30 <_sercom_init_irq_param+0x30>)
     d16:	6019      	str	r1, [r3, #0]
     d18:	e7f5      	b.n	d06 <_sercom_init_irq_param+0x6>
		_sercom4_dev = (struct _usart_async_device *)dev;
     d1a:	4b05      	ldr	r3, [pc, #20]	; (d30 <_sercom_init_irq_param+0x30>)
     d1c:	6059      	str	r1, [r3, #4]
     d1e:	e7f5      	b.n	d0c <_sercom_init_irq_param+0xc>
		_sercom5_dev = (struct _usart_async_device *)dev;
     d20:	4b03      	ldr	r3, [pc, #12]	; (d30 <_sercom_init_irq_param+0x30>)
     d22:	6099      	str	r1, [r3, #8]
	}
}
     d24:	e7f5      	b.n	d12 <_sercom_init_irq_param+0x12>
     d26:	bf00      	nop
     d28:	41014000 	.word	0x41014000
     d2c:	43000400 	.word	0x43000400
     d30:	200000b8 	.word	0x200000b8

00000d34 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     d34:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
     d36:	4b04      	ldr	r3, [pc, #16]	; (d48 <_sercom_get_irq_num+0x14>)
     d38:	4798      	blx	r3
     d3a:	0080      	lsls	r0, r0, #2
     d3c:	b2c0      	uxtb	r0, r0
     d3e:	302e      	adds	r0, #46	; 0x2e
}
     d40:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     d44:	bd08      	pop	{r3, pc}
     d46:	bf00      	nop
     d48:	00000c51 	.word	0x00000c51

00000d4c <_get_sercom_index>:
{
     d4c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     d4e:	4b0c      	ldr	r3, [pc, #48]	; (d80 <_get_sercom_index+0x34>)
     d50:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     d52:	2300      	movs	r3, #0
     d54:	2b02      	cmp	r3, #2
     d56:	d80a      	bhi.n	d6e <_get_sercom_index+0x22>
		if (_usarts[i].number == sercom_offset) {
     d58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     d5c:	00d1      	lsls	r1, r2, #3
     d5e:	4a09      	ldr	r2, [pc, #36]	; (d84 <_get_sercom_index+0x38>)
     d60:	440a      	add	r2, r1
     d62:	7e12      	ldrb	r2, [r2, #24]
     d64:	4290      	cmp	r0, r2
     d66:	d009      	beq.n	d7c <_get_sercom_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     d68:	3301      	adds	r3, #1
     d6a:	b2db      	uxtb	r3, r3
     d6c:	e7f2      	b.n	d54 <_get_sercom_index+0x8>
	ASSERT(false);
     d6e:	f240 226f 	movw	r2, #623	; 0x26f
     d72:	4905      	ldr	r1, [pc, #20]	; (d88 <_get_sercom_index+0x3c>)
     d74:	2000      	movs	r0, #0
     d76:	4b05      	ldr	r3, [pc, #20]	; (d8c <_get_sercom_index+0x40>)
     d78:	4798      	blx	r3
	return 0;
     d7a:	2300      	movs	r3, #0
}
     d7c:	4618      	mov	r0, r3
     d7e:	bd08      	pop	{r3, pc}
     d80:	00000c51 	.word	0x00000c51
     d84:	00001870 	.word	0x00001870
     d88:	0000190c 	.word	0x0000190c
     d8c:	00000955 	.word	0x00000955

00000d90 <_usart_init>:
{
     d90:	b538      	push	{r3, r4, r5, lr}
     d92:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     d94:	4b3c      	ldr	r3, [pc, #240]	; (e88 <_usart_init+0xf8>)
     d96:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     d98:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     d9a:	f013 0f01 	tst.w	r3, #1
     d9e:	d122      	bne.n	de6 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     da0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     da4:	00da      	lsls	r2, r3, #3
     da6:	4b39      	ldr	r3, [pc, #228]	; (e8c <_usart_init+0xfc>)
     da8:	4413      	add	r3, r2
     daa:	69da      	ldr	r2, [r3, #28]
     dac:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     db0:	69e3      	ldr	r3, [r4, #28]
     db2:	f013 0f03 	tst.w	r3, #3
     db6:	d1fb      	bne.n	db0 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     db8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     dba:	f013 0f02 	tst.w	r3, #2
     dbe:	d00b      	beq.n	dd8 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     dc0:	6823      	ldr	r3, [r4, #0]
     dc2:	f023 0302 	bic.w	r3, r3, #2
     dc6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dc8:	69e3      	ldr	r3, [r4, #28]
     dca:	f013 0f03 	tst.w	r3, #3
     dce:	d1fb      	bne.n	dc8 <_usart_init+0x38>
     dd0:	69e3      	ldr	r3, [r4, #28]
     dd2:	f013 0f02 	tst.w	r3, #2
     dd6:	d1fb      	bne.n	dd0 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     dd8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ddc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dde:	69e3      	ldr	r3, [r4, #28]
     de0:	f013 0f03 	tst.w	r3, #3
     de4:	d1fb      	bne.n	dde <_usart_init+0x4e>
     de6:	69e3      	ldr	r3, [r4, #28]
     de8:	f013 0f01 	tst.w	r3, #1
     dec:	d1fb      	bne.n	de6 <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     dee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     df2:	00da      	lsls	r2, r3, #3
     df4:	4b25      	ldr	r3, [pc, #148]	; (e8c <_usart_init+0xfc>)
     df6:	4413      	add	r3, r2
     df8:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     dfa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     dfc:	69e3      	ldr	r3, [r4, #28]
     dfe:	f013 0f03 	tst.w	r3, #3
     e02:	d1fb      	bne.n	dfc <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     e04:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     e08:	00da      	lsls	r2, r3, #3
     e0a:	4b20      	ldr	r3, [pc, #128]	; (e8c <_usart_init+0xfc>)
     e0c:	4413      	add	r3, r2
     e0e:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e10:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e12:	69e3      	ldr	r3, [r4, #28]
     e14:	f013 0f1f 	tst.w	r3, #31
     e18:	d1fb      	bne.n	e12 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     e1a:	0042      	lsls	r2, r0, #1
     e1c:	4402      	add	r2, r0
     e1e:	00d1      	lsls	r1, r2, #3
     e20:	4b1a      	ldr	r3, [pc, #104]	; (e8c <_usart_init+0xfc>)
     e22:	440b      	add	r3, r1
     e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
     e26:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     e28:	69db      	ldr	r3, [r3, #28]
     e2a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e2e:	d10a      	bne.n	e46 <_usart_init+0xb6>
     e30:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     e34:	d107      	bne.n	e46 <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     e36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     e3a:	00da      	lsls	r2, r3, #3
     e3c:	4b13      	ldr	r3, [pc, #76]	; (e8c <_usart_init+0xfc>)
     e3e:	4413      	add	r3, r2
     e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
     e42:	81a3      	strh	r3, [r4, #12]
     e44:	e00f      	b.n	e66 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     e46:	0042      	lsls	r2, r0, #1
     e48:	4402      	add	r2, r0
     e4a:	00d1      	lsls	r1, r2, #3
     e4c:	4b0f      	ldr	r3, [pc, #60]	; (e8c <_usart_init+0xfc>)
     e4e:	440b      	add	r3, r1
     e50:	8d19      	ldrh	r1, [r3, #40]	; 0x28
     e52:	89a2      	ldrh	r2, [r4, #12]
     e54:	f361 020c 	bfi	r2, r1, #0, #13
     e58:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     e5a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
     e5e:	89a3      	ldrh	r3, [r4, #12]
     e60:	f362 334f 	bfi	r3, r2, #13, #3
     e64:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     e66:	4a09      	ldr	r2, [pc, #36]	; (e8c <_usart_init+0xfc>)
     e68:	0043      	lsls	r3, r0, #1
     e6a:	181d      	adds	r5, r3, r0
     e6c:	00e9      	lsls	r1, r5, #3
     e6e:	460d      	mov	r5, r1
     e70:	4411      	add	r1, r2
     e72:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
     e76:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     e78:	442a      	add	r2, r5
     e7a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     e7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
     e82:	2000      	movs	r0, #0
     e84:	bd38      	pop	{r3, r4, r5, pc}
     e86:	bf00      	nop
     e88:	00000d4d 	.word	0x00000d4d
     e8c:	00001870 	.word	0x00001870

00000e90 <_usart_async_init>:
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	460c      	mov	r4, r1
	ASSERT(device);
     e94:	4606      	mov	r6, r0
     e96:	22cf      	movs	r2, #207	; 0xcf
     e98:	4918      	ldr	r1, [pc, #96]	; (efc <_usart_async_init+0x6c>)
     e9a:	3000      	adds	r0, #0
     e9c:	bf18      	it	ne
     e9e:	2001      	movne	r0, #1
     ea0:	4b17      	ldr	r3, [pc, #92]	; (f00 <_usart_async_init+0x70>)
     ea2:	4798      	blx	r3
	init_status = _usart_init(hw);
     ea4:	4620      	mov	r0, r4
     ea6:	4b17      	ldr	r3, [pc, #92]	; (f04 <_usart_async_init+0x74>)
     ea8:	4798      	blx	r3
	if (init_status) {
     eaa:	4605      	mov	r5, r0
     eac:	b108      	cbz	r0, eb2 <_usart_async_init+0x22>
}
     eae:	4628      	mov	r0, r5
     eb0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     eb2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
     eb4:	4631      	mov	r1, r6
     eb6:	4620      	mov	r0, r4
     eb8:	4b13      	ldr	r3, [pc, #76]	; (f08 <_usart_async_init+0x78>)
     eba:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
     ebc:	4620      	mov	r0, r4
     ebe:	4b13      	ldr	r3, [pc, #76]	; (f0c <_usart_async_init+0x7c>)
     ec0:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
     ec2:	2400      	movs	r4, #0
     ec4:	e016      	b.n	ef4 <_usart_async_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ec6:	0941      	lsrs	r1, r0, #5
     ec8:	f000 021f 	and.w	r2, r0, #31
     ecc:	2301      	movs	r3, #1
     ece:	4093      	lsls	r3, r2
     ed0:	4a0f      	ldr	r2, [pc, #60]	; (f10 <_usart_async_init+0x80>)
     ed2:	f101 0620 	add.w	r6, r1, #32
     ed6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     eda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ede:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ee2:	f101 0660 	add.w	r6, r1, #96	; 0x60
     ee6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     eea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
     eee:	3001      	adds	r0, #1
     ef0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
     ef2:	3401      	adds	r4, #1
     ef4:	2c03      	cmp	r4, #3
     ef6:	d9e6      	bls.n	ec6 <_usart_async_init+0x36>
     ef8:	e7d9      	b.n	eae <_usart_async_init+0x1e>
     efa:	bf00      	nop
     efc:	0000190c 	.word	0x0000190c
     f00:	00000955 	.word	0x00000955
     f04:	00000d91 	.word	0x00000d91
     f08:	00000d01 	.word	0x00000d01
     f0c:	00000d35 	.word	0x00000d35
     f10:	e000e100 	.word	0xe000e100

00000f14 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     f14:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     f16:	6813      	ldr	r3, [r2, #0]
     f18:	f043 0302 	orr.w	r3, r3, #2
     f1c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f1e:	69d3      	ldr	r3, [r2, #28]
     f20:	f013 0f03 	tst.w	r3, #3
     f24:	d1fb      	bne.n	f1e <_usart_async_enable+0xa>
}
     f26:	4770      	bx	lr

00000f28 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f28:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
     f2a:	6299      	str	r1, [r3, #40]	; 0x28
     f2c:	4770      	bx	lr

00000f2e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     f2e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f30:	2201      	movs	r2, #1
     f32:	759a      	strb	r2, [r3, #22]
     f34:	4770      	bx	lr

00000f36 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     f36:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f38:	2202      	movs	r2, #2
     f3a:	759a      	strb	r2, [r3, #22]
     f3c:	4770      	bx	lr
	...

00000f40 <_usart_async_set_irq_state>:
{
     f40:	b570      	push	{r4, r5, r6, lr}
     f42:	460c      	mov	r4, r1
     f44:	4615      	mov	r5, r2
	ASSERT(device);
     f46:	4606      	mov	r6, r0
     f48:	f240 222f 	movw	r2, #559	; 0x22f
     f4c:	4916      	ldr	r1, [pc, #88]	; (fa8 <_usart_async_set_irq_state+0x68>)
     f4e:	3000      	adds	r0, #0
     f50:	bf18      	it	ne
     f52:	2001      	movne	r0, #1
     f54:	4b15      	ldr	r3, [pc, #84]	; (fac <_usart_async_set_irq_state+0x6c>)
     f56:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     f58:	b134      	cbz	r4, f68 <_usart_async_set_irq_state+0x28>
     f5a:	2c02      	cmp	r4, #2
     f5c:	d004      	beq.n	f68 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_RX_DONE == type) {
     f5e:	2c01      	cmp	r4, #1
     f60:	d011      	beq.n	f86 <_usart_async_set_irq_state+0x46>
	} else if (USART_ASYNC_ERROR == type) {
     f62:	2c03      	cmp	r4, #3
     f64:	d017      	beq.n	f96 <_usart_async_set_irq_state+0x56>
     f66:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     f68:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     f6a:	b935      	cbnz	r5, f7a <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     f6c:	2201      	movs	r2, #1
     f6e:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     f70:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     f72:	b92d      	cbnz	r5, f80 <_usart_async_set_irq_state+0x40>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     f74:	2202      	movs	r2, #2
     f76:	751a      	strb	r2, [r3, #20]
     f78:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f7a:	2201      	movs	r2, #1
     f7c:	759a      	strb	r2, [r3, #22]
     f7e:	e7f7      	b.n	f70 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f80:	2202      	movs	r2, #2
     f82:	759a      	strb	r2, [r3, #22]
     f84:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     f86:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     f88:	b915      	cbnz	r5, f90 <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     f8a:	2204      	movs	r2, #4
     f8c:	751a      	strb	r2, [r3, #20]
     f8e:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     f90:	2204      	movs	r2, #4
     f92:	759a      	strb	r2, [r3, #22]
     f94:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     f96:	69b3      	ldr	r3, [r6, #24]
	if (value == 0x0) {
     f98:	b115      	cbz	r5, fa0 <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     f9a:	2280      	movs	r2, #128	; 0x80
     f9c:	759a      	strb	r2, [r3, #22]
}
     f9e:	e7e2      	b.n	f66 <_usart_async_set_irq_state+0x26>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     fa0:	2280      	movs	r2, #128	; 0x80
     fa2:	751a      	strb	r2, [r3, #20]
     fa4:	bd70      	pop	{r4, r5, r6, pc}
     fa6:	bf00      	nop
     fa8:	0000190c 	.word	0x0000190c
     fac:	00000955 	.word	0x00000955

00000fb0 <SERCOM3_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_0_Handler(void)
{
     fb0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
     fb2:	4b02      	ldr	r3, [pc, #8]	; (fbc <SERCOM3_0_Handler+0xc>)
     fb4:	6818      	ldr	r0, [r3, #0]
     fb6:	4b02      	ldr	r3, [pc, #8]	; (fc0 <SERCOM3_0_Handler+0x10>)
     fb8:	4798      	blx	r3
     fba:	bd08      	pop	{r3, pc}
     fbc:	200000b8 	.word	0x200000b8
     fc0:	00000c91 	.word	0x00000c91

00000fc4 <SERCOM3_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_1_Handler(void)
{
     fc4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
     fc6:	4b02      	ldr	r3, [pc, #8]	; (fd0 <SERCOM3_1_Handler+0xc>)
     fc8:	6818      	ldr	r0, [r3, #0]
     fca:	4b02      	ldr	r3, [pc, #8]	; (fd4 <SERCOM3_1_Handler+0x10>)
     fcc:	4798      	blx	r3
     fce:	bd08      	pop	{r3, pc}
     fd0:	200000b8 	.word	0x200000b8
     fd4:	00000c91 	.word	0x00000c91

00000fd8 <SERCOM3_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_2_Handler(void)
{
     fd8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
     fda:	4b02      	ldr	r3, [pc, #8]	; (fe4 <SERCOM3_2_Handler+0xc>)
     fdc:	6818      	ldr	r0, [r3, #0]
     fde:	4b02      	ldr	r3, [pc, #8]	; (fe8 <SERCOM3_2_Handler+0x10>)
     fe0:	4798      	blx	r3
     fe2:	bd08      	pop	{r3, pc}
     fe4:	200000b8 	.word	0x200000b8
     fe8:	00000c91 	.word	0x00000c91

00000fec <SERCOM3_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM3_3_Handler(void)
{
     fec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
     fee:	4b02      	ldr	r3, [pc, #8]	; (ff8 <SERCOM3_3_Handler+0xc>)
     ff0:	6818      	ldr	r0, [r3, #0]
     ff2:	4b02      	ldr	r3, [pc, #8]	; (ffc <SERCOM3_3_Handler+0x10>)
     ff4:	4798      	blx	r3
     ff6:	bd08      	pop	{r3, pc}
     ff8:	200000b8 	.word	0x200000b8
     ffc:	00000c91 	.word	0x00000c91

00001000 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    1000:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1002:	4b02      	ldr	r3, [pc, #8]	; (100c <SERCOM4_0_Handler+0xc>)
    1004:	6858      	ldr	r0, [r3, #4]
    1006:	4b02      	ldr	r3, [pc, #8]	; (1010 <SERCOM4_0_Handler+0x10>)
    1008:	4798      	blx	r3
    100a:	bd08      	pop	{r3, pc}
    100c:	200000b8 	.word	0x200000b8
    1010:	00000c91 	.word	0x00000c91

00001014 <SERCOM4_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    1014:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <SERCOM4_1_Handler+0xc>)
    1018:	6858      	ldr	r0, [r3, #4]
    101a:	4b02      	ldr	r3, [pc, #8]	; (1024 <SERCOM4_1_Handler+0x10>)
    101c:	4798      	blx	r3
    101e:	bd08      	pop	{r3, pc}
    1020:	200000b8 	.word	0x200000b8
    1024:	00000c91 	.word	0x00000c91

00001028 <SERCOM4_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    1028:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    102a:	4b02      	ldr	r3, [pc, #8]	; (1034 <SERCOM4_2_Handler+0xc>)
    102c:	6858      	ldr	r0, [r3, #4]
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <SERCOM4_2_Handler+0x10>)
    1030:	4798      	blx	r3
    1032:	bd08      	pop	{r3, pc}
    1034:	200000b8 	.word	0x200000b8
    1038:	00000c91 	.word	0x00000c91

0000103c <SERCOM4_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    103c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    103e:	4b02      	ldr	r3, [pc, #8]	; (1048 <SERCOM4_3_Handler+0xc>)
    1040:	6858      	ldr	r0, [r3, #4]
    1042:	4b02      	ldr	r3, [pc, #8]	; (104c <SERCOM4_3_Handler+0x10>)
    1044:	4798      	blx	r3
    1046:	bd08      	pop	{r3, pc}
    1048:	200000b8 	.word	0x200000b8
    104c:	00000c91 	.word	0x00000c91

00001050 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    1050:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    1052:	4b02      	ldr	r3, [pc, #8]	; (105c <SERCOM5_0_Handler+0xc>)
    1054:	6898      	ldr	r0, [r3, #8]
    1056:	4b02      	ldr	r3, [pc, #8]	; (1060 <SERCOM5_0_Handler+0x10>)
    1058:	4798      	blx	r3
    105a:	bd08      	pop	{r3, pc}
    105c:	200000b8 	.word	0x200000b8
    1060:	00000c91 	.word	0x00000c91

00001064 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    1064:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    1066:	4b02      	ldr	r3, [pc, #8]	; (1070 <SERCOM5_1_Handler+0xc>)
    1068:	6898      	ldr	r0, [r3, #8]
    106a:	4b02      	ldr	r3, [pc, #8]	; (1074 <SERCOM5_1_Handler+0x10>)
    106c:	4798      	blx	r3
    106e:	bd08      	pop	{r3, pc}
    1070:	200000b8 	.word	0x200000b8
    1074:	00000c91 	.word	0x00000c91

00001078 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    1078:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    107a:	4b02      	ldr	r3, [pc, #8]	; (1084 <SERCOM5_2_Handler+0xc>)
    107c:	6898      	ldr	r0, [r3, #8]
    107e:	4b02      	ldr	r3, [pc, #8]	; (1088 <SERCOM5_2_Handler+0x10>)
    1080:	4798      	blx	r3
    1082:	bd08      	pop	{r3, pc}
    1084:	200000b8 	.word	0x200000b8
    1088:	00000c91 	.word	0x00000c91

0000108c <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    108c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    108e:	4b02      	ldr	r3, [pc, #8]	; (1098 <SERCOM5_3_Handler+0xc>)
    1090:	6898      	ldr	r0, [r3, #8]
    1092:	4b02      	ldr	r3, [pc, #8]	; (109c <SERCOM5_3_Handler+0x10>)
    1094:	4798      	blx	r3
    1096:	bd08      	pop	{r3, pc}
    1098:	200000b8 	.word	0x200000b8
    109c:	00000c91 	.word	0x00000c91

000010a0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    10a0:	4b03      	ldr	r3, [pc, #12]	; (10b0 <_system_time_init+0x10>)
    10a2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    10a6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    10a8:	2205      	movs	r2, #5
    10aa:	601a      	str	r2, [r3, #0]
    10ac:	4770      	bx	lr
    10ae:	bf00      	nop
    10b0:	e000e010 	.word	0xe000e010

000010b4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    10b4:	b508      	push	{r3, lr}
	_system_time_init(hw);
    10b6:	4b01      	ldr	r3, [pc, #4]	; (10bc <_delay_init+0x8>)
    10b8:	4798      	blx	r3
    10ba:	bd08      	pop	{r3, pc}
    10bc:	000010a1 	.word	0x000010a1

000010c0 <tranUsartHdlPc>:
cmd_aux_two_t cmd_aux_two = LED0_NULL;
cmd_aux_two_t cmd_aux_one = LED0_NULL;

static void tranUsartHdlPc(const struct usart_async_descriptor *const io_descr) {
	/* End transmision data */
	flagTxPc = NOBUSY;
    10c0:	2200      	movs	r2, #0
    10c2:	4b01      	ldr	r3, [pc, #4]	; (10c8 <tranUsartHdlPc+0x8>)
    10c4:	701a      	strb	r2, [r3, #0]
    10c6:	4770      	bx	lr
    10c8:	200000c4 	.word	0x200000c4

000010cc <tranUsartHdlAuxTwo>:
	}
}

static void tranUsartHdlAuxTwo(const struct usart_async_descriptor *const io_descr) {
	/* End transmision data */
	flagTxAuxTwo = NOBUSY;
    10cc:	2200      	movs	r2, #0
    10ce:	4b01      	ldr	r3, [pc, #4]	; (10d4 <tranUsartHdlAuxTwo+0x8>)
    10d0:	705a      	strb	r2, [r3, #1]
    10d2:	4770      	bx	lr
    10d4:	200000c4 	.word	0x200000c4

000010d8 <tranUsartHdlAuxOne>:
	}
}

static void tranUsartHdlAuxOne(const struct usart_async_descriptor *const io_descr) {
	/* End transmision data */
	flagTxAuxOne = NOBUSY;
    10d8:	2200      	movs	r2, #0
    10da:	4b01      	ldr	r3, [pc, #4]	; (10e0 <tranUsartHdlAuxOne+0x8>)
    10dc:	709a      	strb	r2, [r3, #2]
    10de:	4770      	bx	lr
    10e0:	200000c4 	.word	0x200000c4

000010e4 <rcvUsartHdlAuxOne>:
}

static void rcvUsartHdlAuxOne(const struct usart_async_descriptor *const io_descr) {
    10e4:	b500      	push	{lr}
    10e6:	b083      	sub	sp, #12
	uint8_t dataRcv[1];
	uint8_t numDataRcv = 0;
	
	//char *tmpStr;
	
	numDataRcv = io_read(ioSerialAuxOne, dataRcv, 1);
    10e8:	2201      	movs	r2, #1
    10ea:	a901      	add	r1, sp, #4
    10ec:	4b22      	ldr	r3, [pc, #136]	; (1178 <rcvUsartHdlAuxOne+0x94>)
    10ee:	6818      	ldr	r0, [r3, #0]
    10f0:	4b22      	ldr	r3, [pc, #136]	; (117c <rcvUsartHdlAuxOne+0x98>)
    10f2:	4798      	blx	r3
    10f4:	b2c0      	uxtb	r0, r0
	if (1 <= numDataRcv) {
    10f6:	b318      	cbz	r0, 1140 <rcvUsartHdlAuxOne+0x5c>
		if ( SIZE_BUFFER_RX <= idxRcvAuxOne) {
    10f8:	4b21      	ldr	r3, [pc, #132]	; (1180 <rcvUsartHdlAuxOne+0x9c>)
    10fa:	685b      	ldr	r3, [r3, #4]
    10fc:	2b7f      	cmp	r3, #127	; 0x7f
    10fe:	dc22      	bgt.n	1146 <rcvUsartHdlAuxOne+0x62>
				bufferRcvAuxOne[i-1] = bufferRcvAuxOne[i];
			}
			bufferRcvAuxOne[SIZE_BUFFER_RX-1] = dataRcv[0];
			idxRcvAuxOne = SIZE_BUFFER_RX;
			} else {
			bufferRcvAuxOne[idxRcvAuxOne] = dataRcv[0];
    1100:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1104:	4a1f      	ldr	r2, [pc, #124]	; (1184 <rcvUsartHdlAuxOne+0xa0>)
    1106:	54d1      	strb	r1, [r2, r3]
			idxRcvAuxOne++;
    1108:	3301      	adds	r3, #1
    110a:	4a1d      	ldr	r2, [pc, #116]	; (1180 <rcvUsartHdlAuxOne+0x9c>)
    110c:	6053      	str	r3, [r2, #4]
    110e:	e00e      	b.n	112e <rcvUsartHdlAuxOne+0x4a>
				bufferRcvAuxOne[i-1] = bufferRcvAuxOne[i];
    1110:	1e59      	subs	r1, r3, #1
    1112:	4a1c      	ldr	r2, [pc, #112]	; (1184 <rcvUsartHdlAuxOne+0xa0>)
    1114:	5cd0      	ldrb	r0, [r2, r3]
    1116:	5450      	strb	r0, [r2, r1]
			for (int i=1; SIZE_BUFFER_RX > i; i++) {
    1118:	3301      	adds	r3, #1
    111a:	2b7f      	cmp	r3, #127	; 0x7f
    111c:	ddf8      	ble.n	1110 <rcvUsartHdlAuxOne+0x2c>
			bufferRcvAuxOne[SIZE_BUFFER_RX-1] = dataRcv[0];
    111e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1122:	4b18      	ldr	r3, [pc, #96]	; (1184 <rcvUsartHdlAuxOne+0xa0>)
    1124:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			idxRcvAuxOne = SIZE_BUFFER_RX;
    1128:	2280      	movs	r2, #128	; 0x80
    112a:	4b15      	ldr	r3, [pc, #84]	; (1180 <rcvUsartHdlAuxOne+0x9c>)
    112c:	605a      	str	r2, [r3, #4]
		}
		
		// Study for some valid package
		if ( (3 < idxRcvAuxOne) && ( 0x0A == bufferRcvAuxOne[idxRcvAuxOne-1] ) && ( 0x0D == bufferRcvAuxOne[idxRcvAuxOne-2] )) {
    112e:	4b14      	ldr	r3, [pc, #80]	; (1180 <rcvUsartHdlAuxOne+0x9c>)
    1130:	685b      	ldr	r3, [r3, #4]
    1132:	2b03      	cmp	r3, #3
    1134:	dd04      	ble.n	1140 <rcvUsartHdlAuxOne+0x5c>
    1136:	1e5a      	subs	r2, r3, #1
    1138:	4912      	ldr	r1, [pc, #72]	; (1184 <rcvUsartHdlAuxOne+0xa0>)
    113a:	5c8a      	ldrb	r2, [r1, r2]
    113c:	2a0a      	cmp	r2, #10
    113e:	d004      	beq.n	114a <rcvUsartHdlAuxOne+0x66>
				ackFlagAuxOne = ACK;
			}
			cleanBufferFlagAuxOne = 1;
		}
	}
}
    1140:	b003      	add	sp, #12
    1142:	f85d fb04 	ldr.w	pc, [sp], #4
    1146:	2301      	movs	r3, #1
    1148:	e7e7      	b.n	111a <rcvUsartHdlAuxOne+0x36>
		if ( (3 < idxRcvAuxOne) && ( 0x0A == bufferRcvAuxOne[idxRcvAuxOne-1] ) && ( 0x0D == bufferRcvAuxOne[idxRcvAuxOne-2] )) {
    114a:	3b02      	subs	r3, #2
    114c:	5ccb      	ldrb	r3, [r1, r3]
    114e:	2b0d      	cmp	r3, #13
    1150:	d1f6      	bne.n	1140 <rcvUsartHdlAuxOne+0x5c>
			ackFlagAuxOne = NOACK;
    1152:	2202      	movs	r2, #2
    1154:	4b0a      	ldr	r3, [pc, #40]	; (1180 <rcvUsartHdlAuxOne+0x9c>)
    1156:	721a      	strb	r2, [r3, #8]
			result = strncmp(bufferRcvAuxOne, "ACK", 3);
    1158:	2203      	movs	r2, #3
    115a:	490b      	ldr	r1, [pc, #44]	; (1188 <rcvUsartHdlAuxOne+0xa4>)
    115c:	4809      	ldr	r0, [pc, #36]	; (1184 <rcvUsartHdlAuxOne+0xa0>)
    115e:	4b0b      	ldr	r3, [pc, #44]	; (118c <rcvUsartHdlAuxOne+0xa8>)
    1160:	4798      	blx	r3
			if ( 0 == result) {
    1162:	b920      	cbnz	r0, 116e <rcvUsartHdlAuxOne+0x8a>
				cmd_aux_two = LED0_NULL;
    1164:	4b06      	ldr	r3, [pc, #24]	; (1180 <rcvUsartHdlAuxOne+0x9c>)
    1166:	2200      	movs	r2, #0
    1168:	725a      	strb	r2, [r3, #9]
				ackFlagAuxOne = ACK;
    116a:	2201      	movs	r2, #1
    116c:	721a      	strb	r2, [r3, #8]
			cleanBufferFlagAuxOne = 1;
    116e:	2201      	movs	r2, #1
    1170:	4b03      	ldr	r3, [pc, #12]	; (1180 <rcvUsartHdlAuxOne+0x9c>)
    1172:	729a      	strb	r2, [r3, #10]
}
    1174:	e7e4      	b.n	1140 <rcvUsartHdlAuxOne+0x5c>
    1176:	bf00      	nop
    1178:	200002ec 	.word	0x200002ec
    117c:	0000066d 	.word	0x0000066d
    1180:	200000c4 	.word	0x200000c4
    1184:	20000474 	.word	0x20000474
    1188:	00001928 	.word	0x00001928
    118c:	000017b9 	.word	0x000017b9

00001190 <rcvUsartHdlAuxTwo>:
static void rcvUsartHdlAuxTwo(const struct usart_async_descriptor *const io_descr) {
    1190:	b500      	push	{lr}
    1192:	b083      	sub	sp, #12
	numDataRcv = io_read(ioSerialAuxTwo, dataRcv, 1);
    1194:	2201      	movs	r2, #1
    1196:	a901      	add	r1, sp, #4
    1198:	4b22      	ldr	r3, [pc, #136]	; (1224 <rcvUsartHdlAuxTwo+0x94>)
    119a:	6818      	ldr	r0, [r3, #0]
    119c:	4b22      	ldr	r3, [pc, #136]	; (1228 <rcvUsartHdlAuxTwo+0x98>)
    119e:	4798      	blx	r3
    11a0:	b2c0      	uxtb	r0, r0
	if (1 <= numDataRcv) {
    11a2:	b318      	cbz	r0, 11ec <rcvUsartHdlAuxTwo+0x5c>
		if ( SIZE_BUFFER_RX <= idxRcvAuxTwo) {
    11a4:	4b21      	ldr	r3, [pc, #132]	; (122c <rcvUsartHdlAuxTwo+0x9c>)
    11a6:	68db      	ldr	r3, [r3, #12]
    11a8:	2b7f      	cmp	r3, #127	; 0x7f
    11aa:	dc22      	bgt.n	11f2 <rcvUsartHdlAuxTwo+0x62>
			bufferRcvAuxTwo[idxRcvAuxTwo] = dataRcv[0];
    11ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
    11b0:	4a1f      	ldr	r2, [pc, #124]	; (1230 <rcvUsartHdlAuxTwo+0xa0>)
    11b2:	54d1      	strb	r1, [r2, r3]
			idxRcvAuxTwo++;
    11b4:	3301      	adds	r3, #1
    11b6:	4a1d      	ldr	r2, [pc, #116]	; (122c <rcvUsartHdlAuxTwo+0x9c>)
    11b8:	60d3      	str	r3, [r2, #12]
    11ba:	e00e      	b.n	11da <rcvUsartHdlAuxTwo+0x4a>
				bufferRcvAuxTwo[i-1] = bufferRcvAuxTwo[i];
    11bc:	1e59      	subs	r1, r3, #1
    11be:	4a1c      	ldr	r2, [pc, #112]	; (1230 <rcvUsartHdlAuxTwo+0xa0>)
    11c0:	5cd0      	ldrb	r0, [r2, r3]
    11c2:	5450      	strb	r0, [r2, r1]
			for (int i=1; SIZE_BUFFER_RX > i; i++) {
    11c4:	3301      	adds	r3, #1
    11c6:	2b7f      	cmp	r3, #127	; 0x7f
    11c8:	ddf8      	ble.n	11bc <rcvUsartHdlAuxTwo+0x2c>
			bufferRcvAuxTwo[SIZE_BUFFER_RX-1] = dataRcv[0];
    11ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
    11ce:	4b18      	ldr	r3, [pc, #96]	; (1230 <rcvUsartHdlAuxTwo+0xa0>)
    11d0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			idxRcvAuxTwo = SIZE_BUFFER_RX;
    11d4:	2280      	movs	r2, #128	; 0x80
    11d6:	4b15      	ldr	r3, [pc, #84]	; (122c <rcvUsartHdlAuxTwo+0x9c>)
    11d8:	60da      	str	r2, [r3, #12]
		if ( (3 < idxRcvAuxTwo) && ( 0x0A == bufferRcvAuxTwo[idxRcvAuxTwo-1] ) && ( 0x0D == bufferRcvAuxTwo[idxRcvAuxTwo-2] )) {
    11da:	4b14      	ldr	r3, [pc, #80]	; (122c <rcvUsartHdlAuxTwo+0x9c>)
    11dc:	68db      	ldr	r3, [r3, #12]
    11de:	2b03      	cmp	r3, #3
    11e0:	dd04      	ble.n	11ec <rcvUsartHdlAuxTwo+0x5c>
    11e2:	1e5a      	subs	r2, r3, #1
    11e4:	4912      	ldr	r1, [pc, #72]	; (1230 <rcvUsartHdlAuxTwo+0xa0>)
    11e6:	5c8a      	ldrb	r2, [r1, r2]
    11e8:	2a0a      	cmp	r2, #10
    11ea:	d004      	beq.n	11f6 <rcvUsartHdlAuxTwo+0x66>
}
    11ec:	b003      	add	sp, #12
    11ee:	f85d fb04 	ldr.w	pc, [sp], #4
    11f2:	2301      	movs	r3, #1
    11f4:	e7e7      	b.n	11c6 <rcvUsartHdlAuxTwo+0x36>
		if ( (3 < idxRcvAuxTwo) && ( 0x0A == bufferRcvAuxTwo[idxRcvAuxTwo-1] ) && ( 0x0D == bufferRcvAuxTwo[idxRcvAuxTwo-2] )) {
    11f6:	3b02      	subs	r3, #2
    11f8:	5ccb      	ldrb	r3, [r1, r3]
    11fa:	2b0d      	cmp	r3, #13
    11fc:	d1f6      	bne.n	11ec <rcvUsartHdlAuxTwo+0x5c>
			ackFlagAuxTwo = NOACK;
    11fe:	2202      	movs	r2, #2
    1200:	4b0a      	ldr	r3, [pc, #40]	; (122c <rcvUsartHdlAuxTwo+0x9c>)
    1202:	741a      	strb	r2, [r3, #16]
			result = strncmp(bufferRcvAuxTwo, "ACK", 3);
    1204:	2203      	movs	r2, #3
    1206:	490b      	ldr	r1, [pc, #44]	; (1234 <rcvUsartHdlAuxTwo+0xa4>)
    1208:	4809      	ldr	r0, [pc, #36]	; (1230 <rcvUsartHdlAuxTwo+0xa0>)
    120a:	4b0b      	ldr	r3, [pc, #44]	; (1238 <rcvUsartHdlAuxTwo+0xa8>)
    120c:	4798      	blx	r3
			if ( 0 == result) {
    120e:	b920      	cbnz	r0, 121a <rcvUsartHdlAuxTwo+0x8a>
				cmd_aux_two = LED0_NULL;
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <rcvUsartHdlAuxTwo+0x9c>)
    1212:	2200      	movs	r2, #0
    1214:	725a      	strb	r2, [r3, #9]
				ackFlagAuxTwo = ACK;
    1216:	2201      	movs	r2, #1
    1218:	741a      	strb	r2, [r3, #16]
			cleanBufferFlagAuxTwo = 1;
    121a:	2201      	movs	r2, #1
    121c:	4b03      	ldr	r3, [pc, #12]	; (122c <rcvUsartHdlAuxTwo+0x9c>)
    121e:	745a      	strb	r2, [r3, #17]
}
    1220:	e7e4      	b.n	11ec <rcvUsartHdlAuxTwo+0x5c>
    1222:	bf00      	nop
    1224:	200002f0 	.word	0x200002f0
    1228:	0000066d 	.word	0x0000066d
    122c:	200000c4 	.word	0x200000c4
    1230:	200003f4 	.word	0x200003f4
    1234:	00001928 	.word	0x00001928
    1238:	000017b9 	.word	0x000017b9

0000123c <rcvUsartHdlPc>:
static void rcvUsartHdlPc(const struct usart_async_descriptor *const io_descr) {
    123c:	b510      	push	{r4, lr}
    123e:	b082      	sub	sp, #8
	numDataRcv = io_read(ioSerialPC, dataRcv, 1);
    1240:	2201      	movs	r2, #1
    1242:	a901      	add	r1, sp, #4
    1244:	4b4f      	ldr	r3, [pc, #316]	; (1384 <rcvUsartHdlPc+0x148>)
    1246:	6818      	ldr	r0, [r3, #0]
    1248:	4b4f      	ldr	r3, [pc, #316]	; (1388 <rcvUsartHdlPc+0x14c>)
    124a:	4798      	blx	r3
    124c:	b2c0      	uxtb	r0, r0
	if (1 <= numDataRcv) {
    124e:	b318      	cbz	r0, 1298 <rcvUsartHdlPc+0x5c>
		if ( SIZE_BUFFER_RX <= idxRcvPc) {
    1250:	4b4e      	ldr	r3, [pc, #312]	; (138c <rcvUsartHdlPc+0x150>)
    1252:	695b      	ldr	r3, [r3, #20]
    1254:	2b7f      	cmp	r3, #127	; 0x7f
    1256:	dc21      	bgt.n	129c <rcvUsartHdlPc+0x60>
			bufferRcvPC[idxRcvPc] = dataRcv[0];
    1258:	f89d 1004 	ldrb.w	r1, [sp, #4]
    125c:	4a4c      	ldr	r2, [pc, #304]	; (1390 <rcvUsartHdlPc+0x154>)
    125e:	54d1      	strb	r1, [r2, r3]
			idxRcvPc++;
    1260:	3301      	adds	r3, #1
    1262:	4a4a      	ldr	r2, [pc, #296]	; (138c <rcvUsartHdlPc+0x150>)
    1264:	6153      	str	r3, [r2, #20]
    1266:	e00e      	b.n	1286 <rcvUsartHdlPc+0x4a>
				bufferRcvPC[i-1] = bufferRcvPC[i];
    1268:	1e59      	subs	r1, r3, #1
    126a:	4a49      	ldr	r2, [pc, #292]	; (1390 <rcvUsartHdlPc+0x154>)
    126c:	5cd0      	ldrb	r0, [r2, r3]
    126e:	5450      	strb	r0, [r2, r1]
			for (int i=1; SIZE_BUFFER_RX > i; i++) {
    1270:	3301      	adds	r3, #1
    1272:	2b7f      	cmp	r3, #127	; 0x7f
    1274:	ddf8      	ble.n	1268 <rcvUsartHdlPc+0x2c>
			bufferRcvPC[SIZE_BUFFER_RX-1] = dataRcv[0];
    1276:	f89d 2004 	ldrb.w	r2, [sp, #4]
    127a:	4b45      	ldr	r3, [pc, #276]	; (1390 <rcvUsartHdlPc+0x154>)
    127c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			idxRcvPc = SIZE_BUFFER_RX;
    1280:	2280      	movs	r2, #128	; 0x80
    1282:	4b42      	ldr	r3, [pc, #264]	; (138c <rcvUsartHdlPc+0x150>)
    1284:	615a      	str	r2, [r3, #20]
		if ( (3 < idxRcvPc) && ( 0x0A == bufferRcvPC[idxRcvPc-1] ) && ( 0x0D == bufferRcvPC[idxRcvPc-2] )) {
    1286:	4b41      	ldr	r3, [pc, #260]	; (138c <rcvUsartHdlPc+0x150>)
    1288:	695b      	ldr	r3, [r3, #20]
    128a:	2b03      	cmp	r3, #3
    128c:	dd04      	ble.n	1298 <rcvUsartHdlPc+0x5c>
    128e:	1e5a      	subs	r2, r3, #1
    1290:	493f      	ldr	r1, [pc, #252]	; (1390 <rcvUsartHdlPc+0x154>)
    1292:	5c8a      	ldrb	r2, [r1, r2]
    1294:	2a0a      	cmp	r2, #10
    1296:	d003      	beq.n	12a0 <rcvUsartHdlPc+0x64>
}
    1298:	b002      	add	sp, #8
    129a:	bd10      	pop	{r4, pc}
    129c:	2301      	movs	r3, #1
    129e:	e7e8      	b.n	1272 <rcvUsartHdlPc+0x36>
		if ( (3 < idxRcvPc) && ( 0x0A == bufferRcvPC[idxRcvPc-1] ) && ( 0x0D == bufferRcvPC[idxRcvPc-2] )) {
    12a0:	3b02      	subs	r3, #2
    12a2:	5ccb      	ldrb	r3, [r1, r3]
    12a4:	2b0d      	cmp	r3, #13
    12a6:	d1f7      	bne.n	1298 <rcvUsartHdlPc+0x5c>
			ackFlagPc = NOACK;
    12a8:	2202      	movs	r2, #2
    12aa:	4b38      	ldr	r3, [pc, #224]	; (138c <rcvUsartHdlPc+0x150>)
    12ac:	761a      	strb	r2, [r3, #24]
			result = strncmp(bufferRcvPC, "led0main=", 9);
    12ae:	2209      	movs	r2, #9
    12b0:	4938      	ldr	r1, [pc, #224]	; (1394 <rcvUsartHdlPc+0x158>)
    12b2:	4837      	ldr	r0, [pc, #220]	; (1390 <rcvUsartHdlPc+0x154>)
    12b4:	4b38      	ldr	r3, [pc, #224]	; (1398 <rcvUsartHdlPc+0x15c>)
    12b6:	4798      	blx	r3
			if ( 0 == result) {
    12b8:	b188      	cbz	r0, 12de <rcvUsartHdlPc+0xa2>
			result = strncmp(bufferRcvPC, "led0aux1=", 9);
    12ba:	2209      	movs	r2, #9
    12bc:	4937      	ldr	r1, [pc, #220]	; (139c <rcvUsartHdlPc+0x160>)
    12be:	4834      	ldr	r0, [pc, #208]	; (1390 <rcvUsartHdlPc+0x154>)
    12c0:	4b35      	ldr	r3, [pc, #212]	; (1398 <rcvUsartHdlPc+0x15c>)
    12c2:	4798      	blx	r3
			if (0 == result) {
    12c4:	2800      	cmp	r0, #0
    12c6:	d029      	beq.n	131c <rcvUsartHdlPc+0xe0>
			result = strncmp(bufferRcvPC, "led0aux2=", 9);
    12c8:	2209      	movs	r2, #9
    12ca:	4935      	ldr	r1, [pc, #212]	; (13a0 <rcvUsartHdlPc+0x164>)
    12cc:	4830      	ldr	r0, [pc, #192]	; (1390 <rcvUsartHdlPc+0x154>)
    12ce:	4b32      	ldr	r3, [pc, #200]	; (1398 <rcvUsartHdlPc+0x15c>)
    12d0:	4798      	blx	r3
			if (0 == result) {
    12d2:	2800      	cmp	r0, #0
    12d4:	d03c      	beq.n	1350 <rcvUsartHdlPc+0x114>
			cleanBufferFlagPc = 1;
    12d6:	2201      	movs	r2, #1
    12d8:	4b2c      	ldr	r3, [pc, #176]	; (138c <rcvUsartHdlPc+0x150>)
    12da:	769a      	strb	r2, [r3, #26]
}
    12dc:	e7dc      	b.n	1298 <rcvUsartHdlPc+0x5c>
				tmpStr = getStrBetweenTwoStr(bufferRcvPC, "led0main=", "\r\n");
    12de:	4a31      	ldr	r2, [pc, #196]	; (13a4 <rcvUsartHdlPc+0x168>)
    12e0:	492c      	ldr	r1, [pc, #176]	; (1394 <rcvUsartHdlPc+0x158>)
    12e2:	482b      	ldr	r0, [pc, #172]	; (1390 <rcvUsartHdlPc+0x154>)
    12e4:	4b30      	ldr	r3, [pc, #192]	; (13a8 <rcvUsartHdlPc+0x16c>)
    12e6:	4798      	blx	r3
    12e8:	4604      	mov	r4, r0
				result = strcmp(tmpStr, "on");
    12ea:	4930      	ldr	r1, [pc, #192]	; (13ac <rcvUsartHdlPc+0x170>)
    12ec:	4b30      	ldr	r3, [pc, #192]	; (13b0 <rcvUsartHdlPc+0x174>)
    12ee:	4798      	blx	r3
				if (0 == result) {
    12f0:	b930      	cbnz	r0, 1300 <rcvUsartHdlPc+0xc4>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    12f6:	4b2f      	ldr	r3, [pc, #188]	; (13b4 <rcvUsartHdlPc+0x178>)
    12f8:	615a      	str	r2, [r3, #20]
					ackFlagPc = ACK;
    12fa:	2201      	movs	r2, #1
    12fc:	4b23      	ldr	r3, [pc, #140]	; (138c <rcvUsartHdlPc+0x150>)
    12fe:	761a      	strb	r2, [r3, #24]
				result = strcmp(tmpStr, "off");
    1300:	492d      	ldr	r1, [pc, #180]	; (13b8 <rcvUsartHdlPc+0x17c>)
    1302:	4620      	mov	r0, r4
    1304:	4b2a      	ldr	r3, [pc, #168]	; (13b0 <rcvUsartHdlPc+0x174>)
    1306:	4798      	blx	r3
				if (0 == result) {
    1308:	2800      	cmp	r0, #0
    130a:	d1d6      	bne.n	12ba <rcvUsartHdlPc+0x7e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    130c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1310:	4b28      	ldr	r3, [pc, #160]	; (13b4 <rcvUsartHdlPc+0x178>)
    1312:	619a      	str	r2, [r3, #24]
					ackFlagPc = ACK;
    1314:	2201      	movs	r2, #1
    1316:	4b1d      	ldr	r3, [pc, #116]	; (138c <rcvUsartHdlPc+0x150>)
    1318:	761a      	strb	r2, [r3, #24]
    131a:	e7ce      	b.n	12ba <rcvUsartHdlPc+0x7e>
				tmpStr = getStrBetweenTwoStr(bufferRcvPC, "led0aux1=", "\r\n");
    131c:	4a21      	ldr	r2, [pc, #132]	; (13a4 <rcvUsartHdlPc+0x168>)
    131e:	491f      	ldr	r1, [pc, #124]	; (139c <rcvUsartHdlPc+0x160>)
    1320:	481b      	ldr	r0, [pc, #108]	; (1390 <rcvUsartHdlPc+0x154>)
    1322:	4b21      	ldr	r3, [pc, #132]	; (13a8 <rcvUsartHdlPc+0x16c>)
    1324:	4798      	blx	r3
    1326:	4604      	mov	r4, r0
				result = strcmp(tmpStr, "on");
    1328:	4920      	ldr	r1, [pc, #128]	; (13ac <rcvUsartHdlPc+0x170>)
    132a:	4b21      	ldr	r3, [pc, #132]	; (13b0 <rcvUsartHdlPc+0x174>)
    132c:	4798      	blx	r3
				if (0 == result) {
    132e:	b918      	cbnz	r0, 1338 <rcvUsartHdlPc+0xfc>
					cmd_aux_one = LED0_AUX_ON;
    1330:	4b16      	ldr	r3, [pc, #88]	; (138c <rcvUsartHdlPc+0x150>)
    1332:	2201      	movs	r2, #1
    1334:	765a      	strb	r2, [r3, #25]
					ackFlagPc = ACK;
    1336:	761a      	strb	r2, [r3, #24]
				result = strcmp(tmpStr, "off");
    1338:	491f      	ldr	r1, [pc, #124]	; (13b8 <rcvUsartHdlPc+0x17c>)
    133a:	4620      	mov	r0, r4
    133c:	4b1c      	ldr	r3, [pc, #112]	; (13b0 <rcvUsartHdlPc+0x174>)
    133e:	4798      	blx	r3
				if (0 == result) {
    1340:	2800      	cmp	r0, #0
    1342:	d1c1      	bne.n	12c8 <rcvUsartHdlPc+0x8c>
					cmd_aux_one = LED0_AUX_OFF;
    1344:	4b11      	ldr	r3, [pc, #68]	; (138c <rcvUsartHdlPc+0x150>)
    1346:	2202      	movs	r2, #2
    1348:	765a      	strb	r2, [r3, #25]
					ackFlagPc = ACK;
    134a:	2201      	movs	r2, #1
    134c:	761a      	strb	r2, [r3, #24]
    134e:	e7bb      	b.n	12c8 <rcvUsartHdlPc+0x8c>
				tmpStr = getStrBetweenTwoStr(bufferRcvPC, "led0aux2=", "\r\n");
    1350:	4a14      	ldr	r2, [pc, #80]	; (13a4 <rcvUsartHdlPc+0x168>)
    1352:	4913      	ldr	r1, [pc, #76]	; (13a0 <rcvUsartHdlPc+0x164>)
    1354:	480e      	ldr	r0, [pc, #56]	; (1390 <rcvUsartHdlPc+0x154>)
    1356:	4b14      	ldr	r3, [pc, #80]	; (13a8 <rcvUsartHdlPc+0x16c>)
    1358:	4798      	blx	r3
    135a:	4604      	mov	r4, r0
				result = strcmp(tmpStr, "on");
    135c:	4913      	ldr	r1, [pc, #76]	; (13ac <rcvUsartHdlPc+0x170>)
    135e:	4b14      	ldr	r3, [pc, #80]	; (13b0 <rcvUsartHdlPc+0x174>)
    1360:	4798      	blx	r3
				if (0 == result) {
    1362:	b918      	cbnz	r0, 136c <rcvUsartHdlPc+0x130>
					cmd_aux_two = LED0_AUX_ON;
    1364:	4b09      	ldr	r3, [pc, #36]	; (138c <rcvUsartHdlPc+0x150>)
    1366:	2201      	movs	r2, #1
    1368:	725a      	strb	r2, [r3, #9]
					ackFlagPc = ACK;
    136a:	761a      	strb	r2, [r3, #24]
				result = strcmp(tmpStr, "off");
    136c:	4912      	ldr	r1, [pc, #72]	; (13b8 <rcvUsartHdlPc+0x17c>)
    136e:	4620      	mov	r0, r4
    1370:	4b0f      	ldr	r3, [pc, #60]	; (13b0 <rcvUsartHdlPc+0x174>)
    1372:	4798      	blx	r3
				if (0 == result) {
    1374:	2800      	cmp	r0, #0
    1376:	d1ae      	bne.n	12d6 <rcvUsartHdlPc+0x9a>
					cmd_aux_two = LED0_AUX_OFF;
    1378:	4b04      	ldr	r3, [pc, #16]	; (138c <rcvUsartHdlPc+0x150>)
    137a:	2202      	movs	r2, #2
    137c:	725a      	strb	r2, [r3, #9]
					ackFlagPc = ACK;
    137e:	2201      	movs	r2, #1
    1380:	761a      	strb	r2, [r3, #24]
    1382:	e7a8      	b.n	12d6 <rcvUsartHdlPc+0x9a>
    1384:	200001e8 	.word	0x200001e8
    1388:	0000066d 	.word	0x0000066d
    138c:	200000c4 	.word	0x200000c4
    1390:	2000026c 	.word	0x2000026c
    1394:	0000192c 	.word	0x0000192c
    1398:	000017b9 	.word	0x000017b9
    139c:	00001940 	.word	0x00001940
    13a0:	0000194c 	.word	0x0000194c
    13a4:	000019a4 	.word	0x000019a4
    13a8:	000005b1 	.word	0x000005b1
    13ac:	00001938 	.word	0x00001938
    13b0:	00001795 	.word	0x00001795
    13b4:	41008000 	.word	0x41008000
    13b8:	0000193c 	.word	0x0000193c

000013bc <main>:

int main(void)
{
    13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    13be:	4b84      	ldr	r3, [pc, #528]	; (15d0 <main+0x214>)
    13c0:	4798      	blx	r3
	
	usart_async_register_callback(&SERIAL_PC, USART_ASYNC_TXC_CB, tranUsartHdlPc);
    13c2:	4d84      	ldr	r5, [pc, #528]	; (15d4 <main+0x218>)
    13c4:	4a84      	ldr	r2, [pc, #528]	; (15d8 <main+0x21c>)
    13c6:	2101      	movs	r1, #1
    13c8:	4628      	mov	r0, r5
    13ca:	4c84      	ldr	r4, [pc, #528]	; (15dc <main+0x220>)
    13cc:	47a0      	blx	r4
	usart_async_register_callback(&SERIAL_PC, USART_ASYNC_RXC_CB, rcvUsartHdlPc);
    13ce:	4a84      	ldr	r2, [pc, #528]	; (15e0 <main+0x224>)
    13d0:	2100      	movs	r1, #0
    13d2:	4628      	mov	r0, r5
    13d4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&SERIAL_PC, &ioSerialPC);
    13d6:	4983      	ldr	r1, [pc, #524]	; (15e4 <main+0x228>)
    13d8:	4628      	mov	r0, r5
    13da:	4f83      	ldr	r7, [pc, #524]	; (15e8 <main+0x22c>)
    13dc:	47b8      	blx	r7
	usart_async_enable(&SERIAL_PC);
    13de:	4628      	mov	r0, r5
    13e0:	4e82      	ldr	r6, [pc, #520]	; (15ec <main+0x230>)
    13e2:	47b0      	blx	r6
	
	usart_async_register_callback(&SERIAL_AUXTWO, USART_ASYNC_TXC_CB, tranUsartHdlAuxTwo);
    13e4:	4d82      	ldr	r5, [pc, #520]	; (15f0 <main+0x234>)
    13e6:	4a83      	ldr	r2, [pc, #524]	; (15f4 <main+0x238>)
    13e8:	2101      	movs	r1, #1
    13ea:	4628      	mov	r0, r5
    13ec:	47a0      	blx	r4
	usart_async_register_callback(&SERIAL_AUXTWO, USART_ASYNC_RXC_CB, rcvUsartHdlAuxTwo);
    13ee:	4a82      	ldr	r2, [pc, #520]	; (15f8 <main+0x23c>)
    13f0:	2100      	movs	r1, #0
    13f2:	4628      	mov	r0, r5
    13f4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&SERIAL_AUXTWO, &ioSerialAuxTwo);
    13f6:	4981      	ldr	r1, [pc, #516]	; (15fc <main+0x240>)
    13f8:	4628      	mov	r0, r5
    13fa:	47b8      	blx	r7
	usart_async_enable(&SERIAL_AUXTWO);
    13fc:	4628      	mov	r0, r5
    13fe:	47b0      	blx	r6
	
	usart_async_register_callback(&SERIAL_AUXONE, USART_ASYNC_TXC_CB, tranUsartHdlAuxOne);
    1400:	4d7f      	ldr	r5, [pc, #508]	; (1600 <main+0x244>)
    1402:	4a80      	ldr	r2, [pc, #512]	; (1604 <main+0x248>)
    1404:	2101      	movs	r1, #1
    1406:	4628      	mov	r0, r5
    1408:	47a0      	blx	r4
	usart_async_register_callback(&SERIAL_AUXONE, USART_ASYNC_RXC_CB, rcvUsartHdlAuxOne);
    140a:	4a7f      	ldr	r2, [pc, #508]	; (1608 <main+0x24c>)
    140c:	2100      	movs	r1, #0
    140e:	4628      	mov	r0, r5
    1410:	47a0      	blx	r4
	usart_async_get_io_descriptor(&SERIAL_AUXONE, &ioSerialAuxOne);
    1412:	497e      	ldr	r1, [pc, #504]	; (160c <main+0x250>)
    1414:	4628      	mov	r0, r5
    1416:	47b8      	blx	r7
	usart_async_enable(&SERIAL_AUXONE);
    1418:	4628      	mov	r0, r5
    141a:	47b0      	blx	r6
    141c:	e087      	b.n	152e <main+0x172>
	/* Replace with your application code */
	while (1) {
		
		if (cleanBufferFlagPc) {
			for (int i=0; i < idxRcvPc; i++ ) {
				bufferRcvPC[i] = 0;
    141e:	2100      	movs	r1, #0
    1420:	4a7b      	ldr	r2, [pc, #492]	; (1610 <main+0x254>)
    1422:	54d1      	strb	r1, [r2, r3]
			for (int i=0; i < idxRcvPc; i++ ) {
    1424:	3301      	adds	r3, #1
    1426:	4a7b      	ldr	r2, [pc, #492]	; (1614 <main+0x258>)
    1428:	6952      	ldr	r2, [r2, #20]
    142a:	4293      	cmp	r3, r2
    142c:	dbf7      	blt.n	141e <main+0x62>
			}
			idxRcvPc = 0;
    142e:	4b79      	ldr	r3, [pc, #484]	; (1614 <main+0x258>)
    1430:	2200      	movs	r2, #0
    1432:	615a      	str	r2, [r3, #20]
			cleanBufferFlagPc = 0;
    1434:	769a      	strb	r2, [r3, #26]
    1436:	e07e      	b.n	1536 <main+0x17a>
    1438:	2300      	movs	r3, #0
    143a:	e7f4      	b.n	1426 <main+0x6a>
		}
		
		if (cleanBufferFlagAuxTwo) {
			for (int i=0; i < idxRcvAuxTwo; i++ ) {
				bufferRcvAuxTwo[i] = 0;
    143c:	2100      	movs	r1, #0
    143e:	4a76      	ldr	r2, [pc, #472]	; (1618 <main+0x25c>)
    1440:	54d1      	strb	r1, [r2, r3]
			for (int i=0; i < idxRcvAuxTwo; i++ ) {
    1442:	3301      	adds	r3, #1
    1444:	4a73      	ldr	r2, [pc, #460]	; (1614 <main+0x258>)
    1446:	68d2      	ldr	r2, [r2, #12]
    1448:	4293      	cmp	r3, r2
    144a:	dbf7      	blt.n	143c <main+0x80>
			}
			idxRcvAuxTwo = 0;
    144c:	4b71      	ldr	r3, [pc, #452]	; (1614 <main+0x258>)
    144e:	2200      	movs	r2, #0
    1450:	60da      	str	r2, [r3, #12]
			cleanBufferFlagAuxTwo = 0;
    1452:	745a      	strb	r2, [r3, #17]
    1454:	e073      	b.n	153e <main+0x182>
    1456:	2300      	movs	r3, #0
    1458:	e7f4      	b.n	1444 <main+0x88>
		}
		
		if (cleanBufferFlagAuxOne) {
			for (int i=0; i < idxRcvAuxOne; i++) {
				bufferRcvAuxOne[i] = 0;
    145a:	2100      	movs	r1, #0
    145c:	4a6f      	ldr	r2, [pc, #444]	; (161c <main+0x260>)
    145e:	54d1      	strb	r1, [r2, r3]
			for (int i=0; i < idxRcvAuxOne; i++) {
    1460:	3301      	adds	r3, #1
    1462:	4a6c      	ldr	r2, [pc, #432]	; (1614 <main+0x258>)
    1464:	6852      	ldr	r2, [r2, #4]
    1466:	4293      	cmp	r3, r2
    1468:	dbf7      	blt.n	145a <main+0x9e>
			}
			idxRcvAuxOne = 0;
    146a:	4b6a      	ldr	r3, [pc, #424]	; (1614 <main+0x258>)
    146c:	2200      	movs	r2, #0
    146e:	605a      	str	r2, [r3, #4]
			cleanBufferFlagAuxOne = 0;
    1470:	729a      	strb	r2, [r3, #10]
    1472:	e068      	b.n	1546 <main+0x18a>
    1474:	2300      	movs	r3, #0
    1476:	e7f4      	b.n	1462 <main+0xa6>
		}
		
		switch (ackFlagPc) {
			case ACK:
			if ( NOBUSY == flagTxPc) {
    1478:	4b66      	ldr	r3, [pc, #408]	; (1614 <main+0x258>)
    147a:	781b      	ldrb	r3, [r3, #0]
    147c:	2b00      	cmp	r3, #0
    147e:	d168      	bne.n	1552 <main+0x196>
				ackFlagPc = NOBUSY;
    1480:	4b64      	ldr	r3, [pc, #400]	; (1614 <main+0x258>)
    1482:	2200      	movs	r2, #0
    1484:	761a      	strb	r2, [r3, #24]
				int sizeTransmit = snprintf(bufferTransPC, SIZE_BUFFER_TX, "ACK\r\n");
    1486:	4966      	ldr	r1, [pc, #408]	; (1620 <main+0x264>)
    1488:	4a66      	ldr	r2, [pc, #408]	; (1624 <main+0x268>)
    148a:	6810      	ldr	r0, [r2, #0]
    148c:	6008      	str	r0, [r1, #0]
    148e:	8892      	ldrh	r2, [r2, #4]
    1490:	808a      	strh	r2, [r1, #4]
				flagTxPc = BUSY;
    1492:	2201      	movs	r2, #1
    1494:	701a      	strb	r2, [r3, #0]
				io_write(ioSerialPC, (uint8_t *)bufferTransPC, sizeTransmit);
    1496:	2205      	movs	r2, #5
    1498:	4b52      	ldr	r3, [pc, #328]	; (15e4 <main+0x228>)
    149a:	6818      	ldr	r0, [r3, #0]
    149c:	4b62      	ldr	r3, [pc, #392]	; (1628 <main+0x26c>)
    149e:	4798      	blx	r3
    14a0:	e057      	b.n	1552 <main+0x196>
			}
			case NOACK:
			if ( NOBUSY == flagTxPc ) {
				ackFlagPc = NOBUSY;
    14a2:	4a5c      	ldr	r2, [pc, #368]	; (1614 <main+0x258>)
    14a4:	7613      	strb	r3, [r2, #24]
				int sizeTransmit = snprintf(bufferTransPC, SIZE_BUFFER_TX, "NOACK\r\n");
    14a6:	4c5e      	ldr	r4, [pc, #376]	; (1620 <main+0x264>)
    14a8:	4b60      	ldr	r3, [pc, #384]	; (162c <main+0x270>)
    14aa:	cb03      	ldmia	r3!, {r0, r1}
    14ac:	6020      	str	r0, [r4, #0]
    14ae:	6061      	str	r1, [r4, #4]
				flagTxPc = BUSY;
    14b0:	2301      	movs	r3, #1
    14b2:	7013      	strb	r3, [r2, #0]
				io_write(ioSerialPC, (uint8_t *)bufferTransPC, sizeTransmit);
    14b4:	2207      	movs	r2, #7
    14b6:	4621      	mov	r1, r4
    14b8:	4b4a      	ldr	r3, [pc, #296]	; (15e4 <main+0x228>)
    14ba:	6818      	ldr	r0, [r3, #0]
    14bc:	4b5a      	ldr	r3, [pc, #360]	; (1628 <main+0x26c>)
    14be:	4798      	blx	r3
    14c0:	e04b      	b.n	155a <main+0x19e>
			break;
		}
		
		switch (cmd_aux_two) {
			case LED0_AUX_ON:
				if (NOBUSY == flagTxAuxTwo) {
    14c2:	4b54      	ldr	r3, [pc, #336]	; (1614 <main+0x258>)
    14c4:	785b      	ldrb	r3, [r3, #1]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d14d      	bne.n	1566 <main+0x1aa>
					cmd_aux_two = WAIT_ACK;
    14ca:	4d52      	ldr	r5, [pc, #328]	; (1614 <main+0x258>)
    14cc:	2303      	movs	r3, #3
    14ce:	726b      	strb	r3, [r5, #9]
					int sizeTransmit = snprintf(bufferTransAuxTwo, SIZE_BUFFER_TX, "led0aux2=on\r\n");
    14d0:	4c57      	ldr	r4, [pc, #348]	; (1630 <main+0x274>)
    14d2:	4b58      	ldr	r3, [pc, #352]	; (1634 <main+0x278>)
    14d4:	cb07      	ldmia	r3!, {r0, r1, r2}
    14d6:	6020      	str	r0, [r4, #0]
    14d8:	6061      	str	r1, [r4, #4]
    14da:	60a2      	str	r2, [r4, #8]
    14dc:	881b      	ldrh	r3, [r3, #0]
    14de:	81a3      	strh	r3, [r4, #12]
					flagTxAuxTwo = BUSY;
    14e0:	2301      	movs	r3, #1
    14e2:	706b      	strb	r3, [r5, #1]
					io_write(ioSerialAuxTwo, (uint8_t *)bufferTransAuxTwo, sizeTransmit);
    14e4:	220d      	movs	r2, #13
    14e6:	4621      	mov	r1, r4
    14e8:	4b44      	ldr	r3, [pc, #272]	; (15fc <main+0x240>)
    14ea:	6818      	ldr	r0, [r3, #0]
    14ec:	4b4e      	ldr	r3, [pc, #312]	; (1628 <main+0x26c>)
    14ee:	4798      	blx	r3
    14f0:	e039      	b.n	1566 <main+0x1aa>
				}
				break;
			case LED0_AUX_OFF:
				if (NOBUSY == flagTxAuxTwo) {
    14f2:	4b48      	ldr	r3, [pc, #288]	; (1614 <main+0x258>)
    14f4:	785b      	ldrb	r3, [r3, #1]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d135      	bne.n	1566 <main+0x1aa>
					cmd_aux_two = WAIT_ACK;
    14fa:	4d46      	ldr	r5, [pc, #280]	; (1614 <main+0x258>)
    14fc:	2303      	movs	r3, #3
    14fe:	726b      	strb	r3, [r5, #9]
					int sizeTransmit = snprintf(bufferTransAuxTwo, SIZE_BUFFER_TX, "led0aux2=off\r\n");
    1500:	4c4b      	ldr	r4, [pc, #300]	; (1630 <main+0x274>)
    1502:	4b4d      	ldr	r3, [pc, #308]	; (1638 <main+0x27c>)
    1504:	cb07      	ldmia	r3!, {r0, r1, r2}
    1506:	6020      	str	r0, [r4, #0]
    1508:	6061      	str	r1, [r4, #4]
    150a:	60a2      	str	r2, [r4, #8]
    150c:	881a      	ldrh	r2, [r3, #0]
    150e:	789b      	ldrb	r3, [r3, #2]
    1510:	81a2      	strh	r2, [r4, #12]
    1512:	73a3      	strb	r3, [r4, #14]
					flagTxAuxTwo = BUSY;
    1514:	2301      	movs	r3, #1
    1516:	706b      	strb	r3, [r5, #1]
					io_write(ioSerialAuxTwo, (uint8_t *)bufferTransAuxTwo, sizeTransmit);
    1518:	220e      	movs	r2, #14
    151a:	4621      	mov	r1, r4
    151c:	4b37      	ldr	r3, [pc, #220]	; (15fc <main+0x240>)
    151e:	6818      	ldr	r0, [r3, #0]
    1520:	4b41      	ldr	r3, [pc, #260]	; (1628 <main+0x26c>)
    1522:	4798      	blx	r3
    1524:	e01f      	b.n	1566 <main+0x1aa>
			break;
		}
		
		switch (cmd_aux_one) {
			case LED0_AUX_ON:
				if (NOBUSY == flagTxAuxOne) {
    1526:	4b3b      	ldr	r3, [pc, #236]	; (1614 <main+0x258>)
    1528:	789b      	ldrb	r3, [r3, #2]
    152a:	2b00      	cmp	r3, #0
    152c:	d03b      	beq.n	15a6 <main+0x1ea>
		if (cleanBufferFlagPc) {
    152e:	4b39      	ldr	r3, [pc, #228]	; (1614 <main+0x258>)
    1530:	7e9b      	ldrb	r3, [r3, #26]
    1532:	2b00      	cmp	r3, #0
    1534:	d180      	bne.n	1438 <main+0x7c>
		if (cleanBufferFlagAuxTwo) {
    1536:	4b37      	ldr	r3, [pc, #220]	; (1614 <main+0x258>)
    1538:	7c5b      	ldrb	r3, [r3, #17]
    153a:	2b00      	cmp	r3, #0
    153c:	d18b      	bne.n	1456 <main+0x9a>
		if (cleanBufferFlagAuxOne) {
    153e:	4b35      	ldr	r3, [pc, #212]	; (1614 <main+0x258>)
    1540:	7a9b      	ldrb	r3, [r3, #10]
    1542:	2b00      	cmp	r3, #0
    1544:	d196      	bne.n	1474 <main+0xb8>
		switch (ackFlagPc) {
    1546:	4b33      	ldr	r3, [pc, #204]	; (1614 <main+0x258>)
    1548:	7e1b      	ldrb	r3, [r3, #24]
    154a:	2b01      	cmp	r3, #1
    154c:	d094      	beq.n	1478 <main+0xbc>
    154e:	2b02      	cmp	r3, #2
    1550:	d103      	bne.n	155a <main+0x19e>
			if ( NOBUSY == flagTxPc ) {
    1552:	4b30      	ldr	r3, [pc, #192]	; (1614 <main+0x258>)
    1554:	781b      	ldrb	r3, [r3, #0]
    1556:	2b00      	cmp	r3, #0
    1558:	d0a3      	beq.n	14a2 <main+0xe6>
		switch (cmd_aux_two) {
    155a:	4b2e      	ldr	r3, [pc, #184]	; (1614 <main+0x258>)
    155c:	7a5b      	ldrb	r3, [r3, #9]
    155e:	2b01      	cmp	r3, #1
    1560:	d0af      	beq.n	14c2 <main+0x106>
    1562:	2b02      	cmp	r3, #2
    1564:	d0c5      	beq.n	14f2 <main+0x136>
		switch (cmd_aux_one) {
    1566:	4b2b      	ldr	r3, [pc, #172]	; (1614 <main+0x258>)
    1568:	7e5b      	ldrb	r3, [r3, #25]
    156a:	2b01      	cmp	r3, #1
    156c:	d0db      	beq.n	1526 <main+0x16a>
    156e:	2b02      	cmp	r3, #2
    1570:	d1dd      	bne.n	152e <main+0x172>
					flagTxAuxOne = BUSY;
					io_write(ioSerialAuxOne, (uint8_t *)bufferTransAuxOne, sizeTransmit);
				}
			break;
			case LED0_AUX_OFF:
				if (NOBUSY == flagTxAuxOne) {
    1572:	4b28      	ldr	r3, [pc, #160]	; (1614 <main+0x258>)
    1574:	789b      	ldrb	r3, [r3, #2]
    1576:	2b00      	cmp	r3, #0
    1578:	d1d9      	bne.n	152e <main+0x172>
					cmd_aux_one = WAIT_ACK;
    157a:	4d26      	ldr	r5, [pc, #152]	; (1614 <main+0x258>)
    157c:	2303      	movs	r3, #3
    157e:	766b      	strb	r3, [r5, #25]
					int sizeTransmit = snprintf(bufferTransAuxOne, SIZE_BUFFER_TX, "led0aux1=off\r\n");
    1580:	4c2e      	ldr	r4, [pc, #184]	; (163c <main+0x280>)
    1582:	4b2f      	ldr	r3, [pc, #188]	; (1640 <main+0x284>)
    1584:	cb07      	ldmia	r3!, {r0, r1, r2}
    1586:	6020      	str	r0, [r4, #0]
    1588:	6061      	str	r1, [r4, #4]
    158a:	60a2      	str	r2, [r4, #8]
    158c:	881a      	ldrh	r2, [r3, #0]
    158e:	789b      	ldrb	r3, [r3, #2]
    1590:	81a2      	strh	r2, [r4, #12]
    1592:	73a3      	strb	r3, [r4, #14]
					flagTxAuxOne = BUSY;
    1594:	2301      	movs	r3, #1
    1596:	70ab      	strb	r3, [r5, #2]
					io_write(ioSerialAuxOne, (uint8_t *)bufferTransAuxOne, sizeTransmit);
    1598:	220e      	movs	r2, #14
    159a:	4621      	mov	r1, r4
    159c:	4b1b      	ldr	r3, [pc, #108]	; (160c <main+0x250>)
    159e:	6818      	ldr	r0, [r3, #0]
    15a0:	4b21      	ldr	r3, [pc, #132]	; (1628 <main+0x26c>)
    15a2:	4798      	blx	r3
    15a4:	e7c3      	b.n	152e <main+0x172>
					cmd_aux_one = WAIT_ACK;
    15a6:	4d1b      	ldr	r5, [pc, #108]	; (1614 <main+0x258>)
    15a8:	2303      	movs	r3, #3
    15aa:	766b      	strb	r3, [r5, #25]
					int sizeTransmit = snprintf(bufferTransAuxOne, SIZE_BUFFER_TX, "led0aux1=on\r\n");
    15ac:	4c23      	ldr	r4, [pc, #140]	; (163c <main+0x280>)
    15ae:	4b25      	ldr	r3, [pc, #148]	; (1644 <main+0x288>)
    15b0:	cb07      	ldmia	r3!, {r0, r1, r2}
    15b2:	6020      	str	r0, [r4, #0]
    15b4:	6061      	str	r1, [r4, #4]
    15b6:	60a2      	str	r2, [r4, #8]
    15b8:	881b      	ldrh	r3, [r3, #0]
    15ba:	81a3      	strh	r3, [r4, #12]
					flagTxAuxOne = BUSY;
    15bc:	2301      	movs	r3, #1
    15be:	70ab      	strb	r3, [r5, #2]
					io_write(ioSerialAuxOne, (uint8_t *)bufferTransAuxOne, sizeTransmit);
    15c0:	220d      	movs	r2, #13
    15c2:	4621      	mov	r1, r4
    15c4:	4b11      	ldr	r3, [pc, #68]	; (160c <main+0x250>)
    15c6:	6818      	ldr	r0, [r3, #0]
    15c8:	4b17      	ldr	r3, [pc, #92]	; (1628 <main+0x26c>)
    15ca:	4798      	blx	r3
    15cc:	e7af      	b.n	152e <main+0x172>
    15ce:	bf00      	nop
    15d0:	000002d1 	.word	0x000002d1
    15d4:	20000138 	.word	0x20000138
    15d8:	000010c1 	.word	0x000010c1
    15dc:	000008e1 	.word	0x000008e1
    15e0:	0000123d 	.word	0x0000123d
    15e4:	200001e8 	.word	0x200001e8
    15e8:	000008b5 	.word	0x000008b5
    15ec:	00000889 	.word	0x00000889
    15f0:	200000e8 	.word	0x200000e8
    15f4:	000010cd 	.word	0x000010cd
    15f8:	00001191 	.word	0x00001191
    15fc:	200002f0 	.word	0x200002f0
    1600:	20000188 	.word	0x20000188
    1604:	000010d9 	.word	0x000010d9
    1608:	000010e5 	.word	0x000010e5
    160c:	200002ec 	.word	0x200002ec
    1610:	2000026c 	.word	0x2000026c
    1614:	200000c4 	.word	0x200000c4
    1618:	200003f4 	.word	0x200003f4
    161c:	20000474 	.word	0x20000474
    1620:	200002f4 	.word	0x200002f4
    1624:	00001958 	.word	0x00001958
    1628:	00000639 	.word	0x00000639
    162c:	00001960 	.word	0x00001960
    1630:	200001ec 	.word	0x200001ec
    1634:	00001968 	.word	0x00001968
    1638:	00001978 	.word	0x00001978
    163c:	20000374 	.word	0x20000374
    1640:	00001998 	.word	0x00001998
    1644:	00001988 	.word	0x00001988

00001648 <__libc_init_array>:
    1648:	b570      	push	{r4, r5, r6, lr}
    164a:	4e0d      	ldr	r6, [pc, #52]	; (1680 <__libc_init_array+0x38>)
    164c:	4c0d      	ldr	r4, [pc, #52]	; (1684 <__libc_init_array+0x3c>)
    164e:	1ba4      	subs	r4, r4, r6
    1650:	10a4      	asrs	r4, r4, #2
    1652:	2500      	movs	r5, #0
    1654:	42a5      	cmp	r5, r4
    1656:	d109      	bne.n	166c <__libc_init_array+0x24>
    1658:	4e0b      	ldr	r6, [pc, #44]	; (1688 <__libc_init_array+0x40>)
    165a:	4c0c      	ldr	r4, [pc, #48]	; (168c <__libc_init_array+0x44>)
    165c:	f000 f9d4 	bl	1a08 <_init>
    1660:	1ba4      	subs	r4, r4, r6
    1662:	10a4      	asrs	r4, r4, #2
    1664:	2500      	movs	r5, #0
    1666:	42a5      	cmp	r5, r4
    1668:	d105      	bne.n	1676 <__libc_init_array+0x2e>
    166a:	bd70      	pop	{r4, r5, r6, pc}
    166c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1670:	4798      	blx	r3
    1672:	3501      	adds	r5, #1
    1674:	e7ee      	b.n	1654 <__libc_init_array+0xc>
    1676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    167a:	4798      	blx	r3
    167c:	3501      	adds	r5, #1
    167e:	e7f2      	b.n	1666 <__libc_init_array+0x1e>
    1680:	00001a14 	.word	0x00001a14
    1684:	00001a14 	.word	0x00001a14
    1688:	00001a14 	.word	0x00001a14
    168c:	00001a18 	.word	0x00001a18

00001690 <malloc>:
    1690:	4b02      	ldr	r3, [pc, #8]	; (169c <malloc+0xc>)
    1692:	4601      	mov	r1, r0
    1694:	6818      	ldr	r0, [r3, #0]
    1696:	f000 b80f 	b.w	16b8 <_malloc_r>
    169a:	bf00      	nop
    169c:	20000000 	.word	0x20000000

000016a0 <memcpy>:
    16a0:	b510      	push	{r4, lr}
    16a2:	1e43      	subs	r3, r0, #1
    16a4:	440a      	add	r2, r1
    16a6:	4291      	cmp	r1, r2
    16a8:	d100      	bne.n	16ac <memcpy+0xc>
    16aa:	bd10      	pop	{r4, pc}
    16ac:	f811 4b01 	ldrb.w	r4, [r1], #1
    16b0:	f803 4f01 	strb.w	r4, [r3, #1]!
    16b4:	e7f7      	b.n	16a6 <memcpy+0x6>
	...

000016b8 <_malloc_r>:
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	1ccd      	adds	r5, r1, #3
    16bc:	f025 0503 	bic.w	r5, r5, #3
    16c0:	3508      	adds	r5, #8
    16c2:	2d0c      	cmp	r5, #12
    16c4:	bf38      	it	cc
    16c6:	250c      	movcc	r5, #12
    16c8:	2d00      	cmp	r5, #0
    16ca:	4606      	mov	r6, r0
    16cc:	db01      	blt.n	16d2 <_malloc_r+0x1a>
    16ce:	42a9      	cmp	r1, r5
    16d0:	d903      	bls.n	16da <_malloc_r+0x22>
    16d2:	230c      	movs	r3, #12
    16d4:	6033      	str	r3, [r6, #0]
    16d6:	2000      	movs	r0, #0
    16d8:	bd70      	pop	{r4, r5, r6, pc}
    16da:	f000 f89a 	bl	1812 <__malloc_lock>
    16de:	4a23      	ldr	r2, [pc, #140]	; (176c <_malloc_r+0xb4>)
    16e0:	6814      	ldr	r4, [r2, #0]
    16e2:	4621      	mov	r1, r4
    16e4:	b991      	cbnz	r1, 170c <_malloc_r+0x54>
    16e6:	4c22      	ldr	r4, [pc, #136]	; (1770 <_malloc_r+0xb8>)
    16e8:	6823      	ldr	r3, [r4, #0]
    16ea:	b91b      	cbnz	r3, 16f4 <_malloc_r+0x3c>
    16ec:	4630      	mov	r0, r6
    16ee:	f000 f841 	bl	1774 <_sbrk_r>
    16f2:	6020      	str	r0, [r4, #0]
    16f4:	4629      	mov	r1, r5
    16f6:	4630      	mov	r0, r6
    16f8:	f000 f83c 	bl	1774 <_sbrk_r>
    16fc:	1c43      	adds	r3, r0, #1
    16fe:	d126      	bne.n	174e <_malloc_r+0x96>
    1700:	230c      	movs	r3, #12
    1702:	6033      	str	r3, [r6, #0]
    1704:	4630      	mov	r0, r6
    1706:	f000 f885 	bl	1814 <__malloc_unlock>
    170a:	e7e4      	b.n	16d6 <_malloc_r+0x1e>
    170c:	680b      	ldr	r3, [r1, #0]
    170e:	1b5b      	subs	r3, r3, r5
    1710:	d41a      	bmi.n	1748 <_malloc_r+0x90>
    1712:	2b0b      	cmp	r3, #11
    1714:	d90f      	bls.n	1736 <_malloc_r+0x7e>
    1716:	600b      	str	r3, [r1, #0]
    1718:	50cd      	str	r5, [r1, r3]
    171a:	18cc      	adds	r4, r1, r3
    171c:	4630      	mov	r0, r6
    171e:	f000 f879 	bl	1814 <__malloc_unlock>
    1722:	f104 000b 	add.w	r0, r4, #11
    1726:	1d23      	adds	r3, r4, #4
    1728:	f020 0007 	bic.w	r0, r0, #7
    172c:	1ac3      	subs	r3, r0, r3
    172e:	d01b      	beq.n	1768 <_malloc_r+0xb0>
    1730:	425a      	negs	r2, r3
    1732:	50e2      	str	r2, [r4, r3]
    1734:	bd70      	pop	{r4, r5, r6, pc}
    1736:	428c      	cmp	r4, r1
    1738:	bf0d      	iteet	eq
    173a:	6863      	ldreq	r3, [r4, #4]
    173c:	684b      	ldrne	r3, [r1, #4]
    173e:	6063      	strne	r3, [r4, #4]
    1740:	6013      	streq	r3, [r2, #0]
    1742:	bf18      	it	ne
    1744:	460c      	movne	r4, r1
    1746:	e7e9      	b.n	171c <_malloc_r+0x64>
    1748:	460c      	mov	r4, r1
    174a:	6849      	ldr	r1, [r1, #4]
    174c:	e7ca      	b.n	16e4 <_malloc_r+0x2c>
    174e:	1cc4      	adds	r4, r0, #3
    1750:	f024 0403 	bic.w	r4, r4, #3
    1754:	42a0      	cmp	r0, r4
    1756:	d005      	beq.n	1764 <_malloc_r+0xac>
    1758:	1a21      	subs	r1, r4, r0
    175a:	4630      	mov	r0, r6
    175c:	f000 f80a 	bl	1774 <_sbrk_r>
    1760:	3001      	adds	r0, #1
    1762:	d0cd      	beq.n	1700 <_malloc_r+0x48>
    1764:	6025      	str	r5, [r4, #0]
    1766:	e7d9      	b.n	171c <_malloc_r+0x64>
    1768:	bd70      	pop	{r4, r5, r6, pc}
    176a:	bf00      	nop
    176c:	200000e0 	.word	0x200000e0
    1770:	200000e4 	.word	0x200000e4

00001774 <_sbrk_r>:
    1774:	b538      	push	{r3, r4, r5, lr}
    1776:	4c06      	ldr	r4, [pc, #24]	; (1790 <_sbrk_r+0x1c>)
    1778:	2300      	movs	r3, #0
    177a:	4605      	mov	r5, r0
    177c:	4608      	mov	r0, r1
    177e:	6023      	str	r3, [r4, #0]
    1780:	f7ff f964 	bl	a4c <_sbrk>
    1784:	1c43      	adds	r3, r0, #1
    1786:	d102      	bne.n	178e <_sbrk_r+0x1a>
    1788:	6823      	ldr	r3, [r4, #0]
    178a:	b103      	cbz	r3, 178e <_sbrk_r+0x1a>
    178c:	602b      	str	r3, [r5, #0]
    178e:	bd38      	pop	{r3, r4, r5, pc}
    1790:	200004f4 	.word	0x200004f4

00001794 <strcmp>:
    1794:	f810 2b01 	ldrb.w	r2, [r0], #1
    1798:	f811 3b01 	ldrb.w	r3, [r1], #1
    179c:	2a01      	cmp	r2, #1
    179e:	bf28      	it	cs
    17a0:	429a      	cmpcs	r2, r3
    17a2:	d0f7      	beq.n	1794 <strcmp>
    17a4:	1ad0      	subs	r0, r2, r3
    17a6:	4770      	bx	lr

000017a8 <strlen>:
    17a8:	4603      	mov	r3, r0
    17aa:	f813 2b01 	ldrb.w	r2, [r3], #1
    17ae:	2a00      	cmp	r2, #0
    17b0:	d1fb      	bne.n	17aa <strlen+0x2>
    17b2:	1a18      	subs	r0, r3, r0
    17b4:	3801      	subs	r0, #1
    17b6:	4770      	bx	lr

000017b8 <strncmp>:
    17b8:	b510      	push	{r4, lr}
    17ba:	b16a      	cbz	r2, 17d8 <strncmp+0x20>
    17bc:	3901      	subs	r1, #1
    17be:	1884      	adds	r4, r0, r2
    17c0:	f810 3b01 	ldrb.w	r3, [r0], #1
    17c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    17c8:	4293      	cmp	r3, r2
    17ca:	d103      	bne.n	17d4 <strncmp+0x1c>
    17cc:	42a0      	cmp	r0, r4
    17ce:	d001      	beq.n	17d4 <strncmp+0x1c>
    17d0:	2b00      	cmp	r3, #0
    17d2:	d1f5      	bne.n	17c0 <strncmp+0x8>
    17d4:	1a98      	subs	r0, r3, r2
    17d6:	bd10      	pop	{r4, pc}
    17d8:	4610      	mov	r0, r2
    17da:	bd10      	pop	{r4, pc}

000017dc <strstr>:
    17dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17de:	7803      	ldrb	r3, [r0, #0]
    17e0:	b133      	cbz	r3, 17f0 <strstr+0x14>
    17e2:	4603      	mov	r3, r0
    17e4:	4618      	mov	r0, r3
    17e6:	1c5e      	adds	r6, r3, #1
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	b933      	cbnz	r3, 17fa <strstr+0x1e>
    17ec:	4618      	mov	r0, r3
    17ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17f0:	780b      	ldrb	r3, [r1, #0]
    17f2:	2b00      	cmp	r3, #0
    17f4:	bf18      	it	ne
    17f6:	2000      	movne	r0, #0
    17f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17fa:	1e4d      	subs	r5, r1, #1
    17fc:	1e44      	subs	r4, r0, #1
    17fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    1802:	2a00      	cmp	r2, #0
    1804:	d0f3      	beq.n	17ee <strstr+0x12>
    1806:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    180a:	4297      	cmp	r7, r2
    180c:	4633      	mov	r3, r6
    180e:	d0f6      	beq.n	17fe <strstr+0x22>
    1810:	e7e8      	b.n	17e4 <strstr+0x8>

00001812 <__malloc_lock>:
    1812:	4770      	bx	lr

00001814 <__malloc_unlock>:
    1814:	4770      	bx	lr
    1816:	0000      	movs	r0, r0
    1818:	682f2e2e 	.word	0x682f2e2e
    181c:	732f6c61 	.word	0x732f6c61
    1820:	682f6372 	.word	0x682f6372
    1824:	695f6c61 	.word	0x695f6c61
    1828:	00632e6f 	.word	0x00632e6f
    182c:	682f2e2e 	.word	0x682f2e2e
    1830:	732f6c61 	.word	0x732f6c61
    1834:	682f6372 	.word	0x682f6372
    1838:	755f6c61 	.word	0x755f6c61
    183c:	74726173 	.word	0x74726173
    1840:	7973615f 	.word	0x7973615f
    1844:	632e636e 	.word	0x632e636e
    1848:	00000000 	.word	0x00000000
    184c:	682f2e2e 	.word	0x682f2e2e
    1850:	752f6c61 	.word	0x752f6c61
    1854:	736c6974 	.word	0x736c6974
    1858:	6372732f 	.word	0x6372732f
    185c:	6974752f 	.word	0x6974752f
    1860:	725f736c 	.word	0x725f736c
    1864:	62676e69 	.word	0x62676e69
    1868:	65666675 	.word	0x65666675
    186c:	00632e72 	.word	0x00632e72
    1870:	40003000 	.word	0x40003000
    1874:	40003400 	.word	0x40003400
    1878:	41012000 	.word	0x41012000
    187c:	41014000 	.word	0x41014000
    1880:	43000000 	.word	0x43000000
    1884:	43000400 	.word	0x43000400

00001888 <_usarts>:
    1888:	00000003 40100004 00030040 00700002     .......@@.....p.
    1898:	0000f62b 00000000 00000004 40100004     +..............@
    18a8:	00030040 00700002 0000f62b 00000000     @.....p.+.......
    18b8:	00000005 40100004 00030040 00700002     .......@@.....p.
    18c8:	0000f62b 00000000                       +.......

000018d0 <_i2cms>:
	...

000018e8 <_i2css>:
	...

000018f8 <sercomspi_regs>:
	...
    190c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    191c:	65735f6c 6d6f6372 0000632e 004b4341     l_sercom.c..ACK.
    192c:	3064656c 6e69616d 0000003d 00006e6f     led0main=...on..
    193c:	0066666f 3064656c 31787561 0000003d     off.led0aux1=...
    194c:	3064656c 32787561 0000003d 0d4b4341     led0aux2=...ACK.
    195c:	0000000a 43414f4e 000a0d4b 3064656c     ....NOACK...led0
    196c:	32787561 0d6e6f3d 0000000a 3064656c     aux2=on.....led0
    197c:	32787561 66666f3d 00000a0d 3064656c     aux2=off....led0
    198c:	31787561 0d6e6f3d 0000000a 3064656c     aux1=on.....led0
    199c:	31787561 66666f3d 00000a0d              aux1=off....

000019a8 <__sf_fake_stderr>:
	...

000019c8 <__sf_fake_stdin>:
	...

000019e8 <__sf_fake_stdout>:
	...

00001a08 <_init>:
    1a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a0a:	bf00      	nop
    1a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a0e:	bc08      	pop	{r3}
    1a10:	469e      	mov	lr, r3
    1a12:	4770      	bx	lr

00001a14 <__init_array_start>:
    1a14:	00000289 	.word	0x00000289

00001a18 <_fini>:
    1a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a1a:	bf00      	nop
    1a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a1e:	bc08      	pop	{r3}
    1a20:	469e      	mov	lr, r3
    1a22:	4770      	bx	lr

00001a24 <__fini_array_start>:
    1a24:	00000265 	.word	0x00000265
